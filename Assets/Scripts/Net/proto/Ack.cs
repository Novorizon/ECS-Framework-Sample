// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ack.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Cspb {

  /// <summary>Holder for reflection information generated from ack.proto</summary>
  public static partial class AckReflection {

    #region Descriptor
    /// <summary>File descriptor for ack.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AckReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglhY2sucHJvdG8SBGNzcGIaDHN0cnVjdC5wcm90bxoJZGVmLnByb3RvIkkK",
            "Ck1hcFZpZXdBY2sSGQoFZ3JpZHMYAiADKAsyCi5jc3BiLkdyaWQSIAoGbWFy",
            "Y2hzGAMgAygLMhAuY3NwYi5NYXJjaEJyaWVmIkAKCE1hcmNoQWNrEhAKCG1h",
            "cmNoX2lkGAEgASgDEhEKCXN0YXJ0X3BvcxgCIAEoBRIPCgdlbmRfcG9zGAMg",
            "ASgFIi8KDUdpdmV1cFRpbGVBY2sSCwoDcG9zGAEgASgFEhEKCWdpdmV1cF9h",
            "dBgCIAEoAyIgChFVbmRvR2l2ZXVwVGlsZUFjaxILCgNwb3MYASABKAUitwMK",
            "C1RpbGVJbmZvQWNrEgsKA3BvcxgBIAEoBRImCgtlbnRpdHlfdHlwZRgCIAEo",
            "DjIRLmNzcGIuRU5USVRZX1RZUEUSIwoJbWFpbl9jaXR5GAMgASgLMhAuY3Nw",
            "Yi5FUENpdHlJbmZvEicKCnBfY2l0eV9kc3QYBCABKAsyEy5jc3BiLkVQQ2l0",
            "eURzdEluZm8SIgoIc3ViX2NpdHkYCCABKAsyEC5jc3BiLkVQQ2l0eUluZm8S",
            "JwoKcF9mb3J0cmVzcxgJIAEoCzITLmNzcGIuRUZvcnRyZXNzSW5mbxInCgpu",
            "X2ZvcnRyZXNzGAogASgLMhMuY3NwYi5FRm9ydHJlc3NJbmZvEiIKCG5wY19j",
            "aXR5GAsgASgLMhAuY3NwYi5FTkNpdHlJbmZvEiAKBm9jY3VweRgFIAEoCzIQ",
            "LmNzcGIuT2NjdXB5SW5mbxIjCghzdGF0aW9ucxgHIAMoCzIRLmNzcGIuU3Rh",
            "dGlvbkluZm8SHwoIbnBjX2luZm8YDCABKAsyDS5jc3BiLk5wY0luZm8SEAoI",
            "c3RhdGVfaWQYDSABKAUSEQoJY291bnR5X2lkGA4gASgFIkUKDE1hcmNoSW5m",
            "b0FjaxIQCghtYXJjaF9pZBgBIAEoAxIjCgZwbGF5ZXIYAiABKAsyEy5jc3Bi",
            "Lk1hcFBsYXllckluZm8iOgoLSGVyb0xpc3RBY2sSGQoFaGVyb3MYASADKAsy",
            "Ci5jc3BiLkhlcm8SEAoIa2luZF9leHAYAiABKAUiQgoLTmV3VHJvb3BBY2sS",
            "DwoHY2l0eV9pZBgBIAEoAxIQCgh0cm9vcF9ubxgCIAEoBRIQCgh0cm9vcF9p",
            "ZBgDIAEoAyJlCg1QbGF5ZXJJbmZvQWNrEhEKCXBsYXllcl9pZBgBIAEoAxIk",
            "CgpwbGF5ZXJJbmZvGAIgASgLMhAuY3NwYi5QbGF5ZXJJbmZvEhsKA2VychgD",
            "IAEoDjIOLmNzcGIuRVJSX0NPREUiVAoUUGxheWVyQ2hhdEFjY291bnRBY2sS",
            "EQoJcGxheWVyX2lkGAEgASgDEhQKDGNoYXRfYWNjb3VudBgCIAEoCRITCgtw",
            "bGF5ZXJfbmFtZRgDIAEoCSIPCg1EZWxGaWdodGVyQWNrIg8KDUhlcm8yVHJv",
            "b3BBY2siEAoOU3dhcEZpZ2h0ZXJBY2siRgoPRjJFbXB0eVRyb29wQWNrEg8K",
            "B2NpdHlfaWQYASABKAMSEAoIdHJvb3Bfbm8YAiABKAUSEAoIdHJvb3BfaWQY",
            "AyABKAMiLgoMVHJvb3BMaXN0QWNrEh4KBnRyb29wcxgBIAMoCzIOLmNzcGIu",
            "VHJvb3BOdGYiPgoMU2tpbGxMaXN0QWNrEhsKBnNraWxscxgBIAMoCzILLmNz",
            "cGIuU2tpbGwSEQoJc2tpbGxfZXhwGAIgASgFIhIKEFJlc2VhcmNoU2tpbGxB",
            "Y2siDwoNTGVhcm5Ta2lsbEFjayIQCg5Gb3JnZXRTa2lsbEFjayINCgtSZXNv",
            "dXJjZUFjayJACg5QbGF5ZXJMYW5kc0FjaxIuCg9jb2xsZWN0c19lbnRpdHkY",
            "ASADKAsyFS5jc3BiLlRpbGVFbnRpdHlCcmllZiI3Cg9EZWZlbmRlckluZm9B",
            "Y2sSJAoIZmlnaHRlcnMYASADKAsyEi5jc3BiLkRGaWdodGVySW5mbyJsCg9C",
            "UmVwb3J0QmFzaWNBY2sSEgoKdW5yZWFkX2lkcxgBIAMoAxIXCg9jb2xsZWN0",
            "aW9uc19pZHMYAiADKAMSEgoKcmVwb3J0X2lkcxgDIAMoAxIYChBkcmlsbF9y",
            "ZXBvcnRfaWRzGAQgAygDIg0KC0JSZXBvcnRzQWNrIiMKDlJlYWRCUmVwb3J0",
            "QWNrEhEKCXJlcG9ydF9pZBgBIAEoAyISChBCUmVwb3J0RGV0YWlsQWNrIg4K",
            "DENvbnNjcmlwdEFjayISChBVbmRvQ29uc2NyaXB0QWNrIjQKDEhlYXJ0QmVh",
            "dEFjaxIRCgljbGllbnRfdHMYASABKAMSEQoJc2VydmVyX3RzGAIgASgDIiQK",
            "FFVwZGF0ZU5iR3VpZGVTdGVwQWNrEgwKBHN0ZXAYASADKAkiEgoQRmluaXNo",
            "TmJHdWlkZUFjayImChVVcGRhdGVVbmZyb2NlR3VpZGVBY2sSDQoFZmxhZ3MY",
            "ASABKAMiFAoFR21BY2sSCwoDcmV0GAEgASgJIicKEUNvbGxlY3RCUmVwb3J0",
            "QWNrEhIKCmJyZXBvcnRfaWQYASABKAMiKwoVVW5kb0NvbGxlY3RCUmVwb3J0",
            "QWNrEhIKCmJyZXBvcnRfaWQYASABKAMiEAoOUmV0dXJuVHJvb3BBY2siDgoM",
            "QWxsb3RBc2duQWNrIg4KDFJlc2V0QXNnbkFjayIQCg5IZXJvUHJvbW90ZUFj",
            "ayIOCgxIZXJvQXdha2VBY2siKQoRSGVyb3MyU2tpbGxFeHBBY2sSFAoMY3Jp",
            "dEhlcm9zUmlkGAEgAygDIg8KDUhlcm8yU2tpbGxBY2siFQoTSGVyb1NraWxs",
            "VXBncmFkZUFjayINCgtMb2NrSGVyb0FjayIPCg1VbkxvY2tIZXJvQWNrIkwK",
            "DkNoYXRBY2NvdW50TnRmEhQKDGFjY291bnRfbmFtZRgBIAEoCRIQCghwYXNz",
            "d29yZBgCIAEoCRISCgpzZXJ2ZXJfdXJsGAMgASgJIlgKC0NoYXRSb29tTnRm",
            "EhEKCXJvb21fdHlwZRgBIAEoCRIRCglyb29tX25hbWUYAiABKAkSEgoKcm9v",
            "bV90aXRsZRgDIAEoCRIPCgdpc19qb2luGAQgASgIIg0KC1NlbmRNYWlsQWNr",
            "IhAKDkdldE1haWxMaXN0QWNrIg0KC1JlYWRNYWlsQWNrIhIKEEdldEF0dGFj",
            "aG1lbnRBY2siLwoLU3Rhck1haWxBY2sSDwoHbWFpbF9pZBgBIAEoAxIPCgdz",
            "dGFyX2lkGAIgASgDIiEKDVVuc3Rhck1haWxBY2sSEAoIbWFpbF9pZHMYASAD",
            "KAMiIQoNRGVsZXRlTWFpbEFjaxIQCghtYWlsX2lkcxgBIAMoAyKOAQoIR2Fj",
            "aGFBY2sSIAoGYXdhcmRzGAEgAygLMhAuY3NwYi5HYWNoYUF3YXJkEiEKCWdh",
            "Y2hhX2JhZxgCIAEoCzIOLmNzcGIuR2FjaGFCYWcSIAoIcHJpY2VfaWQYAyAB",
            "KAsyDi5jc3BiLkdhY2hhQmFnEhsKA2VychgEIAEoDjIOLmNzcGIuRVJSX0NP",
            "REUiMgoMR2FjaGFMaXN0QWNrEiIKCmdhY2hhX2JhZ3MYASADKAsyDi5jc3Bi",
            "LkdhY2hhQmFnIigKC1Rhc2tMaXN0QWNrEhkKBXRhc2tzGAEgAygLMgouY3Nw",
            "Yi5UYXNrIhgKCk1hcmtldHNBY2sSCgoCaWQYASABKAUiHwoRTWFya2V0QnV5",
            "VGltZXNBY2sSCgoCaWQYASABKAUiKwoQTWFya2V0QnV5SXRlbUFjaxIKCgJp",
            "ZBgBIAEoBRILCgNpZHgYAiABKAUiLQoMRmlsdGVyUG9zQWNrEhAKCGlzX2Zv",
            "dW5kGAEgASgIEgsKA3BvcxgCIAEoBSIgCgtJc05lYXJieUFjaxIRCglpc19u",
            "ZWFyYnkYASABKAgiMQoMR2V0QWxsVGF4QWNrEhAKCHRheFZhbHVlGAEgAygF",
            "Eg8KB3RheFRpbWUYAiADKAMiHwoMQnVpbGRDaXR5QWNrEg8KB2NpdHlfaWQY",
            "ASABKAMiNQoOR2V0RGVhbEluZm9BY2sSEAoIUmF0ZUxlZnQYASABKAUSEQoJ",
            "UmF0ZVJpZ2h0GAIgASgFIiQKD0NoYW5nZUF2YXRhckFjaxIRCglhdmF0YXJf",
            "aWQYASABKAUiHwoOQ2hhbmdlSW50cm9BY2sSDQoFaW50cm8YASABKAkiVgoM",
            "TUNpdHlMaXN0QWNrEh4KBmNpdGllcxgBIAMoCzIOLmNzcGIuTUNpdHlOdGYS",
            "JgoKZm9ydHJlc3NlcxgCIAMoCzISLmNzcGIuTUZvcnRyZXNzTnRmIjQKD0Nv",
            "bmZsaWN0TGlzdEFjaxIhCgljb25mbGljdHMYASADKAsyDi5jc3BiLkNvbmZs",
            "aWN0IjIKDE5DaXR5TGlzdEFjaxIiCgZjaXRpZXMYASADKAsyEi5jc3BiLk5w",
            "Y0NpdHlCcmllZiIqCgxGaW5kVW5pb25BY2sSGgoFdW5pb24YASABKAsyCy5j",
            "c3BiLlVuaW9uIhEKD1NldFVuaW9uRGVzY0FjayIUChJJbnZpdGVKb2luVW5p",
            "b25BY2siKQoUUmVtb3ZlVW5pb25NZW1iZXJBY2sSEQoJcGxheWVyX2lkGAEg",
            "ASgDIjQKEERpc3NvbHZlVW5pb25BY2sSIAoFdW5pb24YASABKAsyES5jc3Bi",
            "LlBsYXllclVuaW9uIiIKEFB1c2hFdmVudExpc3RBY2sSDgoGZXZlbnRzGAEg",
            "AygJIhUKE1VwZGF0ZVB1c2hFdmVudHNBY2sidAoIRHJpbGxBY2sSEgoKY3Vy",
            "cmVudF9pZBgBIAEoBRIOCgZtaW5faWQYAiABKAUSDgoGbWF4X2lkGAMgASgF",
            "Eg0KBWhlcm9zGAQgAygDEg8KB2lzX3NraXAYBSABKAgSFAoMYXR0YWNrX2Nv",
            "dW50GAYgASgFInwKCkRyaWxsSURBY2sSEAoIZHJpbGxfaWQYASABKAUSFgoO",
            "b2NjdXBpZWRfdGlsZXMYAiADKAUSEwoLZmluaXNoX3RpbWUYAyABKAMSDwoH",
            "ZXhwZW5jZRgEIAEoBRIeCgV0aWxlcxgFIAMoCzIPLmNzcGIuRHJpbGxUaWxl",
            "IigKFURyaWxsU2tpcEFuaW1hdGlvbkFjaxIPCgdpc19za2lwGAEgASgIImcK",
            "EURyaWxsU3RhdGlzdGljQWNrEhQKDGRlZmVhdF9jb3VudBgBIAEoBRIoCgpw",
            "YXNzX2NvdW50GAIgAygLMhQuY3NwYi5EcmlsbFBhc3NDb3VudBISCgpucGNf",
            "dHJvb3BzGAMgAygFIj0KDFJvYm90VGFza0FjaxIPCgd0YXNrX2lkGAEgASgD",
            "EgwKBG5hbWUYAiABKAkSDgoGcGFyYW1zGAMgAygJIoEBCg5MZWFkZXJCb2Fy",
            "ZEFjaxIUCgxwZXJzb25fY291bnQYASABKAUSEwoLdW5pb25fY291bnQYAiAB",
            "KAUSIgoHcGVyc29ucxgDIAMoCzIRLmNzcGIuUGVyc29uQm9hcmQSIAoGdW5p",
            "b25zGAQgAygLMhAuY3NwYi5VbmlvbkJvYXJkIh8KDEVwaWNBd2FyZEFjaxIP",
            "CgdlcGljX2lkGAEgASgFIhAKDkdldEVwaWNJbmZvQWNrIhwKDVBOUmVnaXN0",
            "ZXJBY2sSCwoDZXJyGAEgASgJIj0KC1BheVRva2VuQWNrEhsKA2VychgBIAEo",
            "DjIOLmNzcGIuRVJSX0NPREUSEQoJcGF5X3Rva2VuGAIgASgJIjUKDk5wY0Np",
            "dHlJbmZvQWNrEiMKBWluZm9zGAEgASgLMhQuY3NwYi5OcGNDaXR5SW5mb050",
            "ZiIXChVRdWVzdGlvbk5haXJlQXdhcmRBY2siQwoSQ2hhbmdlTmFtZUNoZWNr",
            "QWNrEgwKBG5hbWUYASABKAkSHwoHZXJyQ29kZRgCIAEoDjIOLmNzcGIuRVJS",
            "X0NPREUiWwoNQ2hhbmdlTmFtZUFjaxIMCgRuYW1lGAEgASgJEh8KB2VyckNv",
            "ZGUYAiABKA4yDi5jc3BiLkVSUl9DT0RFEhsKE2ZyZWVDaGFuZ2VOYW1lVGlt",
            "ZXMYAyABKAUiOQoVUXVlcnlQbGF5ZXJzQnlOYW1lQWNrEiAKBnJlc3VsdBgB",
            "IAMoCzIQLmNzcGIuUGxheWVySW5mbyJmCg5RdWVyeVBsYXllckFjaxIfCgdl",
            "cnJDb2RlGAEgASgOMg4uY3NwYi5FUlJfQ09ERRIgCgZyZXN1bHQYAiABKAsy",
            "EC5jc3BiLlBsYXllckluZm8SEQoJcXVlcnlOYW1lGAMgASgJIhIKEERpc21h",
            "bnRsZUNpdHlBY2tiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Cspb.StructReflection.Descriptor, global::Cspb.DefReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.MapViewAck), global::Cspb.MapViewAck.Parser, new[]{ "Grids", "Marchs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.MarchAck), global::Cspb.MarchAck.Parser, new[]{ "MarchId", "StartPos", "EndPos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.GiveupTileAck), global::Cspb.GiveupTileAck.Parser, new[]{ "Pos", "GiveupAt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.UndoGiveupTileAck), global::Cspb.UndoGiveupTileAck.Parser, new[]{ "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.TileInfoAck), global::Cspb.TileInfoAck.Parser, new[]{ "Pos", "EntityType", "MainCity", "PCityDst", "SubCity", "PFortress", "NFortress", "NpcCity", "Occupy", "Stations", "NpcInfo", "StateId", "CountyId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.MarchInfoAck), global::Cspb.MarchInfoAck.Parser, new[]{ "MarchId", "Player" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.HeroListAck), global::Cspb.HeroListAck.Parser, new[]{ "Heros", "KindExp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.NewTroopAck), global::Cspb.NewTroopAck.Parser, new[]{ "CityId", "TroopNo", "TroopId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.PlayerInfoAck), global::Cspb.PlayerInfoAck.Parser, new[]{ "PlayerId", "PlayerInfo", "Err" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.PlayerChatAccountAck), global::Cspb.PlayerChatAccountAck.Parser, new[]{ "PlayerId", "ChatAccount", "PlayerName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.DelFighterAck), global::Cspb.DelFighterAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.Hero2TroopAck), global::Cspb.Hero2TroopAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.SwapFighterAck), global::Cspb.SwapFighterAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.F2EmptyTroopAck), global::Cspb.F2EmptyTroopAck.Parser, new[]{ "CityId", "TroopNo", "TroopId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.TroopListAck), global::Cspb.TroopListAck.Parser, new[]{ "Troops" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.SkillListAck), global::Cspb.SkillListAck.Parser, new[]{ "Skills", "SkillExp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.ResearchSkillAck), global::Cspb.ResearchSkillAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.LearnSkillAck), global::Cspb.LearnSkillAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.ForgetSkillAck), global::Cspb.ForgetSkillAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.ResourceAck), global::Cspb.ResourceAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.PlayerLandsAck), global::Cspb.PlayerLandsAck.Parser, new[]{ "CollectsEntity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.DefenderInfoAck), global::Cspb.DefenderInfoAck.Parser, new[]{ "Fighters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.BReportBasicAck), global::Cspb.BReportBasicAck.Parser, new[]{ "UnreadIds", "CollectionsIds", "ReportIds", "DrillReportIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.BReportsAck), global::Cspb.BReportsAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.ReadBReportAck), global::Cspb.ReadBReportAck.Parser, new[]{ "ReportId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.BReportDetailAck), global::Cspb.BReportDetailAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.ConscriptAck), global::Cspb.ConscriptAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.UndoConscriptAck), global::Cspb.UndoConscriptAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.HeartBeatAck), global::Cspb.HeartBeatAck.Parser, new[]{ "ClientTs", "ServerTs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.UpdateNbGuideStepAck), global::Cspb.UpdateNbGuideStepAck.Parser, new[]{ "Step" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.FinishNbGuideAck), global::Cspb.FinishNbGuideAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.UpdateUnfroceGuideAck), global::Cspb.UpdateUnfroceGuideAck.Parser, new[]{ "Flags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.GmAck), global::Cspb.GmAck.Parser, new[]{ "Ret" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.CollectBReportAck), global::Cspb.CollectBReportAck.Parser, new[]{ "BreportId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.UndoCollectBReportAck), global::Cspb.UndoCollectBReportAck.Parser, new[]{ "BreportId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.ReturnTroopAck), global::Cspb.ReturnTroopAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.AllotAsgnAck), global::Cspb.AllotAsgnAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.ResetAsgnAck), global::Cspb.ResetAsgnAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.HeroPromoteAck), global::Cspb.HeroPromoteAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.HeroAwakeAck), global::Cspb.HeroAwakeAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.Heros2SkillExpAck), global::Cspb.Heros2SkillExpAck.Parser, new[]{ "CritHerosRid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.Hero2SkillAck), global::Cspb.Hero2SkillAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.HeroSkillUpgradeAck), global::Cspb.HeroSkillUpgradeAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.LockHeroAck), global::Cspb.LockHeroAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.UnLockHeroAck), global::Cspb.UnLockHeroAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.ChatAccountNtf), global::Cspb.ChatAccountNtf.Parser, new[]{ "AccountName", "Password", "ServerUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.ChatRoomNtf), global::Cspb.ChatRoomNtf.Parser, new[]{ "RoomType", "RoomName", "RoomTitle", "IsJoin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.SendMailAck), global::Cspb.SendMailAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.GetMailListAck), global::Cspb.GetMailListAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.ReadMailAck), global::Cspb.ReadMailAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.GetAttachmentAck), global::Cspb.GetAttachmentAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.StarMailAck), global::Cspb.StarMailAck.Parser, new[]{ "MailId", "StarId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.UnstarMailAck), global::Cspb.UnstarMailAck.Parser, new[]{ "MailIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.DeleteMailAck), global::Cspb.DeleteMailAck.Parser, new[]{ "MailIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.GachaAck), global::Cspb.GachaAck.Parser, new[]{ "Awards", "GachaBag", "PriceId", "Err" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.GachaListAck), global::Cspb.GachaListAck.Parser, new[]{ "GachaBags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.TaskListAck), global::Cspb.TaskListAck.Parser, new[]{ "Tasks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.MarketsAck), global::Cspb.MarketsAck.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.MarketBuyTimesAck), global::Cspb.MarketBuyTimesAck.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.MarketBuyItemAck), global::Cspb.MarketBuyItemAck.Parser, new[]{ "Id", "Idx" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.FilterPosAck), global::Cspb.FilterPosAck.Parser, new[]{ "IsFound", "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.IsNearbyAck), global::Cspb.IsNearbyAck.Parser, new[]{ "IsNearby" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.GetAllTaxAck), global::Cspb.GetAllTaxAck.Parser, new[]{ "TaxValue", "TaxTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.BuildCityAck), global::Cspb.BuildCityAck.Parser, new[]{ "CityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.GetDealInfoAck), global::Cspb.GetDealInfoAck.Parser, new[]{ "RateLeft", "RateRight" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.ChangeAvatarAck), global::Cspb.ChangeAvatarAck.Parser, new[]{ "AvatarId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.ChangeIntroAck), global::Cspb.ChangeIntroAck.Parser, new[]{ "Intro" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.MCityListAck), global::Cspb.MCityListAck.Parser, new[]{ "Cities", "Fortresses" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.ConflictListAck), global::Cspb.ConflictListAck.Parser, new[]{ "Conflicts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.NCityListAck), global::Cspb.NCityListAck.Parser, new[]{ "Cities" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.FindUnionAck), global::Cspb.FindUnionAck.Parser, new[]{ "Union" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.SetUnionDescAck), global::Cspb.SetUnionDescAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.InviteJoinUnionAck), global::Cspb.InviteJoinUnionAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.RemoveUnionMemberAck), global::Cspb.RemoveUnionMemberAck.Parser, new[]{ "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.DissolveUnionAck), global::Cspb.DissolveUnionAck.Parser, new[]{ "Union" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.PushEventListAck), global::Cspb.PushEventListAck.Parser, new[]{ "Events" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.UpdatePushEventsAck), global::Cspb.UpdatePushEventsAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.DrillAck), global::Cspb.DrillAck.Parser, new[]{ "CurrentId", "MinId", "MaxId", "Heros", "IsSkip", "AttackCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.DrillIDAck), global::Cspb.DrillIDAck.Parser, new[]{ "DrillId", "OccupiedTiles", "FinishTime", "Expence", "Tiles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.DrillSkipAnimationAck), global::Cspb.DrillSkipAnimationAck.Parser, new[]{ "IsSkip" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.DrillStatisticAck), global::Cspb.DrillStatisticAck.Parser, new[]{ "DefeatCount", "PassCount", "NpcTroops" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.RobotTaskAck), global::Cspb.RobotTaskAck.Parser, new[]{ "TaskId", "Name", "Params" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.LeaderBoardAck), global::Cspb.LeaderBoardAck.Parser, new[]{ "PersonCount", "UnionCount", "Persons", "Unions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.EpicAwardAck), global::Cspb.EpicAwardAck.Parser, new[]{ "EpicId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.GetEpicInfoAck), global::Cspb.GetEpicInfoAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.PNRegisterAck), global::Cspb.PNRegisterAck.Parser, new[]{ "Err" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.PayTokenAck), global::Cspb.PayTokenAck.Parser, new[]{ "Err", "PayToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.NpcCityInfoAck), global::Cspb.NpcCityInfoAck.Parser, new[]{ "Infos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.QuestionNaireAwardAck), global::Cspb.QuestionNaireAwardAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.ChangeNameCheckAck), global::Cspb.ChangeNameCheckAck.Parser, new[]{ "Name", "ErrCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.ChangeNameAck), global::Cspb.ChangeNameAck.Parser, new[]{ "Name", "ErrCode", "FreeChangeNameTimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.QueryPlayersByNameAck), global::Cspb.QueryPlayersByNameAck.Parser, new[]{ "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.QueryPlayerAck), global::Cspb.QueryPlayerAck.Parser, new[]{ "ErrCode", "Result", "QueryName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.DismantleCityAck), global::Cspb.DismantleCityAck.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 返回MapViewReq fetch_grids 的信息
  /// 为了避免一个march包含在多个grid中, 这里不按照grid发送, 统一发送
  /// </summary>
  public sealed partial class MapViewAck : pb::IMessage<MapViewAck> {
    private static readonly pb::MessageParser<MapViewAck> _parser = new pb::MessageParser<MapViewAck>(() => new MapViewAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapViewAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapViewAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapViewAck(MapViewAck other) : this() {
      grids_ = other.grids_.Clone();
      marchs_ = other.marchs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapViewAck Clone() {
      return new MapViewAck(this);
    }

    /// <summary>Field number for the "grids" field.</summary>
    public const int GridsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cspb.Grid> _repeated_grids_codec
        = pb::FieldCodec.ForMessage(18, global::Cspb.Grid.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Grid> grids_ = new pbc::RepeatedField<global::Cspb.Grid>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Grid> Grids {
      get { return grids_; }
    }

    /// <summary>Field number for the "marchs" field.</summary>
    public const int MarchsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cspb.MarchBrief> _repeated_marchs_codec
        = pb::FieldCodec.ForMessage(26, global::Cspb.MarchBrief.Parser);
    private readonly pbc::RepeatedField<global::Cspb.MarchBrief> marchs_ = new pbc::RepeatedField<global::Cspb.MarchBrief>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.MarchBrief> Marchs {
      get { return marchs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapViewAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapViewAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!grids_.Equals(other.grids_)) return false;
      if(!marchs_.Equals(other.marchs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= grids_.GetHashCode();
      hash ^= marchs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      grids_.WriteTo(output, _repeated_grids_codec);
      marchs_.WriteTo(output, _repeated_marchs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += grids_.CalculateSize(_repeated_grids_codec);
      size += marchs_.CalculateSize(_repeated_marchs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapViewAck other) {
      if (other == null) {
        return;
      }
      grids_.Add(other.grids_);
      marchs_.Add(other.marchs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            grids_.AddEntriesFrom(input, _repeated_grids_codec);
            break;
          }
          case 26: {
            marchs_.AddEntriesFrom(input, _repeated_marchs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MarchAck : pb::IMessage<MarchAck> {
    private static readonly pb::MessageParser<MarchAck> _parser = new pb::MessageParser<MarchAck>(() => new MarchAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarchAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarchAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarchAck(MarchAck other) : this() {
      marchId_ = other.marchId_;
      startPos_ = other.startPos_;
      endPos_ = other.endPos_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarchAck Clone() {
      return new MarchAck(this);
    }

    /// <summary>Field number for the "march_id" field.</summary>
    public const int MarchIdFieldNumber = 1;
    private long marchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MarchId {
      get { return marchId_; }
      set {
        marchId_ = value;
      }
    }

    /// <summary>Field number for the "start_pos" field.</summary>
    public const int StartPosFieldNumber = 2;
    private int startPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartPos {
      get { return startPos_; }
      set {
        startPos_ = value;
      }
    }

    /// <summary>Field number for the "end_pos" field.</summary>
    public const int EndPosFieldNumber = 3;
    private int endPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndPos {
      get { return endPos_; }
      set {
        endPos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarchAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarchAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MarchId != other.MarchId) return false;
      if (StartPos != other.StartPos) return false;
      if (EndPos != other.EndPos) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MarchId != 0L) hash ^= MarchId.GetHashCode();
      if (StartPos != 0) hash ^= StartPos.GetHashCode();
      if (EndPos != 0) hash ^= EndPos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MarchId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MarchId);
      }
      if (StartPos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StartPos);
      }
      if (EndPos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EndPos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MarchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MarchId);
      }
      if (StartPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartPos);
      }
      if (EndPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndPos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarchAck other) {
      if (other == null) {
        return;
      }
      if (other.MarchId != 0L) {
        MarchId = other.MarchId;
      }
      if (other.StartPos != 0) {
        StartPos = other.StartPos;
      }
      if (other.EndPos != 0) {
        EndPos = other.EndPos;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MarchId = input.ReadInt64();
            break;
          }
          case 16: {
            StartPos = input.ReadInt32();
            break;
          }
          case 24: {
            EndPos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GiveupTileAck : pb::IMessage<GiveupTileAck> {
    private static readonly pb::MessageParser<GiveupTileAck> _parser = new pb::MessageParser<GiveupTileAck>(() => new GiveupTileAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GiveupTileAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiveupTileAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiveupTileAck(GiveupTileAck other) : this() {
      pos_ = other.pos_;
      giveupAt_ = other.giveupAt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GiveupTileAck Clone() {
      return new GiveupTileAck(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private int pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "giveup_at" field.</summary>
    public const int GiveupAtFieldNumber = 2;
    private long giveupAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GiveupAt {
      get { return giveupAt_; }
      set {
        giveupAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GiveupTileAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GiveupTileAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pos != other.Pos) return false;
      if (GiveupAt != other.GiveupAt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (GiveupAt != 0L) hash ^= GiveupAt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pos);
      }
      if (GiveupAt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(GiveupAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (GiveupAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GiveupAt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GiveupTileAck other) {
      if (other == null) {
        return;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.GiveupAt != 0L) {
        GiveupAt = other.GiveupAt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pos = input.ReadInt32();
            break;
          }
          case 16: {
            GiveupAt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UndoGiveupTileAck : pb::IMessage<UndoGiveupTileAck> {
    private static readonly pb::MessageParser<UndoGiveupTileAck> _parser = new pb::MessageParser<UndoGiveupTileAck>(() => new UndoGiveupTileAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UndoGiveupTileAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UndoGiveupTileAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UndoGiveupTileAck(UndoGiveupTileAck other) : this() {
      pos_ = other.pos_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UndoGiveupTileAck Clone() {
      return new UndoGiveupTileAck(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private int pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UndoGiveupTileAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UndoGiveupTileAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pos != other.Pos) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UndoGiveupTileAck other) {
      if (other == null) {
        return;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 格子详细信息，点击格子时使用
  /// 土地分为3层
  /// 1.entity 表示建筑实体
  /// 2.occupy 表示占领状态
  /// 3.战斗状态
  /// </summary>
  public sealed partial class TileInfoAck : pb::IMessage<TileInfoAck> {
    private static readonly pb::MessageParser<TileInfoAck> _parser = new pb::MessageParser<TileInfoAck>(() => new TileInfoAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TileInfoAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileInfoAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileInfoAck(TileInfoAck other) : this() {
      pos_ = other.pos_;
      entityType_ = other.entityType_;
      MainCity = other.mainCity_ != null ? other.MainCity.Clone() : null;
      PCityDst = other.pCityDst_ != null ? other.PCityDst.Clone() : null;
      SubCity = other.subCity_ != null ? other.SubCity.Clone() : null;
      PFortress = other.pFortress_ != null ? other.PFortress.Clone() : null;
      NFortress = other.nFortress_ != null ? other.NFortress.Clone() : null;
      NpcCity = other.npcCity_ != null ? other.NpcCity.Clone() : null;
      Occupy = other.occupy_ != null ? other.Occupy.Clone() : null;
      stations_ = other.stations_.Clone();
      NpcInfo = other.npcInfo_ != null ? other.NpcInfo.Clone() : null;
      stateId_ = other.stateId_;
      countyId_ = other.countyId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileInfoAck Clone() {
      return new TileInfoAck(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private int pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "entity_type" field.</summary>
    public const int EntityTypeFieldNumber = 2;
    private global::Cspb.ENTITY_TYPE entityType_ = 0;
    /// <summary>
    /// entity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ENTITY_TYPE EntityType {
      get { return entityType_; }
      set {
        entityType_ = value;
      }
    }

    /// <summary>Field number for the "main_city" field.</summary>
    public const int MainCityFieldNumber = 3;
    private global::Cspb.EPCityInfo mainCity_;
    /// <summary>
    /// 主城
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.EPCityInfo MainCity {
      get { return mainCity_; }
      set {
        mainCity_ = value;
      }
    }

    /// <summary>Field number for the "p_city_dst" field.</summary>
    public const int PCityDstFieldNumber = 4;
    private global::Cspb.EPCityDstInfo pCityDst_;
    /// <summary>
    /// 分城/主城城区
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.EPCityDstInfo PCityDst {
      get { return pCityDst_; }
      set {
        pCityDst_ = value;
      }
    }

    /// <summary>Field number for the "sub_city" field.</summary>
    public const int SubCityFieldNumber = 8;
    private global::Cspb.EPCityInfo subCity_;
    /// <summary>
    /// 分城
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.EPCityInfo SubCity {
      get { return subCity_; }
      set {
        subCity_ = value;
      }
    }

    /// <summary>Field number for the "p_fortress" field.</summary>
    public const int PFortressFieldNumber = 9;
    private global::Cspb.EFortressInfo pFortress_;
    /// <summary>
    /// 玩家要塞
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.EFortressInfo PFortress {
      get { return pFortress_; }
      set {
        pFortress_ = value;
      }
    }

    /// <summary>Field number for the "n_fortress" field.</summary>
    public const int NFortressFieldNumber = 10;
    private global::Cspb.EFortressInfo nFortress_;
    /// <summary>
    /// 野外要塞
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.EFortressInfo NFortress {
      get { return nFortress_; }
      set {
        nFortress_ = value;
      }
    }

    /// <summary>Field number for the "npc_city" field.</summary>
    public const int NpcCityFieldNumber = 11;
    private global::Cspb.ENCityInfo npcCity_;
    /// <summary>
    /// npc城池
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ENCityInfo NpcCity {
      get { return npcCity_; }
      set {
        npcCity_ = value;
      }
    }

    /// <summary>Field number for the "occupy" field.</summary>
    public const int OccupyFieldNumber = 5;
    private global::Cspb.OccupyInfo occupy_;
    /// <summary>
    /// occupy
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.OccupyInfo Occupy {
      get { return occupy_; }
      set {
        occupy_ = value;
      }
    }

    /// <summary>Field number for the "stations" field.</summary>
    public const int StationsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Cspb.StationInfo> _repeated_stations_codec
        = pb::FieldCodec.ForMessage(58, global::Cspb.StationInfo.Parser);
    private readonly pbc::RepeatedField<global::Cspb.StationInfo> stations_ = new pbc::RepeatedField<global::Cspb.StationInfo>();
    /// <summary>
    /// 战斗状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.StationInfo> Stations {
      get { return stations_; }
    }

    /// <summary>Field number for the "npc_info" field.</summary>
    public const int NpcInfoFieldNumber = 12;
    private global::Cspb.NpcInfo npcInfo_;
    /// <summary>
    /// NPC 信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.NpcInfo NpcInfo {
      get { return npcInfo_; }
      set {
        npcInfo_ = value;
      }
    }

    /// <summary>Field number for the "state_id" field.</summary>
    public const int StateIdFieldNumber = 13;
    private int stateId_;
    /// <summary>
    /// 所属州ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StateId {
      get { return stateId_; }
      set {
        stateId_ = value;
      }
    }

    /// <summary>Field number for the "county_id" field.</summary>
    public const int CountyIdFieldNumber = 14;
    private int countyId_;
    /// <summary>
    /// 所属郡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CountyId {
      get { return countyId_; }
      set {
        countyId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TileInfoAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TileInfoAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pos != other.Pos) return false;
      if (EntityType != other.EntityType) return false;
      if (!object.Equals(MainCity, other.MainCity)) return false;
      if (!object.Equals(PCityDst, other.PCityDst)) return false;
      if (!object.Equals(SubCity, other.SubCity)) return false;
      if (!object.Equals(PFortress, other.PFortress)) return false;
      if (!object.Equals(NFortress, other.NFortress)) return false;
      if (!object.Equals(NpcCity, other.NpcCity)) return false;
      if (!object.Equals(Occupy, other.Occupy)) return false;
      if(!stations_.Equals(other.stations_)) return false;
      if (!object.Equals(NpcInfo, other.NpcInfo)) return false;
      if (StateId != other.StateId) return false;
      if (CountyId != other.CountyId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (EntityType != 0) hash ^= EntityType.GetHashCode();
      if (mainCity_ != null) hash ^= MainCity.GetHashCode();
      if (pCityDst_ != null) hash ^= PCityDst.GetHashCode();
      if (subCity_ != null) hash ^= SubCity.GetHashCode();
      if (pFortress_ != null) hash ^= PFortress.GetHashCode();
      if (nFortress_ != null) hash ^= NFortress.GetHashCode();
      if (npcCity_ != null) hash ^= NpcCity.GetHashCode();
      if (occupy_ != null) hash ^= Occupy.GetHashCode();
      hash ^= stations_.GetHashCode();
      if (npcInfo_ != null) hash ^= NpcInfo.GetHashCode();
      if (StateId != 0) hash ^= StateId.GetHashCode();
      if (CountyId != 0) hash ^= CountyId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pos);
      }
      if (EntityType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EntityType);
      }
      if (mainCity_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MainCity);
      }
      if (pCityDst_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PCityDst);
      }
      if (occupy_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Occupy);
      }
      stations_.WriteTo(output, _repeated_stations_codec);
      if (subCity_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SubCity);
      }
      if (pFortress_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(PFortress);
      }
      if (nFortress_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(NFortress);
      }
      if (npcCity_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(NpcCity);
      }
      if (npcInfo_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(NpcInfo);
      }
      if (StateId != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(StateId);
      }
      if (CountyId != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(CountyId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (EntityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntityType);
      }
      if (mainCity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MainCity);
      }
      if (pCityDst_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PCityDst);
      }
      if (subCity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubCity);
      }
      if (pFortress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PFortress);
      }
      if (nFortress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NFortress);
      }
      if (npcCity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NpcCity);
      }
      if (occupy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Occupy);
      }
      size += stations_.CalculateSize(_repeated_stations_codec);
      if (npcInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NpcInfo);
      }
      if (StateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StateId);
      }
      if (CountyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CountyId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TileInfoAck other) {
      if (other == null) {
        return;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.EntityType != 0) {
        EntityType = other.EntityType;
      }
      if (other.mainCity_ != null) {
        if (mainCity_ == null) {
          mainCity_ = new global::Cspb.EPCityInfo();
        }
        MainCity.MergeFrom(other.MainCity);
      }
      if (other.pCityDst_ != null) {
        if (pCityDst_ == null) {
          pCityDst_ = new global::Cspb.EPCityDstInfo();
        }
        PCityDst.MergeFrom(other.PCityDst);
      }
      if (other.subCity_ != null) {
        if (subCity_ == null) {
          subCity_ = new global::Cspb.EPCityInfo();
        }
        SubCity.MergeFrom(other.SubCity);
      }
      if (other.pFortress_ != null) {
        if (pFortress_ == null) {
          pFortress_ = new global::Cspb.EFortressInfo();
        }
        PFortress.MergeFrom(other.PFortress);
      }
      if (other.nFortress_ != null) {
        if (nFortress_ == null) {
          nFortress_ = new global::Cspb.EFortressInfo();
        }
        NFortress.MergeFrom(other.NFortress);
      }
      if (other.npcCity_ != null) {
        if (npcCity_ == null) {
          npcCity_ = new global::Cspb.ENCityInfo();
        }
        NpcCity.MergeFrom(other.NpcCity);
      }
      if (other.occupy_ != null) {
        if (occupy_ == null) {
          occupy_ = new global::Cspb.OccupyInfo();
        }
        Occupy.MergeFrom(other.Occupy);
      }
      stations_.Add(other.stations_);
      if (other.npcInfo_ != null) {
        if (npcInfo_ == null) {
          npcInfo_ = new global::Cspb.NpcInfo();
        }
        NpcInfo.MergeFrom(other.NpcInfo);
      }
      if (other.StateId != 0) {
        StateId = other.StateId;
      }
      if (other.CountyId != 0) {
        CountyId = other.CountyId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pos = input.ReadInt32();
            break;
          }
          case 16: {
            entityType_ = (global::Cspb.ENTITY_TYPE) input.ReadEnum();
            break;
          }
          case 26: {
            if (mainCity_ == null) {
              mainCity_ = new global::Cspb.EPCityInfo();
            }
            input.ReadMessage(mainCity_);
            break;
          }
          case 34: {
            if (pCityDst_ == null) {
              pCityDst_ = new global::Cspb.EPCityDstInfo();
            }
            input.ReadMessage(pCityDst_);
            break;
          }
          case 42: {
            if (occupy_ == null) {
              occupy_ = new global::Cspb.OccupyInfo();
            }
            input.ReadMessage(occupy_);
            break;
          }
          case 58: {
            stations_.AddEntriesFrom(input, _repeated_stations_codec);
            break;
          }
          case 66: {
            if (subCity_ == null) {
              subCity_ = new global::Cspb.EPCityInfo();
            }
            input.ReadMessage(subCity_);
            break;
          }
          case 74: {
            if (pFortress_ == null) {
              pFortress_ = new global::Cspb.EFortressInfo();
            }
            input.ReadMessage(pFortress_);
            break;
          }
          case 82: {
            if (nFortress_ == null) {
              nFortress_ = new global::Cspb.EFortressInfo();
            }
            input.ReadMessage(nFortress_);
            break;
          }
          case 90: {
            if (npcCity_ == null) {
              npcCity_ = new global::Cspb.ENCityInfo();
            }
            input.ReadMessage(npcCity_);
            break;
          }
          case 98: {
            if (npcInfo_ == null) {
              npcInfo_ = new global::Cspb.NpcInfo();
            }
            input.ReadMessage(npcInfo_);
            break;
          }
          case 104: {
            StateId = input.ReadInt32();
            break;
          }
          case 112: {
            CountyId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MarchInfoAck : pb::IMessage<MarchInfoAck> {
    private static readonly pb::MessageParser<MarchInfoAck> _parser = new pb::MessageParser<MarchInfoAck>(() => new MarchInfoAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarchInfoAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarchInfoAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarchInfoAck(MarchInfoAck other) : this() {
      marchId_ = other.marchId_;
      Player = other.player_ != null ? other.Player.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarchInfoAck Clone() {
      return new MarchInfoAck(this);
    }

    /// <summary>Field number for the "march_id" field.</summary>
    public const int MarchIdFieldNumber = 1;
    private long marchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MarchId {
      get { return marchId_; }
      set {
        marchId_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private global::Cspb.MapPlayerInfo player_;
    /// <summary>
    ///MarchBrief brief     = 3;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.MapPlayerInfo Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarchInfoAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarchInfoAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MarchId != other.MarchId) return false;
      if (!object.Equals(Player, other.Player)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MarchId != 0L) hash ^= MarchId.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MarchId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MarchId);
      }
      if (player_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Player);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MarchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MarchId);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarchInfoAck other) {
      if (other == null) {
        return;
      }
      if (other.MarchId != 0L) {
        MarchId = other.MarchId;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          player_ = new global::Cspb.MapPlayerInfo();
        }
        Player.MergeFrom(other.Player);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MarchId = input.ReadInt64();
            break;
          }
          case 18: {
            if (player_ == null) {
              player_ = new global::Cspb.MapPlayerInfo();
            }
            input.ReadMessage(player_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeroListAck : pb::IMessage<HeroListAck> {
    private static readonly pb::MessageParser<HeroListAck> _parser = new pb::MessageParser<HeroListAck>(() => new HeroListAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroListAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroListAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroListAck(HeroListAck other) : this() {
      heros_ = other.heros_.Clone();
      kindExp_ = other.kindExp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroListAck Clone() {
      return new HeroListAck(this);
    }

    /// <summary>Field number for the "heros" field.</summary>
    public const int HerosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.Hero> _repeated_heros_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.Hero.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Hero> heros_ = new pbc::RepeatedField<global::Cspb.Hero>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Hero> Heros {
      get { return heros_; }
    }

    /// <summary>Field number for the "kind_exp" field.</summary>
    public const int KindExpFieldNumber = 2;
    private int kindExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KindExp {
      get { return kindExp_; }
      set {
        kindExp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroListAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroListAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!heros_.Equals(other.heros_)) return false;
      if (KindExp != other.KindExp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= heros_.GetHashCode();
      if (KindExp != 0) hash ^= KindExp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      heros_.WriteTo(output, _repeated_heros_codec);
      if (KindExp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(KindExp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += heros_.CalculateSize(_repeated_heros_codec);
      if (KindExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KindExp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroListAck other) {
      if (other == null) {
        return;
      }
      heros_.Add(other.heros_);
      if (other.KindExp != 0) {
        KindExp = other.KindExp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            heros_.AddEntriesFrom(input, _repeated_heros_codec);
            break;
          }
          case 16: {
            KindExp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NewTroopAck : pb::IMessage<NewTroopAck> {
    private static readonly pb::MessageParser<NewTroopAck> _parser = new pb::MessageParser<NewTroopAck>(() => new NewTroopAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewTroopAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewTroopAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewTroopAck(NewTroopAck other) : this() {
      cityId_ = other.cityId_;
      troopNo_ = other.troopNo_;
      troopId_ = other.troopId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewTroopAck Clone() {
      return new NewTroopAck(this);
    }

    /// <summary>Field number for the "city_id" field.</summary>
    public const int CityIdFieldNumber = 1;
    private long cityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CityId {
      get { return cityId_; }
      set {
        cityId_ = value;
      }
    }

    /// <summary>Field number for the "troop_no" field.</summary>
    public const int TroopNoFieldNumber = 2;
    private int troopNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TroopNo {
      get { return troopNo_; }
      set {
        troopNo_ = value;
      }
    }

    /// <summary>Field number for the "troop_id" field.</summary>
    public const int TroopIdFieldNumber = 3;
    private long troopId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TroopId {
      get { return troopId_; }
      set {
        troopId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewTroopAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewTroopAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CityId != other.CityId) return false;
      if (TroopNo != other.TroopNo) return false;
      if (TroopId != other.TroopId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CityId != 0L) hash ^= CityId.GetHashCode();
      if (TroopNo != 0) hash ^= TroopNo.GetHashCode();
      if (TroopId != 0L) hash ^= TroopId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CityId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CityId);
      }
      if (TroopNo != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TroopNo);
      }
      if (TroopId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TroopId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CityId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CityId);
      }
      if (TroopNo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TroopNo);
      }
      if (TroopId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TroopId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewTroopAck other) {
      if (other == null) {
        return;
      }
      if (other.CityId != 0L) {
        CityId = other.CityId;
      }
      if (other.TroopNo != 0) {
        TroopNo = other.TroopNo;
      }
      if (other.TroopId != 0L) {
        TroopId = other.TroopId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CityId = input.ReadInt64();
            break;
          }
          case 16: {
            TroopNo = input.ReadInt32();
            break;
          }
          case 24: {
            TroopId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 对应所有登录/注册响应: CharCreateReq CharLoginReq FastLoginReq ...
  /// </summary>
  public sealed partial class PlayerInfoAck : pb::IMessage<PlayerInfoAck> {
    private static readonly pb::MessageParser<PlayerInfoAck> _parser = new pb::MessageParser<PlayerInfoAck>(() => new PlayerInfoAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfoAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfoAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfoAck(PlayerInfoAck other) : this() {
      playerId_ = other.playerId_;
      PlayerInfo = other.playerInfo_ != null ? other.PlayerInfo.Clone() : null;
      err_ = other.err_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfoAck Clone() {
      return new PlayerInfoAck(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "playerInfo" field.</summary>
    public const int PlayerInfoFieldNumber = 2;
    private global::Cspb.PlayerInfo playerInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 3;
    private global::Cspb.ERR_CODE err_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ERR_CODE Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfoAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfoAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (Err != other.Err) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (Err != 0) hash ^= Err.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerInfo);
      }
      if (Err != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Err);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (Err != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Err);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfoAck other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          playerInfo_ = new global::Cspb.PlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      if (other.Err != 0) {
        Err = other.Err;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 18: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::Cspb.PlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 24: {
            err_ = (global::Cspb.ERR_CODE) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerChatAccountAck : pb::IMessage<PlayerChatAccountAck> {
    private static readonly pb::MessageParser<PlayerChatAccountAck> _parser = new pb::MessageParser<PlayerChatAccountAck>(() => new PlayerChatAccountAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerChatAccountAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerChatAccountAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerChatAccountAck(PlayerChatAccountAck other) : this() {
      playerId_ = other.playerId_;
      chatAccount_ = other.chatAccount_;
      playerName_ = other.playerName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerChatAccountAck Clone() {
      return new PlayerChatAccountAck(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "chat_account" field.</summary>
    public const int ChatAccountFieldNumber = 2;
    private string chatAccount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChatAccount {
      get { return chatAccount_; }
      set {
        chatAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_name" field.</summary>
    public const int PlayerNameFieldNumber = 3;
    private string playerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerChatAccountAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerChatAccountAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (ChatAccount != other.ChatAccount) return false;
      if (PlayerName != other.PlayerName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (ChatAccount.Length != 0) hash ^= ChatAccount.GetHashCode();
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (ChatAccount.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ChatAccount);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PlayerName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (ChatAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChatAccount);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerChatAccountAck other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.ChatAccount.Length != 0) {
        ChatAccount = other.ChatAccount;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 18: {
            ChatAccount = input.ReadString();
            break;
          }
          case 26: {
            PlayerName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DelFighterAck : pb::IMessage<DelFighterAck> {
    private static readonly pb::MessageParser<DelFighterAck> _parser = new pb::MessageParser<DelFighterAck>(() => new DelFighterAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DelFighterAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelFighterAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelFighterAck(DelFighterAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelFighterAck Clone() {
      return new DelFighterAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DelFighterAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DelFighterAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DelFighterAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class Hero2TroopAck : pb::IMessage<Hero2TroopAck> {
    private static readonly pb::MessageParser<Hero2TroopAck> _parser = new pb::MessageParser<Hero2TroopAck>(() => new Hero2TroopAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hero2TroopAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hero2TroopAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hero2TroopAck(Hero2TroopAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hero2TroopAck Clone() {
      return new Hero2TroopAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hero2TroopAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hero2TroopAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hero2TroopAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class SwapFighterAck : pb::IMessage<SwapFighterAck> {
    private static readonly pb::MessageParser<SwapFighterAck> _parser = new pb::MessageParser<SwapFighterAck>(() => new SwapFighterAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SwapFighterAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapFighterAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapFighterAck(SwapFighterAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwapFighterAck Clone() {
      return new SwapFighterAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SwapFighterAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SwapFighterAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SwapFighterAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class F2EmptyTroopAck : pb::IMessage<F2EmptyTroopAck> {
    private static readonly pb::MessageParser<F2EmptyTroopAck> _parser = new pb::MessageParser<F2EmptyTroopAck>(() => new F2EmptyTroopAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<F2EmptyTroopAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public F2EmptyTroopAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public F2EmptyTroopAck(F2EmptyTroopAck other) : this() {
      cityId_ = other.cityId_;
      troopNo_ = other.troopNo_;
      troopId_ = other.troopId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public F2EmptyTroopAck Clone() {
      return new F2EmptyTroopAck(this);
    }

    /// <summary>Field number for the "city_id" field.</summary>
    public const int CityIdFieldNumber = 1;
    private long cityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CityId {
      get { return cityId_; }
      set {
        cityId_ = value;
      }
    }

    /// <summary>Field number for the "troop_no" field.</summary>
    public const int TroopNoFieldNumber = 2;
    private int troopNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TroopNo {
      get { return troopNo_; }
      set {
        troopNo_ = value;
      }
    }

    /// <summary>Field number for the "troop_id" field.</summary>
    public const int TroopIdFieldNumber = 3;
    private long troopId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TroopId {
      get { return troopId_; }
      set {
        troopId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as F2EmptyTroopAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(F2EmptyTroopAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CityId != other.CityId) return false;
      if (TroopNo != other.TroopNo) return false;
      if (TroopId != other.TroopId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CityId != 0L) hash ^= CityId.GetHashCode();
      if (TroopNo != 0) hash ^= TroopNo.GetHashCode();
      if (TroopId != 0L) hash ^= TroopId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CityId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CityId);
      }
      if (TroopNo != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TroopNo);
      }
      if (TroopId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TroopId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CityId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CityId);
      }
      if (TroopNo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TroopNo);
      }
      if (TroopId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TroopId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(F2EmptyTroopAck other) {
      if (other == null) {
        return;
      }
      if (other.CityId != 0L) {
        CityId = other.CityId;
      }
      if (other.TroopNo != 0) {
        TroopNo = other.TroopNo;
      }
      if (other.TroopId != 0L) {
        TroopId = other.TroopId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CityId = input.ReadInt64();
            break;
          }
          case 16: {
            TroopNo = input.ReadInt32();
            break;
          }
          case 24: {
            TroopId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TroopListAck : pb::IMessage<TroopListAck> {
    private static readonly pb::MessageParser<TroopListAck> _parser = new pb::MessageParser<TroopListAck>(() => new TroopListAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TroopListAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroopListAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroopListAck(TroopListAck other) : this() {
      troops_ = other.troops_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroopListAck Clone() {
      return new TroopListAck(this);
    }

    /// <summary>Field number for the "troops" field.</summary>
    public const int TroopsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.TroopNtf> _repeated_troops_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.TroopNtf.Parser);
    private readonly pbc::RepeatedField<global::Cspb.TroopNtf> troops_ = new pbc::RepeatedField<global::Cspb.TroopNtf>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.TroopNtf> Troops {
      get { return troops_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TroopListAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TroopListAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!troops_.Equals(other.troops_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= troops_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      troops_.WriteTo(output, _repeated_troops_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += troops_.CalculateSize(_repeated_troops_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TroopListAck other) {
      if (other == null) {
        return;
      }
      troops_.Add(other.troops_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            troops_.AddEntriesFrom(input, _repeated_troops_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///RSkill
  /// </summary>
  public sealed partial class SkillListAck : pb::IMessage<SkillListAck> {
    private static readonly pb::MessageParser<SkillListAck> _parser = new pb::MessageParser<SkillListAck>(() => new SkillListAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillListAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillListAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillListAck(SkillListAck other) : this() {
      skills_ = other.skills_.Clone();
      skillExp_ = other.skillExp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillListAck Clone() {
      return new SkillListAck(this);
    }

    /// <summary>Field number for the "skills" field.</summary>
    public const int SkillsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.Skill> _repeated_skills_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.Skill.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Skill> skills_ = new pbc::RepeatedField<global::Cspb.Skill>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Skill> Skills {
      get { return skills_; }
    }

    /// <summary>Field number for the "skill_exp" field.</summary>
    public const int SkillExpFieldNumber = 2;
    private int skillExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillExp {
      get { return skillExp_; }
      set {
        skillExp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillListAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillListAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!skills_.Equals(other.skills_)) return false;
      if (SkillExp != other.SkillExp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= skills_.GetHashCode();
      if (SkillExp != 0) hash ^= SkillExp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      skills_.WriteTo(output, _repeated_skills_codec);
      if (SkillExp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SkillExp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += skills_.CalculateSize(_repeated_skills_codec);
      if (SkillExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillExp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillListAck other) {
      if (other == null) {
        return;
      }
      skills_.Add(other.skills_);
      if (other.SkillExp != 0) {
        SkillExp = other.SkillExp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
          case 16: {
            SkillExp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResearchSkillAck : pb::IMessage<ResearchSkillAck> {
    private static readonly pb::MessageParser<ResearchSkillAck> _parser = new pb::MessageParser<ResearchSkillAck>(() => new ResearchSkillAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResearchSkillAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResearchSkillAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResearchSkillAck(ResearchSkillAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResearchSkillAck Clone() {
      return new ResearchSkillAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResearchSkillAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResearchSkillAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResearchSkillAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class LearnSkillAck : pb::IMessage<LearnSkillAck> {
    private static readonly pb::MessageParser<LearnSkillAck> _parser = new pb::MessageParser<LearnSkillAck>(() => new LearnSkillAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LearnSkillAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LearnSkillAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LearnSkillAck(LearnSkillAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LearnSkillAck Clone() {
      return new LearnSkillAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LearnSkillAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LearnSkillAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LearnSkillAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ForgetSkillAck : pb::IMessage<ForgetSkillAck> {
    private static readonly pb::MessageParser<ForgetSkillAck> _parser = new pb::MessageParser<ForgetSkillAck>(() => new ForgetSkillAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForgetSkillAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForgetSkillAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForgetSkillAck(ForgetSkillAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForgetSkillAck Clone() {
      return new ForgetSkillAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForgetSkillAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForgetSkillAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForgetSkillAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ResourceAck : pb::IMessage<ResourceAck> {
    private static readonly pb::MessageParser<ResourceAck> _parser = new pb::MessageParser<ResourceAck>(() => new ResourceAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResourceAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceAck(ResourceAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceAck Clone() {
      return new ResourceAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResourceAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResourceAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResourceAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class PlayerLandsAck : pb::IMessage<PlayerLandsAck> {
    private static readonly pb::MessageParser<PlayerLandsAck> _parser = new pb::MessageParser<PlayerLandsAck>(() => new PlayerLandsAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerLandsAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLandsAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLandsAck(PlayerLandsAck other) : this() {
      collectsEntity_ = other.collectsEntity_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLandsAck Clone() {
      return new PlayerLandsAck(this);
    }

    /// <summary>Field number for the "collects_entity" field.</summary>
    public const int CollectsEntityFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.TileEntityBrief> _repeated_collectsEntity_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.TileEntityBrief.Parser);
    private readonly pbc::RepeatedField<global::Cspb.TileEntityBrief> collectsEntity_ = new pbc::RepeatedField<global::Cspb.TileEntityBrief>();
    /// <summary>
    /// 收藏坐标的实体信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.TileEntityBrief> CollectsEntity {
      get { return collectsEntity_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerLandsAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerLandsAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!collectsEntity_.Equals(other.collectsEntity_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= collectsEntity_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      collectsEntity_.WriteTo(output, _repeated_collectsEntity_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += collectsEntity_.CalculateSize(_repeated_collectsEntity_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerLandsAck other) {
      if (other == null) {
        return;
      }
      collectsEntity_.Add(other.collectsEntity_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            collectsEntity_.AddEntriesFrom(input, _repeated_collectsEntity_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DefenderInfoAck : pb::IMessage<DefenderInfoAck> {
    private static readonly pb::MessageParser<DefenderInfoAck> _parser = new pb::MessageParser<DefenderInfoAck>(() => new DefenderInfoAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefenderInfoAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefenderInfoAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefenderInfoAck(DefenderInfoAck other) : this() {
      fighters_ = other.fighters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefenderInfoAck Clone() {
      return new DefenderInfoAck(this);
    }

    /// <summary>Field number for the "fighters" field.</summary>
    public const int FightersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.DFighterInfo> _repeated_fighters_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.DFighterInfo.Parser);
    private readonly pbc::RepeatedField<global::Cspb.DFighterInfo> fighters_ = new pbc::RepeatedField<global::Cspb.DFighterInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.DFighterInfo> Fighters {
      get { return fighters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DefenderInfoAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DefenderInfoAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fighters_.Equals(other.fighters_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fighters_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fighters_.WriteTo(output, _repeated_fighters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fighters_.CalculateSize(_repeated_fighters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DefenderInfoAck other) {
      if (other == null) {
        return;
      }
      fighters_.Add(other.fighters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            fighters_.AddEntriesFrom(input, _repeated_fighters_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BReportBasicAck : pb::IMessage<BReportBasicAck> {
    private static readonly pb::MessageParser<BReportBasicAck> _parser = new pb::MessageParser<BReportBasicAck>(() => new BReportBasicAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BReportBasicAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BReportBasicAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BReportBasicAck(BReportBasicAck other) : this() {
      unreadIds_ = other.unreadIds_.Clone();
      collectionsIds_ = other.collectionsIds_.Clone();
      reportIds_ = other.reportIds_.Clone();
      drillReportIds_ = other.drillReportIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BReportBasicAck Clone() {
      return new BReportBasicAck(this);
    }

    /// <summary>Field number for the "unread_ids" field.</summary>
    public const int UnreadIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_unreadIds_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> unreadIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// 未读战报Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> UnreadIds {
      get { return unreadIds_; }
    }

    /// <summary>Field number for the "collections_ids" field.</summary>
    public const int CollectionsIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_collectionsIds_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> collectionsIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// 收藏战报Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> CollectionsIds {
      get { return collectionsIds_; }
    }

    /// <summary>Field number for the "report_ids" field.</summary>
    public const int ReportIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<long> _repeated_reportIds_codec
        = pb::FieldCodec.ForInt64(26);
    private readonly pbc::RepeatedField<long> reportIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// 玩家历史战报Id,按照时间先后顺序 先 -> 后
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> ReportIds {
      get { return reportIds_; }
    }

    /// <summary>Field number for the "drill_report_ids" field.</summary>
    public const int DrillReportIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<long> _repeated_drillReportIds_codec
        = pb::FieldCodec.ForInt64(34);
    private readonly pbc::RepeatedField<long> drillReportIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// 演武战报
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> DrillReportIds {
      get { return drillReportIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BReportBasicAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BReportBasicAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!unreadIds_.Equals(other.unreadIds_)) return false;
      if(!collectionsIds_.Equals(other.collectionsIds_)) return false;
      if(!reportIds_.Equals(other.reportIds_)) return false;
      if(!drillReportIds_.Equals(other.drillReportIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= unreadIds_.GetHashCode();
      hash ^= collectionsIds_.GetHashCode();
      hash ^= reportIds_.GetHashCode();
      hash ^= drillReportIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      unreadIds_.WriteTo(output, _repeated_unreadIds_codec);
      collectionsIds_.WriteTo(output, _repeated_collectionsIds_codec);
      reportIds_.WriteTo(output, _repeated_reportIds_codec);
      drillReportIds_.WriteTo(output, _repeated_drillReportIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += unreadIds_.CalculateSize(_repeated_unreadIds_codec);
      size += collectionsIds_.CalculateSize(_repeated_collectionsIds_codec);
      size += reportIds_.CalculateSize(_repeated_reportIds_codec);
      size += drillReportIds_.CalculateSize(_repeated_drillReportIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BReportBasicAck other) {
      if (other == null) {
        return;
      }
      unreadIds_.Add(other.unreadIds_);
      collectionsIds_.Add(other.collectionsIds_);
      reportIds_.Add(other.reportIds_);
      drillReportIds_.Add(other.drillReportIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            unreadIds_.AddEntriesFrom(input, _repeated_unreadIds_codec);
            break;
          }
          case 18:
          case 16: {
            collectionsIds_.AddEntriesFrom(input, _repeated_collectionsIds_codec);
            break;
          }
          case 26:
          case 24: {
            reportIds_.AddEntriesFrom(input, _repeated_reportIds_codec);
            break;
          }
          case 34:
          case 32: {
            drillReportIds_.AddEntriesFrom(input, _repeated_drillReportIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BReportsAck : pb::IMessage<BReportsAck> {
    private static readonly pb::MessageParser<BReportsAck> _parser = new pb::MessageParser<BReportsAck>(() => new BReportsAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BReportsAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BReportsAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BReportsAck(BReportsAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BReportsAck Clone() {
      return new BReportsAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BReportsAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BReportsAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BReportsAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ReadBReportAck : pb::IMessage<ReadBReportAck> {
    private static readonly pb::MessageParser<ReadBReportAck> _parser = new pb::MessageParser<ReadBReportAck>(() => new ReadBReportAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadBReportAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadBReportAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadBReportAck(ReadBReportAck other) : this() {
      reportId_ = other.reportId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadBReportAck Clone() {
      return new ReadBReportAck(this);
    }

    /// <summary>Field number for the "report_id" field.</summary>
    public const int ReportIdFieldNumber = 1;
    private long reportId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReportId {
      get { return reportId_; }
      set {
        reportId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadBReportAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadBReportAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReportId != other.ReportId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReportId != 0L) hash ^= ReportId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReportId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ReportId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReportId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReportId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadBReportAck other) {
      if (other == null) {
        return;
      }
      if (other.ReportId != 0L) {
        ReportId = other.ReportId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReportId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BReportDetailAck : pb::IMessage<BReportDetailAck> {
    private static readonly pb::MessageParser<BReportDetailAck> _parser = new pb::MessageParser<BReportDetailAck>(() => new BReportDetailAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BReportDetailAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BReportDetailAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BReportDetailAck(BReportDetailAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BReportDetailAck Clone() {
      return new BReportDetailAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BReportDetailAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BReportDetailAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BReportDetailAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ConscriptAck : pb::IMessage<ConscriptAck> {
    private static readonly pb::MessageParser<ConscriptAck> _parser = new pb::MessageParser<ConscriptAck>(() => new ConscriptAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConscriptAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConscriptAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConscriptAck(ConscriptAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConscriptAck Clone() {
      return new ConscriptAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConscriptAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConscriptAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConscriptAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class UndoConscriptAck : pb::IMessage<UndoConscriptAck> {
    private static readonly pb::MessageParser<UndoConscriptAck> _parser = new pb::MessageParser<UndoConscriptAck>(() => new UndoConscriptAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UndoConscriptAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UndoConscriptAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UndoConscriptAck(UndoConscriptAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UndoConscriptAck Clone() {
      return new UndoConscriptAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UndoConscriptAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UndoConscriptAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UndoConscriptAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class HeartBeatAck : pb::IMessage<HeartBeatAck> {
    private static readonly pb::MessageParser<HeartBeatAck> _parser = new pb::MessageParser<HeartBeatAck>(() => new HeartBeatAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeartBeatAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatAck(HeartBeatAck other) : this() {
      clientTs_ = other.clientTs_;
      serverTs_ = other.serverTs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeartBeatAck Clone() {
      return new HeartBeatAck(this);
    }

    /// <summary>Field number for the "client_ts" field.</summary>
    public const int ClientTsFieldNumber = 1;
    private long clientTs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClientTs {
      get { return clientTs_; }
      set {
        clientTs_ = value;
      }
    }

    /// <summary>Field number for the "server_ts" field.</summary>
    public const int ServerTsFieldNumber = 2;
    private long serverTs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ServerTs {
      get { return serverTs_; }
      set {
        serverTs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeartBeatAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeartBeatAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientTs != other.ClientTs) return false;
      if (ServerTs != other.ServerTs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientTs != 0L) hash ^= ClientTs.GetHashCode();
      if (ServerTs != 0L) hash ^= ServerTs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientTs != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ClientTs);
      }
      if (ServerTs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ServerTs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientTs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClientTs);
      }
      if (ServerTs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerTs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeartBeatAck other) {
      if (other == null) {
        return;
      }
      if (other.ClientTs != 0L) {
        ClientTs = other.ClientTs;
      }
      if (other.ServerTs != 0L) {
        ServerTs = other.ServerTs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ClientTs = input.ReadInt64();
            break;
          }
          case 16: {
            ServerTs = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateNbGuideStepAck : pb::IMessage<UpdateNbGuideStepAck> {
    private static readonly pb::MessageParser<UpdateNbGuideStepAck> _parser = new pb::MessageParser<UpdateNbGuideStepAck>(() => new UpdateNbGuideStepAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateNbGuideStepAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNbGuideStepAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNbGuideStepAck(UpdateNbGuideStepAck other) : this() {
      step_ = other.step_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNbGuideStepAck Clone() {
      return new UpdateNbGuideStepAck(this);
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_step_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> step_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Step {
      get { return step_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateNbGuideStepAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateNbGuideStepAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!step_.Equals(other.step_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= step_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      step_.WriteTo(output, _repeated_step_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += step_.CalculateSize(_repeated_step_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateNbGuideStepAck other) {
      if (other == null) {
        return;
      }
      step_.Add(other.step_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            step_.AddEntriesFrom(input, _repeated_step_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FinishNbGuideAck : pb::IMessage<FinishNbGuideAck> {
    private static readonly pb::MessageParser<FinishNbGuideAck> _parser = new pb::MessageParser<FinishNbGuideAck>(() => new FinishNbGuideAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FinishNbGuideAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishNbGuideAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishNbGuideAck(FinishNbGuideAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FinishNbGuideAck Clone() {
      return new FinishNbGuideAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FinishNbGuideAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FinishNbGuideAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FinishNbGuideAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class UpdateUnfroceGuideAck : pb::IMessage<UpdateUnfroceGuideAck> {
    private static readonly pb::MessageParser<UpdateUnfroceGuideAck> _parser = new pb::MessageParser<UpdateUnfroceGuideAck>(() => new UpdateUnfroceGuideAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateUnfroceGuideAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateUnfroceGuideAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateUnfroceGuideAck(UpdateUnfroceGuideAck other) : this() {
      flags_ = other.flags_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateUnfroceGuideAck Clone() {
      return new UpdateUnfroceGuideAck(this);
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 1;
    private long flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateUnfroceGuideAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateUnfroceGuideAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Flags != other.Flags) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Flags != 0L) hash ^= Flags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Flags != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Flags);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Flags != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Flags);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateUnfroceGuideAck other) {
      if (other == null) {
        return;
      }
      if (other.Flags != 0L) {
        Flags = other.Flags;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Flags = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GmAck : pb::IMessage<GmAck> {
    private static readonly pb::MessageParser<GmAck> _parser = new pb::MessageParser<GmAck>(() => new GmAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GmAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GmAck(GmAck other) : this() {
      ret_ = other.ret_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GmAck Clone() {
      return new GmAck(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private string ret_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ret {
      get { return ret_; }
      set {
        ret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GmAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GmAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret.Length != 0) hash ^= Ret.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ret);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ret);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GmAck other) {
      if (other == null) {
        return;
      }
      if (other.Ret.Length != 0) {
        Ret = other.Ret;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Ret = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CollectBReportAck : pb::IMessage<CollectBReportAck> {
    private static readonly pb::MessageParser<CollectBReportAck> _parser = new pb::MessageParser<CollectBReportAck>(() => new CollectBReportAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CollectBReportAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectBReportAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectBReportAck(CollectBReportAck other) : this() {
      breportId_ = other.breportId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectBReportAck Clone() {
      return new CollectBReportAck(this);
    }

    /// <summary>Field number for the "breport_id" field.</summary>
    public const int BreportIdFieldNumber = 1;
    private long breportId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BreportId {
      get { return breportId_; }
      set {
        breportId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CollectBReportAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CollectBReportAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BreportId != other.BreportId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BreportId != 0L) hash ^= BreportId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BreportId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(BreportId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BreportId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BreportId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CollectBReportAck other) {
      if (other == null) {
        return;
      }
      if (other.BreportId != 0L) {
        BreportId = other.BreportId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BreportId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UndoCollectBReportAck : pb::IMessage<UndoCollectBReportAck> {
    private static readonly pb::MessageParser<UndoCollectBReportAck> _parser = new pb::MessageParser<UndoCollectBReportAck>(() => new UndoCollectBReportAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UndoCollectBReportAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UndoCollectBReportAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UndoCollectBReportAck(UndoCollectBReportAck other) : this() {
      breportId_ = other.breportId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UndoCollectBReportAck Clone() {
      return new UndoCollectBReportAck(this);
    }

    /// <summary>Field number for the "breport_id" field.</summary>
    public const int BreportIdFieldNumber = 1;
    private long breportId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BreportId {
      get { return breportId_; }
      set {
        breportId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UndoCollectBReportAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UndoCollectBReportAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BreportId != other.BreportId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BreportId != 0L) hash ^= BreportId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BreportId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(BreportId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BreportId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BreportId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UndoCollectBReportAck other) {
      if (other == null) {
        return;
      }
      if (other.BreportId != 0L) {
        BreportId = other.BreportId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BreportId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReturnTroopAck : pb::IMessage<ReturnTroopAck> {
    private static readonly pb::MessageParser<ReturnTroopAck> _parser = new pb::MessageParser<ReturnTroopAck>(() => new ReturnTroopAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReturnTroopAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReturnTroopAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReturnTroopAck(ReturnTroopAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReturnTroopAck Clone() {
      return new ReturnTroopAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReturnTroopAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReturnTroopAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReturnTroopAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class AllotAsgnAck : pb::IMessage<AllotAsgnAck> {
    private static readonly pb::MessageParser<AllotAsgnAck> _parser = new pb::MessageParser<AllotAsgnAck>(() => new AllotAsgnAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllotAsgnAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllotAsgnAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllotAsgnAck(AllotAsgnAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllotAsgnAck Clone() {
      return new AllotAsgnAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllotAsgnAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllotAsgnAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllotAsgnAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ResetAsgnAck : pb::IMessage<ResetAsgnAck> {
    private static readonly pb::MessageParser<ResetAsgnAck> _parser = new pb::MessageParser<ResetAsgnAck>(() => new ResetAsgnAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResetAsgnAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetAsgnAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetAsgnAck(ResetAsgnAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetAsgnAck Clone() {
      return new ResetAsgnAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResetAsgnAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResetAsgnAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResetAsgnAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class HeroPromoteAck : pb::IMessage<HeroPromoteAck> {
    private static readonly pb::MessageParser<HeroPromoteAck> _parser = new pb::MessageParser<HeroPromoteAck>(() => new HeroPromoteAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroPromoteAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroPromoteAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroPromoteAck(HeroPromoteAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroPromoteAck Clone() {
      return new HeroPromoteAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroPromoteAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroPromoteAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroPromoteAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class HeroAwakeAck : pb::IMessage<HeroAwakeAck> {
    private static readonly pb::MessageParser<HeroAwakeAck> _parser = new pb::MessageParser<HeroAwakeAck>(() => new HeroAwakeAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroAwakeAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroAwakeAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroAwakeAck(HeroAwakeAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroAwakeAck Clone() {
      return new HeroAwakeAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroAwakeAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroAwakeAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroAwakeAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class Heros2SkillExpAck : pb::IMessage<Heros2SkillExpAck> {
    private static readonly pb::MessageParser<Heros2SkillExpAck> _parser = new pb::MessageParser<Heros2SkillExpAck>(() => new Heros2SkillExpAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heros2SkillExpAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heros2SkillExpAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heros2SkillExpAck(Heros2SkillExpAck other) : this() {
      critHerosRid_ = other.critHerosRid_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heros2SkillExpAck Clone() {
      return new Heros2SkillExpAck(this);
    }

    /// <summary>Field number for the "critHerosRid" field.</summary>
    public const int CritHerosRidFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_critHerosRid_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> critHerosRid_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> CritHerosRid {
      get { return critHerosRid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heros2SkillExpAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heros2SkillExpAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!critHerosRid_.Equals(other.critHerosRid_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= critHerosRid_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      critHerosRid_.WriteTo(output, _repeated_critHerosRid_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += critHerosRid_.CalculateSize(_repeated_critHerosRid_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heros2SkillExpAck other) {
      if (other == null) {
        return;
      }
      critHerosRid_.Add(other.critHerosRid_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            critHerosRid_.AddEntriesFrom(input, _repeated_critHerosRid_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Hero2SkillAck : pb::IMessage<Hero2SkillAck> {
    private static readonly pb::MessageParser<Hero2SkillAck> _parser = new pb::MessageParser<Hero2SkillAck>(() => new Hero2SkillAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hero2SkillAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hero2SkillAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hero2SkillAck(Hero2SkillAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hero2SkillAck Clone() {
      return new Hero2SkillAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hero2SkillAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hero2SkillAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hero2SkillAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class HeroSkillUpgradeAck : pb::IMessage<HeroSkillUpgradeAck> {
    private static readonly pb::MessageParser<HeroSkillUpgradeAck> _parser = new pb::MessageParser<HeroSkillUpgradeAck>(() => new HeroSkillUpgradeAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroSkillUpgradeAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroSkillUpgradeAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroSkillUpgradeAck(HeroSkillUpgradeAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroSkillUpgradeAck Clone() {
      return new HeroSkillUpgradeAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroSkillUpgradeAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroSkillUpgradeAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroSkillUpgradeAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class LockHeroAck : pb::IMessage<LockHeroAck> {
    private static readonly pb::MessageParser<LockHeroAck> _parser = new pb::MessageParser<LockHeroAck>(() => new LockHeroAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LockHeroAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockHeroAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockHeroAck(LockHeroAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockHeroAck Clone() {
      return new LockHeroAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LockHeroAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LockHeroAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LockHeroAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class UnLockHeroAck : pb::IMessage<UnLockHeroAck> {
    private static readonly pb::MessageParser<UnLockHeroAck> _parser = new pb::MessageParser<UnLockHeroAck>(() => new UnLockHeroAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnLockHeroAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnLockHeroAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnLockHeroAck(UnLockHeroAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnLockHeroAck Clone() {
      return new UnLockHeroAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnLockHeroAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnLockHeroAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnLockHeroAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// 聊天帐号信息
  /// </summary>
  public sealed partial class ChatAccountNtf : pb::IMessage<ChatAccountNtf> {
    private static readonly pb::MessageParser<ChatAccountNtf> _parser = new pb::MessageParser<ChatAccountNtf>(() => new ChatAccountNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatAccountNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatAccountNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatAccountNtf(ChatAccountNtf other) : this() {
      accountName_ = other.accountName_;
      password_ = other.password_;
      serverUrl_ = other.serverUrl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatAccountNtf Clone() {
      return new ChatAccountNtf(this);
    }

    /// <summary>Field number for the "account_name" field.</summary>
    public const int AccountNameFieldNumber = 1;
    private string accountName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountName {
      get { return accountName_; }
      set {
        accountName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server_url" field.</summary>
    public const int ServerUrlFieldNumber = 3;
    private string serverUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerUrl {
      get { return serverUrl_; }
      set {
        serverUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatAccountNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatAccountNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountName != other.AccountName) return false;
      if (Password != other.Password) return false;
      if (ServerUrl != other.ServerUrl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountName.Length != 0) hash ^= AccountName.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (ServerUrl.Length != 0) hash ^= ServerUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountName);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (ServerUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ServerUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountName);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (ServerUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerUrl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatAccountNtf other) {
      if (other == null) {
        return;
      }
      if (other.AccountName.Length != 0) {
        AccountName = other.AccountName;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.ServerUrl.Length != 0) {
        ServerUrl = other.ServerUrl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AccountName = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            ServerUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 聊天频道信息
  /// </summary>
  public sealed partial class ChatRoomNtf : pb::IMessage<ChatRoomNtf> {
    private static readonly pb::MessageParser<ChatRoomNtf> _parser = new pb::MessageParser<ChatRoomNtf>(() => new ChatRoomNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatRoomNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatRoomNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatRoomNtf(ChatRoomNtf other) : this() {
      roomType_ = other.roomType_;
      roomName_ = other.roomName_;
      roomTitle_ = other.roomTitle_;
      isJoin_ = other.isJoin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatRoomNtf Clone() {
      return new ChatRoomNtf(this);
    }

    /// <summary>Field number for the "room_type" field.</summary>
    public const int RoomTypeFieldNumber = 1;
    private string roomType_ = "";
    /// <summary>
    /// open_room | members_only
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomType {
      get { return roomType_; }
      set {
        roomType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "room_name" field.</summary>
    public const int RoomNameFieldNumber = 2;
    private string roomName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "room_title" field.</summary>
    public const int RoomTitleFieldNumber = 3;
    private string roomTitle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomTitle {
      get { return roomTitle_; }
      set {
        roomTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_join" field.</summary>
    public const int IsJoinFieldNumber = 4;
    private bool isJoin_;
    /// <summary>
    /// true: 加入聊天室 | false: 退出聊天室
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsJoin {
      get { return isJoin_; }
      set {
        isJoin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatRoomNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatRoomNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomType != other.RoomType) return false;
      if (RoomName != other.RoomName) return false;
      if (RoomTitle != other.RoomTitle) return false;
      if (IsJoin != other.IsJoin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomType.Length != 0) hash ^= RoomType.GetHashCode();
      if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
      if (RoomTitle.Length != 0) hash ^= RoomTitle.GetHashCode();
      if (IsJoin != false) hash ^= IsJoin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomType);
      }
      if (RoomName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomName);
      }
      if (RoomTitle.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RoomTitle);
      }
      if (IsJoin != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsJoin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomType);
      }
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (RoomTitle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomTitle);
      }
      if (IsJoin != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatRoomNtf other) {
      if (other == null) {
        return;
      }
      if (other.RoomType.Length != 0) {
        RoomType = other.RoomType;
      }
      if (other.RoomName.Length != 0) {
        RoomName = other.RoomName;
      }
      if (other.RoomTitle.Length != 0) {
        RoomTitle = other.RoomTitle;
      }
      if (other.IsJoin != false) {
        IsJoin = other.IsJoin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomType = input.ReadString();
            break;
          }
          case 18: {
            RoomName = input.ReadString();
            break;
          }
          case 26: {
            RoomTitle = input.ReadString();
            break;
          }
          case 32: {
            IsJoin = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendMailAck : pb::IMessage<SendMailAck> {
    private static readonly pb::MessageParser<SendMailAck> _parser = new pb::MessageParser<SendMailAck>(() => new SendMailAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendMailAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendMailAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendMailAck(SendMailAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendMailAck Clone() {
      return new SendMailAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendMailAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendMailAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendMailAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GetMailListAck : pb::IMessage<GetMailListAck> {
    private static readonly pb::MessageParser<GetMailListAck> _parser = new pb::MessageParser<GetMailListAck>(() => new GetMailListAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetMailListAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMailListAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMailListAck(GetMailListAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMailListAck Clone() {
      return new GetMailListAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetMailListAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetMailListAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetMailListAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ReadMailAck : pb::IMessage<ReadMailAck> {
    private static readonly pb::MessageParser<ReadMailAck> _parser = new pb::MessageParser<ReadMailAck>(() => new ReadMailAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadMailAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadMailAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadMailAck(ReadMailAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadMailAck Clone() {
      return new ReadMailAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadMailAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadMailAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadMailAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GetAttachmentAck : pb::IMessage<GetAttachmentAck> {
    private static readonly pb::MessageParser<GetAttachmentAck> _parser = new pb::MessageParser<GetAttachmentAck>(() => new GetAttachmentAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAttachmentAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAttachmentAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAttachmentAck(GetAttachmentAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAttachmentAck Clone() {
      return new GetAttachmentAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAttachmentAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAttachmentAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAttachmentAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// 收藏邮件
  /// </summary>
  public sealed partial class StarMailAck : pb::IMessage<StarMailAck> {
    private static readonly pb::MessageParser<StarMailAck> _parser = new pb::MessageParser<StarMailAck>(() => new StarMailAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StarMailAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StarMailAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StarMailAck(StarMailAck other) : this() {
      mailId_ = other.mailId_;
      starId_ = other.starId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StarMailAck Clone() {
      return new StarMailAck(this);
    }

    /// <summary>Field number for the "mail_id" field.</summary>
    public const int MailIdFieldNumber = 1;
    private long mailId_;
    /// <summary>
    /// 被收藏的邮件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MailId {
      get { return mailId_; }
      set {
        mailId_ = value;
      }
    }

    /// <summary>Field number for the "star_id" field.</summary>
    public const int StarIdFieldNumber = 2;
    private long starId_;
    /// <summary>
    /// 收藏后新的邮件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StarId {
      get { return starId_; }
      set {
        starId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StarMailAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StarMailAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MailId != other.MailId) return false;
      if (StarId != other.StarId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MailId != 0L) hash ^= MailId.GetHashCode();
      if (StarId != 0L) hash ^= StarId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MailId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MailId);
      }
      if (StarId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(StarId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MailId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MailId);
      }
      if (StarId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StarId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StarMailAck other) {
      if (other == null) {
        return;
      }
      if (other.MailId != 0L) {
        MailId = other.MailId;
      }
      if (other.StarId != 0L) {
        StarId = other.StarId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MailId = input.ReadInt64();
            break;
          }
          case 16: {
            StarId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 取消收藏
  /// </summary>
  public sealed partial class UnstarMailAck : pb::IMessage<UnstarMailAck> {
    private static readonly pb::MessageParser<UnstarMailAck> _parser = new pb::MessageParser<UnstarMailAck>(() => new UnstarMailAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnstarMailAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnstarMailAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnstarMailAck(UnstarMailAck other) : this() {
      mailIds_ = other.mailIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnstarMailAck Clone() {
      return new UnstarMailAck(this);
    }

    /// <summary>Field number for the "mail_ids" field.</summary>
    public const int MailIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_mailIds_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> mailIds_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> MailIds {
      get { return mailIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnstarMailAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnstarMailAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mailIds_.Equals(other.mailIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mailIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mailIds_.WriteTo(output, _repeated_mailIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mailIds_.CalculateSize(_repeated_mailIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnstarMailAck other) {
      if (other == null) {
        return;
      }
      mailIds_.Add(other.mailIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            mailIds_.AddEntriesFrom(input, _repeated_mailIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteMailAck : pb::IMessage<DeleteMailAck> {
    private static readonly pb::MessageParser<DeleteMailAck> _parser = new pb::MessageParser<DeleteMailAck>(() => new DeleteMailAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteMailAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteMailAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteMailAck(DeleteMailAck other) : this() {
      mailIds_ = other.mailIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteMailAck Clone() {
      return new DeleteMailAck(this);
    }

    /// <summary>Field number for the "mail_ids" field.</summary>
    public const int MailIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_mailIds_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> mailIds_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> MailIds {
      get { return mailIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteMailAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteMailAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mailIds_.Equals(other.mailIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mailIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mailIds_.WriteTo(output, _repeated_mailIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mailIds_.CalculateSize(_repeated_mailIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteMailAck other) {
      if (other == null) {
        return;
      }
      mailIds_.Add(other.mailIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            mailIds_.AddEntriesFrom(input, _repeated_mailIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GachaAck : pb::IMessage<GachaAck> {
    private static readonly pb::MessageParser<GachaAck> _parser = new pb::MessageParser<GachaAck>(() => new GachaAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GachaAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GachaAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GachaAck(GachaAck other) : this() {
      awards_ = other.awards_.Clone();
      GachaBag = other.gachaBag_ != null ? other.GachaBag.Clone() : null;
      PriceId = other.priceId_ != null ? other.PriceId.Clone() : null;
      err_ = other.err_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GachaAck Clone() {
      return new GachaAck(this);
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.GachaAward> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.GachaAward.Parser);
    private readonly pbc::RepeatedField<global::Cspb.GachaAward> awards_ = new pbc::RepeatedField<global::Cspb.GachaAward>();
    /// <summary>
    /// 抽到的奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.GachaAward> Awards {
      get { return awards_; }
    }

    /// <summary>Field number for the "gacha_bag" field.</summary>
    public const int GachaBagFieldNumber = 2;
    private global::Cspb.GachaBag gachaBag_;
    /// <summary>
    /// 上次抽卡的包
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.GachaBag GachaBag {
      get { return gachaBag_; }
      set {
        gachaBag_ = value;
      }
    }

    /// <summary>Field number for the "price_id" field.</summary>
    public const int PriceIdFieldNumber = 3;
    private global::Cspb.GachaBag priceId_;
    /// <summary>
    /// 上次售价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.GachaBag PriceId {
      get { return priceId_; }
      set {
        priceId_ = value;
      }
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 4;
    private global::Cspb.ERR_CODE err_ = 0;
    /// <summary>
    /// 错误信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ERR_CODE Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GachaAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GachaAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!awards_.Equals(other.awards_)) return false;
      if (!object.Equals(GachaBag, other.GachaBag)) return false;
      if (!object.Equals(PriceId, other.PriceId)) return false;
      if (Err != other.Err) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= awards_.GetHashCode();
      if (gachaBag_ != null) hash ^= GachaBag.GetHashCode();
      if (priceId_ != null) hash ^= PriceId.GetHashCode();
      if (Err != 0) hash ^= Err.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      awards_.WriteTo(output, _repeated_awards_codec);
      if (gachaBag_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GachaBag);
      }
      if (priceId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PriceId);
      }
      if (Err != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Err);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += awards_.CalculateSize(_repeated_awards_codec);
      if (gachaBag_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GachaBag);
      }
      if (priceId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PriceId);
      }
      if (Err != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Err);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GachaAck other) {
      if (other == null) {
        return;
      }
      awards_.Add(other.awards_);
      if (other.gachaBag_ != null) {
        if (gachaBag_ == null) {
          gachaBag_ = new global::Cspb.GachaBag();
        }
        GachaBag.MergeFrom(other.GachaBag);
      }
      if (other.priceId_ != null) {
        if (priceId_ == null) {
          priceId_ = new global::Cspb.GachaBag();
        }
        PriceId.MergeFrom(other.PriceId);
      }
      if (other.Err != 0) {
        Err = other.Err;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
          case 18: {
            if (gachaBag_ == null) {
              gachaBag_ = new global::Cspb.GachaBag();
            }
            input.ReadMessage(gachaBag_);
            break;
          }
          case 26: {
            if (priceId_ == null) {
              priceId_ = new global::Cspb.GachaBag();
            }
            input.ReadMessage(priceId_);
            break;
          }
          case 32: {
            err_ = (global::Cspb.ERR_CODE) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GachaListAck : pb::IMessage<GachaListAck> {
    private static readonly pb::MessageParser<GachaListAck> _parser = new pb::MessageParser<GachaListAck>(() => new GachaListAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GachaListAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GachaListAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GachaListAck(GachaListAck other) : this() {
      gachaBags_ = other.gachaBags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GachaListAck Clone() {
      return new GachaListAck(this);
    }

    /// <summary>Field number for the "gacha_bags" field.</summary>
    public const int GachaBagsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.GachaBag> _repeated_gachaBags_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.GachaBag.Parser);
    private readonly pbc::RepeatedField<global::Cspb.GachaBag> gachaBags_ = new pbc::RepeatedField<global::Cspb.GachaBag>();
    /// <summary>
    ///卡包集
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.GachaBag> GachaBags {
      get { return gachaBags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GachaListAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GachaListAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gachaBags_.Equals(other.gachaBags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gachaBags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      gachaBags_.WriteTo(output, _repeated_gachaBags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gachaBags_.CalculateSize(_repeated_gachaBags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GachaListAck other) {
      if (other == null) {
        return;
      }
      gachaBags_.Add(other.gachaBags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            gachaBags_.AddEntriesFrom(input, _repeated_gachaBags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TaskListAck : pb::IMessage<TaskListAck> {
    private static readonly pb::MessageParser<TaskListAck> _parser = new pb::MessageParser<TaskListAck>(() => new TaskListAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskListAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskListAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskListAck(TaskListAck other) : this() {
      tasks_ = other.tasks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskListAck Clone() {
      return new TaskListAck(this);
    }

    /// <summary>Field number for the "tasks" field.</summary>
    public const int TasksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.Task> _repeated_tasks_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.Task.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Task> tasks_ = new pbc::RepeatedField<global::Cspb.Task>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Task> Tasks {
      get { return tasks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskListAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskListAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tasks_.Equals(other.tasks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tasks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tasks_.WriteTo(output, _repeated_tasks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tasks_.CalculateSize(_repeated_tasks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskListAck other) {
      if (other == null) {
        return;
      }
      tasks_.Add(other.tasks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tasks_.AddEntriesFrom(input, _repeated_tasks_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 市井
  /// </summary>
  public sealed partial class MarketsAck : pb::IMessage<MarketsAck> {
    private static readonly pb::MessageParser<MarketsAck> _parser = new pb::MessageParser<MarketsAck>(() => new MarketsAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketsAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketsAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketsAck(MarketsAck other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketsAck Clone() {
      return new MarketsAck(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 商店id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketsAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketsAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketsAck other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MarketBuyTimesAck : pb::IMessage<MarketBuyTimesAck> {
    private static readonly pb::MessageParser<MarketBuyTimesAck> _parser = new pb::MessageParser<MarketBuyTimesAck>(() => new MarketBuyTimesAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketBuyTimesAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketBuyTimesAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketBuyTimesAck(MarketBuyTimesAck other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketBuyTimesAck Clone() {
      return new MarketBuyTimesAck(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 商店id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketBuyTimesAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketBuyTimesAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketBuyTimesAck other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MarketBuyItemAck : pb::IMessage<MarketBuyItemAck> {
    private static readonly pb::MessageParser<MarketBuyItemAck> _parser = new pb::MessageParser<MarketBuyItemAck>(() => new MarketBuyItemAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketBuyItemAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketBuyItemAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketBuyItemAck(MarketBuyItemAck other) : this() {
      id_ = other.id_;
      idx_ = other.idx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketBuyItemAck Clone() {
      return new MarketBuyItemAck(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 商店id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "idx" field.</summary>
    public const int IdxFieldNumber = 2;
    private int idx_;
    /// <summary>
    /// 物品index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Idx {
      get { return idx_; }
      set {
        idx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketBuyItemAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketBuyItemAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Idx != other.Idx) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Idx != 0) hash ^= Idx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Idx != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Idx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Idx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Idx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketBuyItemAck other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Idx != 0) {
        Idx = other.Idx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Idx = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FilterPosAck : pb::IMessage<FilterPosAck> {
    private static readonly pb::MessageParser<FilterPosAck> _parser = new pb::MessageParser<FilterPosAck>(() => new FilterPosAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FilterPosAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterPosAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterPosAck(FilterPosAck other) : this() {
      isFound_ = other.isFound_;
      pos_ = other.pos_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterPosAck Clone() {
      return new FilterPosAck(this);
    }

    /// <summary>Field number for the "is_found" field.</summary>
    public const int IsFoundFieldNumber = 1;
    private bool isFound_;
    /// <summary>
    /// 是否找到
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFound {
      get { return isFound_; }
      set {
        isFound_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private int pos_;
    /// <summary>
    /// 找到的坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FilterPosAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FilterPosAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFound != other.IsFound) return false;
      if (Pos != other.Pos) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFound != false) hash ^= IsFound.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFound != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsFound);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFound != false) {
        size += 1 + 1;
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FilterPosAck other) {
      if (other == null) {
        return;
      }
      if (other.IsFound != false) {
        IsFound = other.IsFound;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsFound = input.ReadBool();
            break;
          }
          case 16: {
            Pos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IsNearbyAck : pb::IMessage<IsNearbyAck> {
    private static readonly pb::MessageParser<IsNearbyAck> _parser = new pb::MessageParser<IsNearbyAck>(() => new IsNearbyAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IsNearbyAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsNearbyAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsNearbyAck(IsNearbyAck other) : this() {
      isNearby_ = other.isNearby_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsNearbyAck Clone() {
      return new IsNearbyAck(this);
    }

    /// <summary>Field number for the "is_nearby" field.</summary>
    public const int IsNearbyFieldNumber = 1;
    private bool isNearby_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNearby {
      get { return isNearby_; }
      set {
        isNearby_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IsNearbyAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IsNearbyAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsNearby != other.IsNearby) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsNearby != false) hash ^= IsNearby.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsNearby != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsNearby);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsNearby != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IsNearbyAck other) {
      if (other == null) {
        return;
      }
      if (other.IsNearby != false) {
        IsNearby = other.IsNearby;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsNearby = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 一天所有税收记录的返回值（一一对应）
  /// </summary>
  public sealed partial class GetAllTaxAck : pb::IMessage<GetAllTaxAck> {
    private static readonly pb::MessageParser<GetAllTaxAck> _parser = new pb::MessageParser<GetAllTaxAck>(() => new GetAllTaxAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAllTaxAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllTaxAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllTaxAck(GetAllTaxAck other) : this() {
      taxValue_ = other.taxValue_.Clone();
      taxTime_ = other.taxTime_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllTaxAck Clone() {
      return new GetAllTaxAck(this);
    }

    /// <summary>Field number for the "taxValue" field.</summary>
    public const int TaxValueFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_taxValue_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> taxValue_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 一天税收值的记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TaxValue {
      get { return taxValue_; }
    }

    /// <summary>Field number for the "taxTime" field.</summary>
    public const int TaxTimeFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_taxTime_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> taxTime_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// 一天税收时间的记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> TaxTime {
      get { return taxTime_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAllTaxAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAllTaxAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!taxValue_.Equals(other.taxValue_)) return false;
      if(!taxTime_.Equals(other.taxTime_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= taxValue_.GetHashCode();
      hash ^= taxTime_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      taxValue_.WriteTo(output, _repeated_taxValue_codec);
      taxTime_.WriteTo(output, _repeated_taxTime_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += taxValue_.CalculateSize(_repeated_taxValue_codec);
      size += taxTime_.CalculateSize(_repeated_taxTime_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAllTaxAck other) {
      if (other == null) {
        return;
      }
      taxValue_.Add(other.taxValue_);
      taxTime_.Add(other.taxTime_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            taxValue_.AddEntriesFrom(input, _repeated_taxValue_codec);
            break;
          }
          case 18:
          case 16: {
            taxTime_.AddEntriesFrom(input, _repeated_taxTime_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuildCityAck : pb::IMessage<BuildCityAck> {
    private static readonly pb::MessageParser<BuildCityAck> _parser = new pb::MessageParser<BuildCityAck>(() => new BuildCityAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildCityAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildCityAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildCityAck(BuildCityAck other) : this() {
      cityId_ = other.cityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildCityAck Clone() {
      return new BuildCityAck(this);
    }

    /// <summary>Field number for the "city_id" field.</summary>
    public const int CityIdFieldNumber = 1;
    private long cityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CityId {
      get { return cityId_; }
      set {
        cityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildCityAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildCityAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CityId != other.CityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CityId != 0L) hash ^= CityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CityId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CityId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildCityAck other) {
      if (other == null) {
        return;
      }
      if (other.CityId != 0L) {
        CityId = other.CityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CityId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 交易信息返回值
  /// </summary>
  public sealed partial class GetDealInfoAck : pb::IMessage<GetDealInfoAck> {
    private static readonly pb::MessageParser<GetDealInfoAck> _parser = new pb::MessageParser<GetDealInfoAck>(() => new GetDealInfoAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDealInfoAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDealInfoAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDealInfoAck(GetDealInfoAck other) : this() {
      rateLeft_ = other.rateLeft_;
      rateRight_ = other.rateRight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDealInfoAck Clone() {
      return new GetDealInfoAck(this);
    }

    /// <summary>Field number for the "RateLeft" field.</summary>
    public const int RateLeftFieldNumber = 1;
    private int rateLeft_;
    /// <summary>
    /// 比例的左边
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RateLeft {
      get { return rateLeft_; }
      set {
        rateLeft_ = value;
      }
    }

    /// <summary>Field number for the "RateRight" field.</summary>
    public const int RateRightFieldNumber = 2;
    private int rateRight_;
    /// <summary>
    /// 比例的右边
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RateRight {
      get { return rateRight_; }
      set {
        rateRight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDealInfoAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDealInfoAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RateLeft != other.RateLeft) return false;
      if (RateRight != other.RateRight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RateLeft != 0) hash ^= RateLeft.GetHashCode();
      if (RateRight != 0) hash ^= RateRight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RateLeft != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RateLeft);
      }
      if (RateRight != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RateRight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RateLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RateLeft);
      }
      if (RateRight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RateRight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDealInfoAck other) {
      if (other == null) {
        return;
      }
      if (other.RateLeft != 0) {
        RateLeft = other.RateLeft;
      }
      if (other.RateRight != 0) {
        RateRight = other.RateRight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RateLeft = input.ReadInt32();
            break;
          }
          case 16: {
            RateRight = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 头像
  /// </summary>
  public sealed partial class ChangeAvatarAck : pb::IMessage<ChangeAvatarAck> {
    private static readonly pb::MessageParser<ChangeAvatarAck> _parser = new pb::MessageParser<ChangeAvatarAck>(() => new ChangeAvatarAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeAvatarAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeAvatarAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeAvatarAck(ChangeAvatarAck other) : this() {
      avatarId_ = other.avatarId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeAvatarAck Clone() {
      return new ChangeAvatarAck(this);
    }

    /// <summary>Field number for the "avatar_id" field.</summary>
    public const int AvatarIdFieldNumber = 1;
    private int avatarId_;
    /// <summary>
    /// 头像id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvatarId {
      get { return avatarId_; }
      set {
        avatarId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeAvatarAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeAvatarAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AvatarId != other.AvatarId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AvatarId != 0) hash ^= AvatarId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AvatarId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AvatarId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AvatarId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvatarId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeAvatarAck other) {
      if (other == null) {
        return;
      }
      if (other.AvatarId != 0) {
        AvatarId = other.AvatarId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AvatarId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 简介
  /// </summary>
  public sealed partial class ChangeIntroAck : pb::IMessage<ChangeIntroAck> {
    private static readonly pb::MessageParser<ChangeIntroAck> _parser = new pb::MessageParser<ChangeIntroAck>(() => new ChangeIntroAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeIntroAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeIntroAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeIntroAck(ChangeIntroAck other) : this() {
      intro_ = other.intro_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeIntroAck Clone() {
      return new ChangeIntroAck(this);
    }

    /// <summary>Field number for the "intro" field.</summary>
    public const int IntroFieldNumber = 1;
    private string intro_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Intro {
      get { return intro_; }
      set {
        intro_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeIntroAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeIntroAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Intro != other.Intro) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Intro.Length != 0) hash ^= Intro.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Intro.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Intro);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Intro.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Intro);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeIntroAck other) {
      if (other == null) {
        return;
      }
      if (other.Intro.Length != 0) {
        Intro = other.Intro;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Intro = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MCityListAck : pb::IMessage<MCityListAck> {
    private static readonly pb::MessageParser<MCityListAck> _parser = new pb::MessageParser<MCityListAck>(() => new MCityListAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MCityListAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MCityListAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MCityListAck(MCityListAck other) : this() {
      cities_ = other.cities_.Clone();
      fortresses_ = other.fortresses_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MCityListAck Clone() {
      return new MCityListAck(this);
    }

    /// <summary>Field number for the "cities" field.</summary>
    public const int CitiesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.MCityNtf> _repeated_cities_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.MCityNtf.Parser);
    private readonly pbc::RepeatedField<global::Cspb.MCityNtf> cities_ = new pbc::RepeatedField<global::Cspb.MCityNtf>();
    /// <summary>
    ///主城/分城
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.MCityNtf> Cities {
      get { return cities_; }
    }

    /// <summary>Field number for the "fortresses" field.</summary>
    public const int FortressesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cspb.MFortressNtf> _repeated_fortresses_codec
        = pb::FieldCodec.ForMessage(18, global::Cspb.MFortressNtf.Parser);
    private readonly pbc::RepeatedField<global::Cspb.MFortressNtf> fortresses_ = new pbc::RepeatedField<global::Cspb.MFortressNtf>();
    /// <summary>
    ///要塞
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.MFortressNtf> Fortresses {
      get { return fortresses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MCityListAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MCityListAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cities_.Equals(other.cities_)) return false;
      if(!fortresses_.Equals(other.fortresses_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cities_.GetHashCode();
      hash ^= fortresses_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cities_.WriteTo(output, _repeated_cities_codec);
      fortresses_.WriteTo(output, _repeated_fortresses_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cities_.CalculateSize(_repeated_cities_codec);
      size += fortresses_.CalculateSize(_repeated_fortresses_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MCityListAck other) {
      if (other == null) {
        return;
      }
      cities_.Add(other.cities_);
      fortresses_.Add(other.fortresses_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cities_.AddEntriesFrom(input, _repeated_cities_codec);
            break;
          }
          case 18: {
            fortresses_.AddEntriesFrom(input, _repeated_fortresses_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConflictListAck : pb::IMessage<ConflictListAck> {
    private static readonly pb::MessageParser<ConflictListAck> _parser = new pb::MessageParser<ConflictListAck>(() => new ConflictListAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConflictListAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConflictListAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConflictListAck(ConflictListAck other) : this() {
      conflicts_ = other.conflicts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConflictListAck Clone() {
      return new ConflictListAck(this);
    }

    /// <summary>Field number for the "conflicts" field.</summary>
    public const int ConflictsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.Conflict> _repeated_conflicts_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.Conflict.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Conflict> conflicts_ = new pbc::RepeatedField<global::Cspb.Conflict>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Conflict> Conflicts {
      get { return conflicts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConflictListAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConflictListAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!conflicts_.Equals(other.conflicts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= conflicts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      conflicts_.WriteTo(output, _repeated_conflicts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += conflicts_.CalculateSize(_repeated_conflicts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConflictListAck other) {
      if (other == null) {
        return;
      }
      conflicts_.Add(other.conflicts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            conflicts_.AddEntriesFrom(input, _repeated_conflicts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NCityListAck : pb::IMessage<NCityListAck> {
    private static readonly pb::MessageParser<NCityListAck> _parser = new pb::MessageParser<NCityListAck>(() => new NCityListAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NCityListAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NCityListAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NCityListAck(NCityListAck other) : this() {
      cities_ = other.cities_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NCityListAck Clone() {
      return new NCityListAck(this);
    }

    /// <summary>Field number for the "cities" field.</summary>
    public const int CitiesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.NpcCityBrief> _repeated_cities_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.NpcCityBrief.Parser);
    private readonly pbc::RepeatedField<global::Cspb.NpcCityBrief> cities_ = new pbc::RepeatedField<global::Cspb.NpcCityBrief>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.NpcCityBrief> Cities {
      get { return cities_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NCityListAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NCityListAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cities_.Equals(other.cities_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cities_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cities_.WriteTo(output, _repeated_cities_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cities_.CalculateSize(_repeated_cities_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NCityListAck other) {
      if (other == null) {
        return;
      }
      cities_.Add(other.cities_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cities_.AddEntriesFrom(input, _repeated_cities_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 查找联盟
  /// </summary>
  public sealed partial class FindUnionAck : pb::IMessage<FindUnionAck> {
    private static readonly pb::MessageParser<FindUnionAck> _parser = new pb::MessageParser<FindUnionAck>(() => new FindUnionAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FindUnionAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindUnionAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindUnionAck(FindUnionAck other) : this() {
      Union = other.union_ != null ? other.Union.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindUnionAck Clone() {
      return new FindUnionAck(this);
    }

    /// <summary>Field number for the "union" field.</summary>
    public const int UnionFieldNumber = 1;
    private global::Cspb.Union union_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.Union Union {
      get { return union_; }
      set {
        union_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FindUnionAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FindUnionAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Union, other.Union)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (union_ != null) hash ^= Union.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (union_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Union);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (union_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Union);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FindUnionAck other) {
      if (other == null) {
        return;
      }
      if (other.union_ != null) {
        if (union_ == null) {
          union_ = new global::Cspb.Union();
        }
        Union.MergeFrom(other.Union);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (union_ == null) {
              union_ = new global::Cspb.Union();
            }
            input.ReadMessage(union_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 设置联盟公告
  /// </summary>
  public sealed partial class SetUnionDescAck : pb::IMessage<SetUnionDescAck> {
    private static readonly pb::MessageParser<SetUnionDescAck> _parser = new pb::MessageParser<SetUnionDescAck>(() => new SetUnionDescAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetUnionDescAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetUnionDescAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetUnionDescAck(SetUnionDescAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetUnionDescAck Clone() {
      return new SetUnionDescAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetUnionDescAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetUnionDescAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetUnionDescAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// 邀请玩家加入联盟
  /// </summary>
  public sealed partial class InviteJoinUnionAck : pb::IMessage<InviteJoinUnionAck> {
    private static readonly pb::MessageParser<InviteJoinUnionAck> _parser = new pb::MessageParser<InviteJoinUnionAck>(() => new InviteJoinUnionAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InviteJoinUnionAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InviteJoinUnionAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InviteJoinUnionAck(InviteJoinUnionAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InviteJoinUnionAck Clone() {
      return new InviteJoinUnionAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InviteJoinUnionAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InviteJoinUnionAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InviteJoinUnionAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// 移出联盟玩家
  /// </summary>
  public sealed partial class RemoveUnionMemberAck : pb::IMessage<RemoveUnionMemberAck> {
    private static readonly pb::MessageParser<RemoveUnionMemberAck> _parser = new pb::MessageParser<RemoveUnionMemberAck>(() => new RemoveUnionMemberAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveUnionMemberAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveUnionMemberAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveUnionMemberAck(RemoveUnionMemberAck other) : this() {
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveUnionMemberAck Clone() {
      return new RemoveUnionMemberAck(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    /// <summary>
    /// 被移出玩家的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveUnionMemberAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveUnionMemberAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveUnionMemberAck other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 解散联盟
  /// </summary>
  public sealed partial class DissolveUnionAck : pb::IMessage<DissolveUnionAck> {
    private static readonly pb::MessageParser<DissolveUnionAck> _parser = new pb::MessageParser<DissolveUnionAck>(() => new DissolveUnionAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DissolveUnionAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DissolveUnionAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DissolveUnionAck(DissolveUnionAck other) : this() {
      Union = other.union_ != null ? other.Union.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DissolveUnionAck Clone() {
      return new DissolveUnionAck(this);
    }

    /// <summary>Field number for the "union" field.</summary>
    public const int UnionFieldNumber = 1;
    private global::Cspb.PlayerUnion union_;
    /// <summary>
    /// 解散联盟的盟主PUnion
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.PlayerUnion Union {
      get { return union_; }
      set {
        union_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DissolveUnionAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DissolveUnionAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Union, other.Union)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (union_ != null) hash ^= Union.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (union_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Union);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (union_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Union);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DissolveUnionAck other) {
      if (other == null) {
        return;
      }
      if (other.union_ != null) {
        if (union_ == null) {
          union_ = new global::Cspb.PlayerUnion();
        }
        Union.MergeFrom(other.Union);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (union_ == null) {
              union_ = new global::Cspb.PlayerUnion();
            }
            input.ReadMessage(union_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 拉取已经设置的推送事件类型
  /// </summary>
  public sealed partial class PushEventListAck : pb::IMessage<PushEventListAck> {
    private static readonly pb::MessageParser<PushEventListAck> _parser = new pb::MessageParser<PushEventListAck>(() => new PushEventListAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PushEventListAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushEventListAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushEventListAck(PushEventListAck other) : this() {
      events_ = other.events_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PushEventListAck Clone() {
      return new PushEventListAck(this);
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_events_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> events_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Events {
      get { return events_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PushEventListAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PushEventListAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!events_.Equals(other.events_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= events_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      events_.WriteTo(output, _repeated_events_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += events_.CalculateSize(_repeated_events_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PushEventListAck other) {
      if (other == null) {
        return;
      }
      events_.Add(other.events_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 更新推送事件类型
  /// </summary>
  public sealed partial class UpdatePushEventsAck : pb::IMessage<UpdatePushEventsAck> {
    private static readonly pb::MessageParser<UpdatePushEventsAck> _parser = new pb::MessageParser<UpdatePushEventsAck>(() => new UpdatePushEventsAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatePushEventsAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePushEventsAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePushEventsAck(UpdatePushEventsAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePushEventsAck Clone() {
      return new UpdatePushEventsAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatePushEventsAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatePushEventsAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatePushEventsAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// 玩家演武进度数据
  /// </summary>
  public sealed partial class DrillAck : pb::IMessage<DrillAck> {
    private static readonly pb::MessageParser<DrillAck> _parser = new pb::MessageParser<DrillAck>(() => new DrillAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrillAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrillAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrillAck(DrillAck other) : this() {
      currentId_ = other.currentId_;
      minId_ = other.minId_;
      maxId_ = other.maxId_;
      heros_ = other.heros_.Clone();
      isSkip_ = other.isSkip_;
      attackCount_ = other.attackCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrillAck Clone() {
      return new DrillAck(this);
    }

    /// <summary>Field number for the "current_id" field.</summary>
    public const int CurrentIdFieldNumber = 1;
    private int currentId_;
    /// <summary>
    /// 当前关卡ID; 1 ~ 1000 为教学关卡ID; 1001以上为日常关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentId {
      get { return currentId_; }
      set {
        currentId_ = value;
      }
    }

    /// <summary>Field number for the "min_id" field.</summary>
    public const int MinIdFieldNumber = 2;
    private int minId_;
    /// <summary>
    /// 可选的最小关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinId {
      get { return minId_; }
      set {
        minId_ = value;
      }
    }

    /// <summary>Field number for the "max_id" field.</summary>
    public const int MaxIdFieldNumber = 3;
    private int maxId_;
    /// <summary>
    /// 可选的最大关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxId {
      get { return maxId_; }
      set {
        maxId_ = value;
      }
    }

    /// <summary>Field number for the "heros" field.</summary>
    public const int HerosFieldNumber = 4;
    private static readonly pb::FieldCodec<long> _repeated_heros_codec
        = pb::FieldCodec.ForInt64(34);
    private readonly pbc::RepeatedField<long> heros_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// 攻击部队英雄
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Heros {
      get { return heros_; }
    }

    /// <summary>Field number for the "is_skip" field.</summary>
    public const int IsSkipFieldNumber = 5;
    private bool isSkip_;
    /// <summary>
    /// 是否跳过动画，仅对日常演武有效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkip {
      get { return isSkip_; }
      set {
        isSkip_ = value;
      }
    }

    /// <summary>Field number for the "attack_count" field.</summary>
    public const int AttackCountFieldNumber = 6;
    private int attackCount_;
    /// <summary>
    /// 当前挑战次数：即，攻打当前关卡内所有土地的次数和，直到通关为止
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackCount {
      get { return attackCount_; }
      set {
        attackCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrillAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrillAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentId != other.CurrentId) return false;
      if (MinId != other.MinId) return false;
      if (MaxId != other.MaxId) return false;
      if(!heros_.Equals(other.heros_)) return false;
      if (IsSkip != other.IsSkip) return false;
      if (AttackCount != other.AttackCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentId != 0) hash ^= CurrentId.GetHashCode();
      if (MinId != 0) hash ^= MinId.GetHashCode();
      if (MaxId != 0) hash ^= MaxId.GetHashCode();
      hash ^= heros_.GetHashCode();
      if (IsSkip != false) hash ^= IsSkip.GetHashCode();
      if (AttackCount != 0) hash ^= AttackCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentId);
      }
      if (MinId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MinId);
      }
      if (MaxId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxId);
      }
      heros_.WriteTo(output, _repeated_heros_codec);
      if (IsSkip != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsSkip);
      }
      if (AttackCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AttackCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentId);
      }
      if (MinId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinId);
      }
      if (MaxId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxId);
      }
      size += heros_.CalculateSize(_repeated_heros_codec);
      if (IsSkip != false) {
        size += 1 + 1;
      }
      if (AttackCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrillAck other) {
      if (other == null) {
        return;
      }
      if (other.CurrentId != 0) {
        CurrentId = other.CurrentId;
      }
      if (other.MinId != 0) {
        MinId = other.MinId;
      }
      if (other.MaxId != 0) {
        MaxId = other.MaxId;
      }
      heros_.Add(other.heros_);
      if (other.IsSkip != false) {
        IsSkip = other.IsSkip;
      }
      if (other.AttackCount != 0) {
        AttackCount = other.AttackCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurrentId = input.ReadInt32();
            break;
          }
          case 16: {
            MinId = input.ReadInt32();
            break;
          }
          case 24: {
            MaxId = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            heros_.AddEntriesFrom(input, _repeated_heros_codec);
            break;
          }
          case 40: {
            IsSkip = input.ReadBool();
            break;
          }
          case 48: {
            AttackCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 演武关卡数据
  /// </summary>
  public sealed partial class DrillIDAck : pb::IMessage<DrillIDAck> {
    private static readonly pb::MessageParser<DrillIDAck> _parser = new pb::MessageParser<DrillIDAck>(() => new DrillIDAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrillIDAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrillIDAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrillIDAck(DrillIDAck other) : this() {
      drillId_ = other.drillId_;
      occupiedTiles_ = other.occupiedTiles_.Clone();
      finishTime_ = other.finishTime_;
      expence_ = other.expence_;
      tiles_ = other.tiles_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrillIDAck Clone() {
      return new DrillIDAck(this);
    }

    /// <summary>Field number for the "drill_id" field.</summary>
    public const int DrillIdFieldNumber = 1;
    private int drillId_;
    /// <summary>
    /// 关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DrillId {
      get { return drillId_; }
      set {
        drillId_ = value;
      }
    }

    /// <summary>Field number for the "occupied_tiles" field.</summary>
    public const int OccupiedTilesFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_occupiedTiles_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> occupiedTiles_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 已经占领的土地坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> OccupiedTiles {
      get { return occupiedTiles_; }
    }

    /// <summary>Field number for the "finish_time" field.</summary>
    public const int FinishTimeFieldNumber = 3;
    private long finishTime_;
    /// <summary>
    /// 通关时间，0表示当前关卡没通关    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FinishTime {
      get { return finishTime_; }
      set {
        finishTime_ = value;
      }
    }

    /// <summary>Field number for the "expence" field.</summary>
    public const int ExpenceFieldNumber = 4;
    private int expence_;
    /// <summary>
    /// 攻打关卡费用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Expence {
      get { return expence_; }
      set {
        expence_ = value;
      }
    }

    /// <summary>Field number for the "tiles" field.</summary>
    public const int TilesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Cspb.DrillTile> _repeated_tiles_codec
        = pb::FieldCodec.ForMessage(42, global::Cspb.DrillTile.Parser);
    private readonly pbc::RepeatedField<global::Cspb.DrillTile> tiles_ = new pbc::RepeatedField<global::Cspb.DrillTile>();
    /// <summary>
    /// 关卡内土地信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.DrillTile> Tiles {
      get { return tiles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrillIDAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrillIDAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DrillId != other.DrillId) return false;
      if(!occupiedTiles_.Equals(other.occupiedTiles_)) return false;
      if (FinishTime != other.FinishTime) return false;
      if (Expence != other.Expence) return false;
      if(!tiles_.Equals(other.tiles_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DrillId != 0) hash ^= DrillId.GetHashCode();
      hash ^= occupiedTiles_.GetHashCode();
      if (FinishTime != 0L) hash ^= FinishTime.GetHashCode();
      if (Expence != 0) hash ^= Expence.GetHashCode();
      hash ^= tiles_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DrillId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DrillId);
      }
      occupiedTiles_.WriteTo(output, _repeated_occupiedTiles_codec);
      if (FinishTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(FinishTime);
      }
      if (Expence != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Expence);
      }
      tiles_.WriteTo(output, _repeated_tiles_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DrillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrillId);
      }
      size += occupiedTiles_.CalculateSize(_repeated_occupiedTiles_codec);
      if (FinishTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FinishTime);
      }
      if (Expence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Expence);
      }
      size += tiles_.CalculateSize(_repeated_tiles_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrillIDAck other) {
      if (other == null) {
        return;
      }
      if (other.DrillId != 0) {
        DrillId = other.DrillId;
      }
      occupiedTiles_.Add(other.occupiedTiles_);
      if (other.FinishTime != 0L) {
        FinishTime = other.FinishTime;
      }
      if (other.Expence != 0) {
        Expence = other.Expence;
      }
      tiles_.Add(other.tiles_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DrillId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            occupiedTiles_.AddEntriesFrom(input, _repeated_occupiedTiles_codec);
            break;
          }
          case 24: {
            FinishTime = input.ReadInt64();
            break;
          }
          case 32: {
            Expence = input.ReadInt32();
            break;
          }
          case 42: {
            tiles_.AddEntriesFrom(input, _repeated_tiles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DrillSkipAnimationAck : pb::IMessage<DrillSkipAnimationAck> {
    private static readonly pb::MessageParser<DrillSkipAnimationAck> _parser = new pb::MessageParser<DrillSkipAnimationAck>(() => new DrillSkipAnimationAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrillSkipAnimationAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrillSkipAnimationAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrillSkipAnimationAck(DrillSkipAnimationAck other) : this() {
      isSkip_ = other.isSkip_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrillSkipAnimationAck Clone() {
      return new DrillSkipAnimationAck(this);
    }

    /// <summary>Field number for the "is_skip" field.</summary>
    public const int IsSkipFieldNumber = 1;
    private bool isSkip_;
    /// <summary>
    /// 是否跳过演武动画
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSkip {
      get { return isSkip_; }
      set {
        isSkip_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrillSkipAnimationAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrillSkipAnimationAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsSkip != other.IsSkip) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsSkip != false) hash ^= IsSkip.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsSkip != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsSkip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsSkip != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrillSkipAnimationAck other) {
      if (other == null) {
        return;
      }
      if (other.IsSkip != false) {
        IsSkip = other.IsSkip;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsSkip = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DrillStatisticAck : pb::IMessage<DrillStatisticAck> {
    private static readonly pb::MessageParser<DrillStatisticAck> _parser = new pb::MessageParser<DrillStatisticAck>(() => new DrillStatisticAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrillStatisticAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrillStatisticAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrillStatisticAck(DrillStatisticAck other) : this() {
      defeatCount_ = other.defeatCount_;
      passCount_ = other.passCount_.Clone();
      npcTroops_ = other.npcTroops_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrillStatisticAck Clone() {
      return new DrillStatisticAck(this);
    }

    /// <summary>Field number for the "defeat_count" field.</summary>
    public const int DefeatCountFieldNumber = 1;
    private int defeatCount_;
    /// <summary>
    /// 战胜敌方部队次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefeatCount {
      get { return defeatCount_; }
      set {
        defeatCount_ = value;
      }
    }

    /// <summary>Field number for the "pass_count" field.</summary>
    public const int PassCountFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cspb.DrillPassCount> _repeated_passCount_codec
        = pb::FieldCodec.ForMessage(18, global::Cspb.DrillPassCount.Parser);
    private readonly pbc::RepeatedField<global::Cspb.DrillPassCount> passCount_ = new pbc::RepeatedField<global::Cspb.DrillPassCount>();
    /// <summary>
    /// 通关记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.DrillPassCount> PassCount {
      get { return passCount_; }
    }

    /// <summary>Field number for the "npc_troops" field.</summary>
    public const int NpcTroopsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_npcTroops_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> npcTroops_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 敌方部队ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> NpcTroops {
      get { return npcTroops_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrillStatisticAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrillStatisticAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DefeatCount != other.DefeatCount) return false;
      if(!passCount_.Equals(other.passCount_)) return false;
      if(!npcTroops_.Equals(other.npcTroops_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DefeatCount != 0) hash ^= DefeatCount.GetHashCode();
      hash ^= passCount_.GetHashCode();
      hash ^= npcTroops_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DefeatCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DefeatCount);
      }
      passCount_.WriteTo(output, _repeated_passCount_codec);
      npcTroops_.WriteTo(output, _repeated_npcTroops_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DefeatCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefeatCount);
      }
      size += passCount_.CalculateSize(_repeated_passCount_codec);
      size += npcTroops_.CalculateSize(_repeated_npcTroops_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrillStatisticAck other) {
      if (other == null) {
        return;
      }
      if (other.DefeatCount != 0) {
        DefeatCount = other.DefeatCount;
      }
      passCount_.Add(other.passCount_);
      npcTroops_.Add(other.npcTroops_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DefeatCount = input.ReadInt32();
            break;
          }
          case 18: {
            passCount_.AddEntriesFrom(input, _repeated_passCount_codec);
            break;
          }
          case 26:
          case 24: {
            npcTroops_.AddEntriesFrom(input, _repeated_npcTroops_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// robot task
  /// </summary>
  public sealed partial class RobotTaskAck : pb::IMessage<RobotTaskAck> {
    private static readonly pb::MessageParser<RobotTaskAck> _parser = new pb::MessageParser<RobotTaskAck>(() => new RobotTaskAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotTaskAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotTaskAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotTaskAck(RobotTaskAck other) : this() {
      taskId_ = other.taskId_;
      name_ = other.name_;
      params_ = other.params_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotTaskAck Clone() {
      return new RobotTaskAck(this);
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private long taskId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_params_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> params_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///参数类别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Params {
      get { return params_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotTaskAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotTaskAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (Name != other.Name) return false;
      if(!params_.Equals(other.params_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId != 0L) hash ^= TaskId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= params_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TaskId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      params_.WriteTo(output, _repeated_params_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TaskId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotTaskAck other) {
      if (other == null) {
        return;
      }
      if (other.TaskId != 0L) {
        TaskId = other.TaskId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      params_.Add(other.params_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TaskId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 返回排行榜
  /// </summary>
  public sealed partial class LeaderBoardAck : pb::IMessage<LeaderBoardAck> {
    private static readonly pb::MessageParser<LeaderBoardAck> _parser = new pb::MessageParser<LeaderBoardAck>(() => new LeaderBoardAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaderBoardAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaderBoardAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaderBoardAck(LeaderBoardAck other) : this() {
      personCount_ = other.personCount_;
      unionCount_ = other.unionCount_;
      persons_ = other.persons_.Clone();
      unions_ = other.unions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaderBoardAck Clone() {
      return new LeaderBoardAck(this);
    }

    /// <summary>Field number for the "person_count" field.</summary>
    public const int PersonCountFieldNumber = 1;
    private int personCount_;
    /// <summary>
    /// 个人榜显示数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PersonCount {
      get { return personCount_; }
      set {
        personCount_ = value;
      }
    }

    /// <summary>Field number for the "union_count" field.</summary>
    public const int UnionCountFieldNumber = 2;
    private int unionCount_;
    /// <summary>
    /// 同盟榜显示数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnionCount {
      get { return unionCount_; }
      set {
        unionCount_ = value;
      }
    }

    /// <summary>Field number for the "persons" field.</summary>
    public const int PersonsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cspb.PersonBoard> _repeated_persons_codec
        = pb::FieldCodec.ForMessage(26, global::Cspb.PersonBoard.Parser);
    private readonly pbc::RepeatedField<global::Cspb.PersonBoard> persons_ = new pbc::RepeatedField<global::Cspb.PersonBoard>();
    /// <summary>
    /// 个人榜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.PersonBoard> Persons {
      get { return persons_; }
    }

    /// <summary>Field number for the "unions" field.</summary>
    public const int UnionsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Cspb.UnionBoard> _repeated_unions_codec
        = pb::FieldCodec.ForMessage(34, global::Cspb.UnionBoard.Parser);
    private readonly pbc::RepeatedField<global::Cspb.UnionBoard> unions_ = new pbc::RepeatedField<global::Cspb.UnionBoard>();
    /// <summary>
    /// 同盟榜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.UnionBoard> Unions {
      get { return unions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaderBoardAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaderBoardAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PersonCount != other.PersonCount) return false;
      if (UnionCount != other.UnionCount) return false;
      if(!persons_.Equals(other.persons_)) return false;
      if(!unions_.Equals(other.unions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PersonCount != 0) hash ^= PersonCount.GetHashCode();
      if (UnionCount != 0) hash ^= UnionCount.GetHashCode();
      hash ^= persons_.GetHashCode();
      hash ^= unions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PersonCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PersonCount);
      }
      if (UnionCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnionCount);
      }
      persons_.WriteTo(output, _repeated_persons_codec);
      unions_.WriteTo(output, _repeated_unions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PersonCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PersonCount);
      }
      if (UnionCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnionCount);
      }
      size += persons_.CalculateSize(_repeated_persons_codec);
      size += unions_.CalculateSize(_repeated_unions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaderBoardAck other) {
      if (other == null) {
        return;
      }
      if (other.PersonCount != 0) {
        PersonCount = other.PersonCount;
      }
      if (other.UnionCount != 0) {
        UnionCount = other.UnionCount;
      }
      persons_.Add(other.persons_);
      unions_.Add(other.unions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PersonCount = input.ReadInt32();
            break;
          }
          case 16: {
            UnionCount = input.ReadInt32();
            break;
          }
          case 26: {
            persons_.AddEntriesFrom(input, _repeated_persons_codec);
            break;
          }
          case 34: {
            unions_.AddEntriesFrom(input, _repeated_unions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///天下大势
  /// </summary>
  public sealed partial class EpicAwardAck : pb::IMessage<EpicAwardAck> {
    private static readonly pb::MessageParser<EpicAwardAck> _parser = new pb::MessageParser<EpicAwardAck>(() => new EpicAwardAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EpicAwardAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EpicAwardAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EpicAwardAck(EpicAwardAck other) : this() {
      epicId_ = other.epicId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EpicAwardAck Clone() {
      return new EpicAwardAck(this);
    }

    /// <summary>Field number for the "epic_id" field.</summary>
    public const int EpicIdFieldNumber = 1;
    private int epicId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EpicId {
      get { return epicId_; }
      set {
        epicId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EpicAwardAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EpicAwardAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EpicId != other.EpicId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EpicId != 0) hash ^= EpicId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EpicId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EpicId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EpicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EpicId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EpicAwardAck other) {
      if (other == null) {
        return;
      }
      if (other.EpicId != 0) {
        EpicId = other.EpicId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EpicId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetEpicInfoAck : pb::IMessage<GetEpicInfoAck> {
    private static readonly pb::MessageParser<GetEpicInfoAck> _parser = new pb::MessageParser<GetEpicInfoAck>(() => new GetEpicInfoAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetEpicInfoAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEpicInfoAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEpicInfoAck(GetEpicInfoAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEpicInfoAck Clone() {
      return new GetEpicInfoAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetEpicInfoAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetEpicInfoAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetEpicInfoAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class PNRegisterAck : pb::IMessage<PNRegisterAck> {
    private static readonly pb::MessageParser<PNRegisterAck> _parser = new pb::MessageParser<PNRegisterAck>(() => new PNRegisterAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PNRegisterAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PNRegisterAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PNRegisterAck(PNRegisterAck other) : this() {
      err_ = other.err_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PNRegisterAck Clone() {
      return new PNRegisterAck(this);
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 1;
    private string err_ = "";
    /// <summary>
    ///错误 成功 ""
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Err {
      get { return err_; }
      set {
        err_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PNRegisterAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PNRegisterAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Err != other.Err) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Err.Length != 0) hash ^= Err.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Err.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Err);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Err.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Err);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PNRegisterAck other) {
      if (other == null) {
        return;
      }
      if (other.Err.Length != 0) {
        Err = other.Err;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Err = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求paytoken
  /// </summary>
  public sealed partial class PayTokenAck : pb::IMessage<PayTokenAck> {
    private static readonly pb::MessageParser<PayTokenAck> _parser = new pb::MessageParser<PayTokenAck>(() => new PayTokenAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PayTokenAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayTokenAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayTokenAck(PayTokenAck other) : this() {
      err_ = other.err_;
      payToken_ = other.payToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayTokenAck Clone() {
      return new PayTokenAck(this);
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 1;
    private global::Cspb.ERR_CODE err_ = 0;
    /// <summary>
    /// 错误
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ERR_CODE Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    /// <summary>Field number for the "pay_token" field.</summary>
    public const int PayTokenFieldNumber = 2;
    private string payToken_ = "";
    /// <summary>
    /// paytoken
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PayToken {
      get { return payToken_; }
      set {
        payToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PayTokenAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PayTokenAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Err != other.Err) return false;
      if (PayToken != other.PayToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Err != 0) hash ^= Err.GetHashCode();
      if (PayToken.Length != 0) hash ^= PayToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Err != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Err);
      }
      if (PayToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PayToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Err != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Err);
      }
      if (PayToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PayToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PayTokenAck other) {
      if (other == null) {
        return;
      }
      if (other.Err != 0) {
        Err = other.Err;
      }
      if (other.PayToken.Length != 0) {
        PayToken = other.PayToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            err_ = (global::Cspb.ERR_CODE) input.ReadEnum();
            break;
          }
          case 18: {
            PayToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NpcCityInfoAck : pb::IMessage<NpcCityInfoAck> {
    private static readonly pb::MessageParser<NpcCityInfoAck> _parser = new pb::MessageParser<NpcCityInfoAck>(() => new NpcCityInfoAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NpcCityInfoAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcCityInfoAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcCityInfoAck(NpcCityInfoAck other) : this() {
      Infos = other.infos_ != null ? other.Infos.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcCityInfoAck Clone() {
      return new NpcCityInfoAck(this);
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 1;
    private global::Cspb.NpcCityInfoNtf infos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.NpcCityInfoNtf Infos {
      get { return infos_; }
      set {
        infos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NpcCityInfoAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NpcCityInfoAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Infos, other.Infos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (infos_ != null) hash ^= Infos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (infos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Infos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (infos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Infos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NpcCityInfoAck other) {
      if (other == null) {
        return;
      }
      if (other.infos_ != null) {
        if (infos_ == null) {
          infos_ = new global::Cspb.NpcCityInfoNtf();
        }
        Infos.MergeFrom(other.Infos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (infos_ == null) {
              infos_ = new global::Cspb.NpcCityInfoNtf();
            }
            input.ReadMessage(infos_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class QuestionNaireAwardAck : pb::IMessage<QuestionNaireAwardAck> {
    private static readonly pb::MessageParser<QuestionNaireAwardAck> _parser = new pb::MessageParser<QuestionNaireAwardAck>(() => new QuestionNaireAwardAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuestionNaireAwardAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestionNaireAwardAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestionNaireAwardAck(QuestionNaireAwardAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestionNaireAwardAck Clone() {
      return new QuestionNaireAwardAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuestionNaireAwardAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuestionNaireAwardAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuestionNaireAwardAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// 检查名字是否合法
  /// </summary>
  public sealed partial class ChangeNameCheckAck : pb::IMessage<ChangeNameCheckAck> {
    private static readonly pb::MessageParser<ChangeNameCheckAck> _parser = new pb::MessageParser<ChangeNameCheckAck>(() => new ChangeNameCheckAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeNameCheckAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeNameCheckAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeNameCheckAck(ChangeNameCheckAck other) : this() {
      name_ = other.name_;
      errCode_ = other.errCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeNameCheckAck Clone() {
      return new ChangeNameCheckAck(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "errCode" field.</summary>
    public const int ErrCodeFieldNumber = 2;
    private global::Cspb.ERR_CODE errCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ERR_CODE ErrCode {
      get { return errCode_; }
      set {
        errCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeNameCheckAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeNameCheckAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ErrCode != other.ErrCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ErrCode != 0) hash ^= ErrCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ErrCode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ErrCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ErrCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeNameCheckAck other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ErrCode != 0) {
        ErrCode = other.ErrCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            errCode_ = (global::Cspb.ERR_CODE) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 改名
  /// </summary>
  public sealed partial class ChangeNameAck : pb::IMessage<ChangeNameAck> {
    private static readonly pb::MessageParser<ChangeNameAck> _parser = new pb::MessageParser<ChangeNameAck>(() => new ChangeNameAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeNameAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeNameAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeNameAck(ChangeNameAck other) : this() {
      name_ = other.name_;
      errCode_ = other.errCode_;
      freeChangeNameTimes_ = other.freeChangeNameTimes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeNameAck Clone() {
      return new ChangeNameAck(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 新名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "errCode" field.</summary>
    public const int ErrCodeFieldNumber = 2;
    private global::Cspb.ERR_CODE errCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ERR_CODE ErrCode {
      get { return errCode_; }
      set {
        errCode_ = value;
      }
    }

    /// <summary>Field number for the "freeChangeNameTimes" field.</summary>
    public const int FreeChangeNameTimesFieldNumber = 3;
    private int freeChangeNameTimes_;
    /// <summary>
    /// 剩余免费改名次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeChangeNameTimes {
      get { return freeChangeNameTimes_; }
      set {
        freeChangeNameTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeNameAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeNameAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ErrCode != other.ErrCode) return false;
      if (FreeChangeNameTimes != other.FreeChangeNameTimes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ErrCode != 0) hash ^= ErrCode.GetHashCode();
      if (FreeChangeNameTimes != 0) hash ^= FreeChangeNameTimes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ErrCode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ErrCode);
      }
      if (FreeChangeNameTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FreeChangeNameTimes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ErrCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrCode);
      }
      if (FreeChangeNameTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeChangeNameTimes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeNameAck other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ErrCode != 0) {
        ErrCode = other.ErrCode;
      }
      if (other.FreeChangeNameTimes != 0) {
        FreeChangeNameTimes = other.FreeChangeNameTimes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            errCode_ = (global::Cspb.ERR_CODE) input.ReadEnum();
            break;
          }
          case 24: {
            FreeChangeNameTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryPlayersByNameAck : pb::IMessage<QueryPlayersByNameAck> {
    private static readonly pb::MessageParser<QueryPlayersByNameAck> _parser = new pb::MessageParser<QueryPlayersByNameAck>(() => new QueryPlayersByNameAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryPlayersByNameAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryPlayersByNameAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryPlayersByNameAck(QueryPlayersByNameAck other) : this() {
      result_ = other.result_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryPlayersByNameAck Clone() {
      return new QueryPlayersByNameAck(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.PlayerInfo> _repeated_result_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Cspb.PlayerInfo> result_ = new pbc::RepeatedField<global::Cspb.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.PlayerInfo> Result {
      get { return result_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryPlayersByNameAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryPlayersByNameAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!result_.Equals(other.result_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= result_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      result_.WriteTo(output, _repeated_result_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += result_.CalculateSize(_repeated_result_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryPlayersByNameAck other) {
      if (other == null) {
        return;
      }
      result_.Add(other.result_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            result_.AddEntriesFrom(input, _repeated_result_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryPlayerAck : pb::IMessage<QueryPlayerAck> {
    private static readonly pb::MessageParser<QueryPlayerAck> _parser = new pb::MessageParser<QueryPlayerAck>(() => new QueryPlayerAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryPlayerAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryPlayerAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryPlayerAck(QueryPlayerAck other) : this() {
      errCode_ = other.errCode_;
      Result = other.result_ != null ? other.Result.Clone() : null;
      queryName_ = other.queryName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryPlayerAck Clone() {
      return new QueryPlayerAck(this);
    }

    /// <summary>Field number for the "errCode" field.</summary>
    public const int ErrCodeFieldNumber = 1;
    private global::Cspb.ERR_CODE errCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ERR_CODE ErrCode {
      get { return errCode_; }
      set {
        errCode_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Cspb.PlayerInfo result_;
    /// <summary>
    /// 结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.PlayerInfo Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "queryName" field.</summary>
    public const int QueryNameFieldNumber = 3;
    private string queryName_ = "";
    /// <summary>
    /// 查询名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QueryName {
      get { return queryName_; }
      set {
        queryName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryPlayerAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryPlayerAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrCode != other.ErrCode) return false;
      if (!object.Equals(Result, other.Result)) return false;
      if (QueryName != other.QueryName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrCode != 0) hash ^= ErrCode.GetHashCode();
      if (result_ != null) hash ^= Result.GetHashCode();
      if (QueryName.Length != 0) hash ^= QueryName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ErrCode);
      }
      if (result_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Result);
      }
      if (QueryName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(QueryName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrCode);
      }
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (QueryName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QueryName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryPlayerAck other) {
      if (other == null) {
        return;
      }
      if (other.ErrCode != 0) {
        ErrCode = other.ErrCode;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          result_ = new global::Cspb.PlayerInfo();
        }
        Result.MergeFrom(other.Result);
      }
      if (other.QueryName.Length != 0) {
        QueryName = other.QueryName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            errCode_ = (global::Cspb.ERR_CODE) input.ReadEnum();
            break;
          }
          case 18: {
            if (result_ == null) {
              result_ = new global::Cspb.PlayerInfo();
            }
            input.ReadMessage(result_);
            break;
          }
          case 26: {
            QueryName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DismantleCityAck : pb::IMessage<DismantleCityAck> {
    private static readonly pb::MessageParser<DismantleCityAck> _parser = new pb::MessageParser<DismantleCityAck>(() => new DismantleCityAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DismantleCityAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.AckReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismantleCityAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismantleCityAck(DismantleCityAck other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DismantleCityAck Clone() {
      return new DismantleCityAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DismantleCityAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DismantleCityAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DismantleCityAck other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
