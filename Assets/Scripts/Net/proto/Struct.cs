// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: struct.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Cspb {

  /// <summary>Holder for reflection information generated from struct.proto</summary>
  public static partial class StructReflection {

    #region Descriptor
    /// <summary>File descriptor for struct.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StructReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxzdHJ1Y3QucHJvdG8SBGNzcGIaCWRlZi5wcm90byJqCgtFUENpdHlCcmll",
            "ZhIRCglwbGF5ZXJfaWQYASABKAMSEQoJY2l0eV9uYW1lGAIgASgJEh8KBXN0",
            "YXRlGAMgASgOMhAuY3NwYi5DSVRZX1NUQVRFEhQKDGlzSW52aW5jaWJsZRgE",
            "IAEoCCJkCgpFUENpdHlJbmZvEiIKBW93bmVyGAEgASgLMhMuY3NwYi5NYXBQ",
            "bGF5ZXJJbmZvEhEKCWNpdHlfbmFtZRgCIAEoCRIfCgVzdGF0ZRgDIAEoDjIQ",
            "LmNzcGIuQ0lUWV9TVEFURSJcCg5FUENpdHlEc3RCcmllZhIRCglwbGF5ZXJf",
            "aWQYASABKAMSDgoGY2VudGVyGAIgASgFEhEKCWNpdHlfbmFtZRgDIAEoCRIU",
            "Cgxpc0ludmluY2libGUYBCABKAgiVgoNRVBDaXR5RHN0SW5mbxIiCgVvd25l",
            "chgBIAEoCzITLmNzcGIuTWFwUGxheWVySW5mbxIRCgljaXR5X25hbWUYAiAB",
            "KAkSDgoGY2VudGVyGAMgASgFIm0KDkVGb3J0cmVzc0JyaWVmEhEKCXBsYXll",
            "cl9pZBgBIAEoAxIRCgljaXR5X25hbWUYAiABKAkSHwoFc3RhdGUYAyABKA4y",
            "EC5jc3BiLkNJVFlfU1RBVEUSFAoMaXNJbnZpbmNpYmxlGAQgASgIImcKDUVG",
            "b3J0cmVzc0luZm8SIgoFb3duZXIYASABKAsyEy5jc3BiLk1hcFBsYXllcklu",
            "Zm8SEQoJY2l0eV9uYW1lGAIgASgJEh8KBXN0YXRlGAMgASgOMhAuY3NwYi5D",
            "SVRZX1NUQVRFIg0KC0VOQ2l0eUJyaWVmIgwKCkVOQ2l0eUluZm8iygEKDU1h",
            "cFBsYXllckluZm8SCgoCaWQYASABKAMSDAoEbmFtZRgCIAEoCRINCgVwb3dl",
            "chgDIAEoBRINCgVpbnRybxgEIAEoCRIQCghwcmVzaXRnZRgFIAEoBRISCgp1",
            "bmlvbl9uYW1lGAYgASgJEhEKCW5pY2tfbmFtZRgHIAEoCRIRCglhdmF0YXJf",
            "aWQYCCABKAUSIwoKdW5pb25fZmxhZxgJIAEoCzIPLmNzcGIuVW5pb25GbGFn",
            "EhAKCHVuaW9uX2lkGAogASgDIkoKDFN0YXRpb25CcmllZhIrCgthY3Rpb25f",
            "dHlwZRgBIAEoDjIWLmNzcGIuVElMRV9BQ1RJT05fVFlQRRINCgVjb3VudBgC",
            "IAEoBSKEAQoLU3RhdGlvbkluZm8SIwoGcGxheWVyGAEgASgLMhMuY3NwYi5N",
            "YXBQbGF5ZXJJbmZvEhAKCHRyb29wX2lkGAIgASgDEisKC2FjdGlvbl90eXBl",
            "GAMgASgOMhYuY3NwYi5USUxFX0FDVElPTl9UWVBFEhEKCWFyaXZlZF9hdBgE",
            "IAEoAyI5CgdOcGNJbmZvEhQKDGJhdHRsZV9zdGFydBgBIAEoAxIYChBsZWZ0",
            "X3Ryb29wX2NvdW50GAIgASgFIm4KC09jY3VweUJyaWVmEhAKCG93bmVyX2lk",
            "GAEgASgDEhEKCWdpdmV1cF9hdBgCIAEoAxIVCg1wcm90ZWN0X3VudGlsGAMg",
            "ASgDEhAKCHVuaW9uX2lkGAQgASgDEhEKCWZhbGxlbl9ieRgFIAEoAyLrAQoK",
            "T2NjdXB5SW5mbxIiCgVvd25lchgBIAEoCzITLmNzcGIuTWFwUGxheWVySW5m",
            "bxIYChB1bmlvbl9vd25lcl9uYW1lGAIgASgJEhIKCm93bmVyX3R5cGUYAyAB",
            "KAUSFQoNcHJvdGVjdF91bnRpbBgEIAEoAxITCgtjdXJfZHVyYWJsZRgFIAEo",
            "BRITCgttYXhfZHVyYWJsZRgGIAEoBRIRCglnaXZldXBfYXQYByABKAMSEgoK",
            "cmVmcmVzaF9hdBgIIAEoAxIQCgh1bmlvbl9pZBgUIAEoAxIRCglmYWxsZW5f",
            "YnkYFSABKAMiQwoKVHJvb3BCcmllZhIRCglwbGF5ZXJfaWQYASABKAMSEAoI",
            "dW5pb25faWQYAiABKAMSEAoIdHJvb3BfaWQYAyABKAMiwwMKCVRpbGVCcmll",
            "ZhILCgNwb3MYASABKAUSJgoLZW50aXR5X3R5cGUYAiABKA4yES5jc3BiLkVO",
            "VElUWV9UWVBFEiQKCW1haW5fY2l0eRgDIAEoCzIRLmNzcGIuRVBDaXR5QnJp",
            "ZWYSKAoKcF9jaXR5X2RzdBgEIAEoCzIULmNzcGIuRVBDaXR5RHN0QnJpZWYS",
            "IwoIc3ViX2NpdHkYCCABKAsyES5jc3BiLkVQQ2l0eUJyaWVmEigKCnBfZm9y",
            "dHJlc3MYCSABKAsyFC5jc3BiLkVGb3J0cmVzc0JyaWVmEigKCm5fZm9ydHJl",
            "c3MYCiABKAsyFC5jc3BiLkVGb3J0cmVzc0JyaWVmEiMKCG5wY19jaXR5GAsg",
            "ASgLMhEuY3NwYi5FTkNpdHlCcmllZhIjCghucGNfZ2F0ZRgMIAEoCzIRLmNz",
            "cGIuRU5DaXR5QnJpZWYSIQoGb2NjdXB5GAUgASgLMhEuY3NwYi5PY2N1cHlC",
            "cmllZhIkCghzdGF0aW9ucxgHIAMoCzISLmNzcGIuU3RhdGlvbkJyaWVmEiUK",
            "C2RyYXdfdHJvb3BzGA0gAygLMhAuY3NwYi5Ucm9vcEJyaWVmItkCCg9UaWxl",
            "RW50aXR5QnJpZWYSCwoDcG9zGAEgASgFEiYKC2VudGl0eV90eXBlGAIgASgO",
            "MhEuY3NwYi5FTlRJVFlfVFlQRRIkCgltYWluX2NpdHkYAyABKAsyES5jc3Bi",
            "LkVQQ2l0eUJyaWVmEigKCnBfY2l0eV9kc3QYBCABKAsyFC5jc3BiLkVQQ2l0",
            "eURzdEJyaWVmEiMKCHN1Yl9jaXR5GAUgASgLMhEuY3NwYi5FUENpdHlCcmll",
            "ZhIoCgpwX2ZvcnRyZXNzGAYgASgLMhQuY3NwYi5FRm9ydHJlc3NCcmllZhIo",
            "CgpuX2ZvcnRyZXNzGAcgASgLMhQuY3NwYi5FRm9ydHJlc3NCcmllZhIjCghu",
            "cGNfY2l0eRgIIAEoCzIRLmNzcGIuRU5DaXR5QnJpZWYSIwoIbnBjX2dhdGUY",
            "CSABKAsyES5jc3BiLkVOQ2l0eUJyaWVmIs8BCgpNYXJjaEJyaWVmEhAKCG1h",
            "cmNoX2lkGAEgASgDEhAKCHRyb29wX2lkGAIgASgDEhEKCXN0YXJ0X3BvcxgD",
            "IAEoBRIPCgdlbmRfcG9zGAQgASgFEhIKCnN0YXJ0X3RpbWUYBSABKAMSEwoL",
            "YXJyaXZlX3RpbWUYBiABKAMSEQoJaXNfcmV0dXJuGAcgASgIEhgKEGRldGFp",
            "bF9yZXBvcnRfaWQYCCABKAMSEQoJcGxheWVyX2lkGAkgASgDEhAKCHVuaW9u",
            "X2lkGAogASgDIjMKBEdyaWQSHgoFdGlsZXMYASADKAsyDy5jc3BiLlRpbGVC",
            "cmllZhILCgNwb3MYAyABKAUiKQoJQ2l0eUJ1aWxkEg0KBWVuZF90GAEgASgD",
            "Eg0KBUxldmVsGAIgASgFIvUBCghQQ2l0eU50ZhIKCgJpZBgBIAEoAxILCgNw",
            "b3MYAiABKAUSIgoJY2l0eV90eXBlGAMgASgOMg8uY3NwYi5DSVRZX1RZUEUS",
            "KgoGYnVpbGRzGAQgAygLMhouY3NwYi5QQ2l0eU50Zi5CdWlsZHNFbnRyeRIT",
            "CgtidWlsZF9xdWV1ZRgFIAMoBRIYChB0ZW1wX2J1aWxkX3F1ZXVlGAYgAygF",
            "EhEKCXF1ZXVlX21heBgHIAEoBRo+CgtCdWlsZHNFbnRyeRILCgNrZXkYASAB",
            "KAUSHgoFdmFsdWUYAiABKAsyDy5jc3BiLkNpdHlCdWlsZDoCOAEi9AIKCE1D",
            "aXR5TnRmEgoKAmlkGAEgASgDEioKBnRyb29wcxgCIAMoCzIaLmNzcGIuTUNp",
            "dHlOdGYuVHJvb3BzRW50cnkSFwoPY29uc2NyaXB0X3F1ZXVlGAQgAygDEg0K",
            "BXJlZGlmGAYgASgFEjEKCmJ1ZmZfYXR0cnMYByADKAsyHS5jc3BiLk1DaXR5",
            "TnRmLkJ1ZmZBdHRyc0VudHJ5Eh8KBXN0YXRlGAggASgOMhAuY3NwYi5DSVRZ",
            "X1NUQVRFEiIKCWNpdHlfdHlwZRgJIAEoDjIPLmNzcGIuQ0lUWV9UWVBFEgsK",
            "A3BvcxgKIAEoBRIMCgRuYW1lGAsgASgJEhQKDHN0YXRlX2VuZF9hdBgMIAEo",
            "AxotCgtUcm9vcHNFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAM6",
            "AjgBGjAKDkJ1ZmZBdHRyc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgC",
            "IAEoAjoCOAEisQIKDE1Gb3J0cmVzc050ZhIKCgJpZBgBIAEoAxIOCgZ0cm9v",
            "cHMYAiADKAMSFwoPY29uc2NyaXB0X3F1ZXVlGAQgAygDEg0KBXJlZGlmGAUg",
            "ASgFEh8KBXN0YXRlGAYgASgOMhAuY3NwYi5DSVRZX1NUQVRFEjUKCmJ1ZmZf",
            "YXR0cnMYByADKAsyIS5jc3BiLk1Gb3J0cmVzc050Zi5CdWZmQXR0cnNFbnRy",
            "eRIiCgljaXR5X3R5cGUYCCABKA4yDy5jc3BiLkNJVFlfVFlQRRILCgNwb3MY",
            "CSABKAUSDAoEbmFtZRgKIAEoCRIUCgxzdGF0ZV9lbmRfYXQYCyABKAMaMAoO",
            "QnVmZkF0dHJzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgCOgI4",
            "ASJBCgpEZWxDaXR5TnRmEg8KB2NpdHlfaWQYASABKAMSIgoJY2l0eV90eXBl",
            "GAIgASgOMg8uY3NwYi5DSVRZX1RZUEUi/QEKCEJhc2ljTnRmEhEKCXBsYXll",
            "cl9pZBgBIAEoAxIMCgRuYW1lGAIgASgJEhQKDGZpbmlzaF9ndWlkZRgEIAEo",
            "CBITCgtuZXdiaWVfc3RlcBgFIAMoCRIRCglhdmF0YXJfaWQYBiABKAUSDQoF",
            "aW50cm8YByABKAkSFQoNbWFpbl9jaXR5X3BvcxgIIAEoBRIgCgV1bmlvbhgJ",
            "IAEoCzIRLmNzcGIuUGxheWVyVW5pb24SIAoGZmFsbGVuGAogASgLMhAuY3Nw",
            "Yi5GYWxsZW5JbmZvEhEKCWNyZWF0ZV9hdBgMIAEoAxIVCg11bmZyb2NlX0d1",
            "aWRlGA0gASgDIvcBCgpQbGF5ZXJJbmZvEhEKCXBsYXllcl9pZBgBIAEoAxIR",
            "CglhdmF0YXJfaWQYAiABKAUSDAoEbmFtZRgDIAEoCRINCgVpbnRybxgEIAEo",
            "CRINCgVwb3dlchgFIAEoBRIQCghwcmVzaXRnZRgGIAEoBRISCgp1bmlvbl9u",
            "YW1lGAcgASgJEhcKD3VuaW9uX25pY2tfbmFtZRgIIAEoCRIWCg5mYWxsZW5f",
            "YnlfbmFtZRgJIAEoCRIbChNmYWxsZW5fYnlfbmlja19uYW1lGAogASgJEiMK",
            "CnVuaW9uX2ZsYWcYCyABKAsyDy5jc3BiLlVuaW9uRmxhZyIwCglIZXJvU2tp",
            "bGwSCgoCaWQYASABKAUSCgoCbHYYAiABKAUSCwoDaWR4GAMgASgFIlYKCEhl",
            "cm9BdHRyEhAKCGF0a19hc2duGAEgASgFEhEKCXBkZWZfYXNnbhgCIAEoBRIR",
            "CgltZGVmX2FzZ24YAyABKAUSEgoKc3BlZWRfYXNnbhgEIAEoBSIsCgpIZXJv",
            "RW5lcmd5Eg4KBmVuZXJneRgBIAEoBRIOCgZsYXN0X3QYAiABKAMiGwoJSGVy",
            "b1N0YXRlEg4KBmh1cnRfdBgBIAEoAyKcAgoESGVybxIQCghoZXJvX3JpZBgB",
            "IAEoAxIPCgdoZXJvX2lkGAIgASgFEg0KBWxldmVsGAMgASgFEhAKCGFkdl9z",
            "dGFyGAQgASgFEhwKBGF0dHIYBSABKAsyDi5jc3BiLkhlcm9BdHRyEh8KBnNr",
            "aWxscxgGIAMoCzIPLmNzcGIuSGVyb1NraWxsEiAKBmVuZXJneRgHIAEoCzIQ",
            "LmNzcGIuSGVyb0VuZXJneRIeCgVzdGF0ZRgIIAEoCzIPLmNzcGIuSGVyb1N0",
            "YXRlEgsKA2V4cBgJIAEoBRINCgVhd2FrZRgKIAEoCBIPCgdpc19sb2NrGAsg",
            "ASgIEhAKCHJlc2V0X2F0GAwgASgDEhAKCHRyb29wX2lkGA0gASgDIiUKCEhl",
            "cm9zTnRmEhkKBWhlcm9zGAEgAygLMgouY3NwYi5IZXJvIi0KCU1hcmNoc050",
            "ZhIgCgZtYXJjaHMYASADKAsyEC5jc3BiLk1hcmNoQnJpZWYiIAoLRGVsTWFy",
            "Y2hOdGYSEQoJbWFyY2hfaWRzGAEgAygDIioKCFRpbGVzTnRmEh4KBXRpbGVz",
            "GAEgAygLMg8uY3NwYi5UaWxlQnJpZWYiUAoKS2lja291dE50ZhInCgZyZWFz",
            "b24YASABKA4yFy5jc3BiLktpY2tvdXROdGYuUmVhc29uIhkKBlJlYXNvbhIP",
            "CgtPdGhlcl9Mb2dpbhAAIiAKC0RlbEhlcm9zTnRmEhEKCWhlcm9fcmlkcxgB",
            "IAMoAyIpCgdGRW5lcmd5Eg4KBmVuZXJneRgBIAEoBRIOCgZsYXN0X3QYAiAB",
            "KAMiGAoGRlN0YXRlEg4KBmh1cnRfdBgBIAEoAyIoCgpGQ29uc2NyaXB0Eg0K",
            "BWVuZF90GAEgASgDEgsKA2NudBgCIAEoBSKqAQoHRmlnaHRlchIQCghoZXJv",
            "X3JpZBgBIAEoAxIOCgZjdXJfaHAYAiABKAUSCwoDcG9zGAMgASgFEh0KBmVu",
            "ZXJneRgEIAEoCzINLmNzcGIuRkVuZXJneRIbCgVzdGF0ZRgFIAEoCzIMLmNz",
            "cGIuRlN0YXRlEiMKCWNvbnNjcmlwdBgGIAEoCzIQLmNzcGIuRkNvbnNjcmlw",
            "dBIPCgdoZXJvX2lkGAcgASgFItABCgpUaWxlQWN0aW9uEisKC2FjdGlvbl90",
            "eXBlGAEgASgOMhYuY3NwYi5USUxFX0FDVElPTl9UWVBFEhEKCXN0YXJ0X3Bv",
            "cxgCIAEoBRIQCghkZXN0X3BvcxgDIAEoBRIcChRjdXJfYWN0aW9uX2Zpbmlz",
            "aF9hdBgEIAEoAxIWCg5tYXhfYWN0aW9uX2NudBgFIAEoBRIWCg5zdXJfYWN0",
            "aW9uX2NudBgGIAEoBRIQCghzdGFydF9hdBgHIAEoAxIQCghtYXJjaF9pZBgI",
            "IAEoAyKyAQoIVHJvb3BOdGYSEAoIdHJvb3BfaWQYASABKAMSHwoIZmlnaHRl",
            "cnMYAiADKAsyDS5jc3BiLkZpZ2h0ZXISIAoFc3RhdGUYAyABKA4yES5jc3Bi",
            "LlRST09QX1NUQVRFEiAKBmFjdGlvbhgHIAEoCzIQLmNzcGIuVGlsZUFjdGlv",
            "bhIWCg5sb2NhbF9jaXR5X3BvcxgJIAEoBRIXCg9iZWxvbmdfY2l0eV9wb3MY",
            "CiABKAUiHwoLRGVsVHJvb3BOdGYSEAoIdHJvb3BfaWQYASABKAMiOwoFU2tp",
            "bGwSEAoIc2tpbGxfaWQYASABKAUSEQoJcnByb2dyZXNzGAIgASgFEg0KBWhl",
            "cm9zGAMgAygDIigKCVNraWxsc050ZhIbCgZza2lsbHMYASADKAsyCy5jc3Bi",
            "LlNraWxsIiAKC1NraWxsRXhwTnRmEhEKCXNraWxsX2V4cBgBIAEoBSLgAQoO",
            "QlJGaWdodGVyQnJpZWYSDwoHaGVyb19pZBgBIAEoBRILCgNwb3MYAiABKAUS",
            "CgoCbHYYAyABKAUSDgoGY3VyX2hwGAQgASgFEg4KBm1heF9ocBgFIAEoBRIQ",
            "CghoZXJvX3JpZBgGIAEoAxIQCghhZHZfc3RhchgHIAEoBRINCgVhd2FrZRgI",
            "IAEoCBIdCgZza2lsbHMYCSADKAsyDS5jc3BiLkJSU2tpbGwSCwoDZXhwGAog",
            "ASgFEiUKCGFybV90eXBlGAsgASgOMhMuY3NwYi5IRVJPX0FSTV9UWVBFIoIB",
            "CgxCUlRyb29wQnJpZWYSEwoLcGxheWVyX25hbWUYASABKAkSJgoIZmlnaHRl",
            "cnMYAiADKAsyFC5jc3BiLkJSRmlnaHRlckJyaWVmEg4KBmlzX25wYxgDIAEo",
            "CBISCgp1bmlvbl9uYW1lGAQgASgJEhEKCW5wY190cm9vcBgFIAEoBSLCAwoK",
            "QlJlcG9ydE50ZhIRCglyZXBvcnRfaWQYASABKAMSCwoDcG9zGAIgASgFEhMK",
            "C2lzX2F0dGFja2VyGAMgASgIEiMKBnJlc3VsdBgEIAEoDjITLmNzcGIuQkFU",
            "VExFX1JFU1VMVBIkCghhdHRhY2tlchgFIAEoCzISLmNzcGIuQlJUcm9vcEJy",
            "aWVmEiQKCGRlZmVuZGVyGAYgASgLMhIuY3NwYi5CUlRyb29wQnJpZWYSDAoE",
            "dGltZRgHIAEoAxIRCgliYXR0bGVfaWQYCCABKAMSEQoJaXNfb2NjdXB5GAkg",
            "ASgIEhgKEGRldGFpbF9yZXBvcnRfaWQYCiABKAMSIwoIZHN0X3R5cGUYCyAB",
            "KA4yES5jc3BiLkVOVElUWV9UWVBFEg8KB2V4cF9nZXQYDCABKAUSGgoGYXdh",
            "cmRzGA0gAygLMgouY3NwYi5JdGVtEhoKBnN1cHBseRgOIAMoCzIKLmNzcGIu",
            "SXRlbRITCgtzdWJfZHVyYWJsZRgPIAEoBRIUCgxsZWZ0X2R1cmFibGUYECAB",
            "KAUSEAoIdWV4cF9nZXQYESABKAUSFQoNaGFzX25ld19lbmVteRgSIAEoCCI2",
            "CgRMYW5kEgsKA3BvcxgBIAEoBRIhCgZlX3R5cGUYAiABKA4yES5jc3BiLkVO",
            "VElUWV9UWVBFIigKC0xhbmRMaXN0TnRmEhkKBWxhbmRzGAEgAygLMgouY3Nw",
            "Yi5MYW5kImgKCFJlc291cmNlEh0KAmlkGAEgASgOMhEuY3NwYi5SRVNPVVJD",
            "RV9JRBILCgNyZXMYAiABKAUSDwoHcHJvZHVjZRgDIAEoBRILCgNtYXgYBCAB",
            "KAUSEgoKcmVmcmVzaF9hdBgFIAEoAyJPCgtSZXNvdXJjZU50ZhIhCglyZXNv",
            "dXJjZXMYAiADKAsyDi5jc3BiLlJlc291cmNlEg8KB2RpYW1vbmQYAyABKAUS",
            "DAoEY29pbhgFIAEoBSIkCgpEU2tpbGxJbmZvEgoKAmlkGAEgASgFEgoKAmx2",
            "GAIgASgFIjwKDERGaWdodGVySW5mbxIPCgdoZXJvX2lkGAEgASgFEgsKA3Bv",
            "cxgCIAEoBRIOCgZjdXJfaHAYAyABKAUiIQoHQlJTa2lsbBIKCgJpZBgBIAEo",
            "BRIKCgJsdhgCIAEoBSIoCglCUkZpZ2h0ZXISCgoCaWQYASABKAUSDwoHaGVy",
            "b19pZBgCIAEoBSJZCgxCYXR0bGVSZXBvcnQSEgoKb2NjdXJfdGltZRgBIAEo",
            "AxIhCghmaWdodGVycxgCIAMoCzIPLmNzcGIuQlJGaWdodGVyEhIKCnR4dF9y",
            "ZXBvcnQYBCABKAkiSQoQQlJlcG9ydERldGFpbE50ZhIRCglyZXBvcnRfaWQY",
            "ASABKAMSIgoGcmVwb3J0GAIgASgLMhIuY3NwYi5CYXR0bGVSZXBvcnQiVQoN",
            "UG93ZXJSYW5rSXRlbRIKCgJpZBgBIAEoAxIMCgRuYW1lGAIgASgJEg0KBXBv",
            "d2VyGAMgASgFEg0KBXBsYWNlGAQgASgFEgwKBGFyZWEYBSABKAkiKwoITWFp",
            "bEFkZHISDAoEbmFtZRgBIAEoCRIRCglhZGRyX3R5cGUYAiABKAUigAIKC01h",
            "aWxDb250ZW50EhEKCXNlbmRlcl9pZBgBIAEoAxITCgtzZW5kZXJfbmFtZRgC",
            "IAEoCRIUCgxzZW5kZXJfdGl0bGUYAyABKAUSFAoMY29udGVudF90eXBlGAQg",
            "ASgFEhMKC2NvbnRlbnRfdmFsGAUgASgJEhAKCHRpdGxlX2lkGAogASgJEhIK",
            "CmNvbnRlbnRfaWQYCyABKAkSMQoIcmVwbGFjZXMYDCADKAsyHy5jc3BiLk1h",
            "aWxDb250ZW50LlJlcGxhY2VzRW50cnkaLwoNUmVwbGFjZXNFbnRyeRILCgNr",
            "ZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIvQBCgpNYWlsRGV0YWlsEg8K",
            "B21haWxfaWQYASABKAMSHAoEZnJvbRgCIAEoCzIOLmNzcGIuTWFpbEFkZHIS",
            "GgoCdG8YAyABKAsyDi5jc3BiLk1haWxBZGRyEhEKCW1haWxfdHlwZRgEIAEo",
            "BRISCgpjcmVhdGVkX2F0GAUgASgDEg0KBXRpdGxlGAYgASgJEg8KB2NvbnRl",
            "bnQYByABKAkSHwoLYXR0YWNobWVudHMYCCADKAsyCi5jc3BiLkl0ZW0SDgoG",
            "c3RhdHVzGAkgASgFEg4KBmJveF9pZBgKIAEoBRITCgtyZWxhdGlvbl9pZBgL",
            "IAEoAyJECgtNYWlsTGlzdE50ZhIUCgxyZWZyZXNoX3R5cGUYASABKAUSHwoF",
            "bWFpbHMYAiADKAsyEC5jc3BiLk1haWxEZXRhaWwiPAoNTWFpbEF3YXJkc050",
            "ZhIPCgdtYWlsX2lkGAEgASgDEhoKBmF3YXJkcxgCIAMoCzIKLmNzcGIuSXRl",
            "bSI8CgtNYWlsQm94SW5mbxIOCgZib3hfaWQYASABKAUSDgoGVW5yZWFkGAIg",
            "ASgFEg0KBVRvdGFsGAMgASgFIi4KCk1haWxCb3hOdGYSIAoFYm94ZXMYASAD",
            "KAsyES5jc3BiLk1haWxCb3hJbmZvIpcBCgtDaGF0TWVzc2FnZRIeCgdjaGFu",
            "bmVsGAEgASgOMg0uY3NwYi5NQ19UWVBFEgwKBGZyb20YAiABKAkSDwoHbWVz",
            "c2FnZRgDIAEoCRISCgphdHRhY2htZW50GAQgASgJEhIKCmNyZWF0ZWRfYXQY",
            "BSABKAMSIQoGc3RhdHVzGAYgASgOMhEuY3NwYi5DSEFUX1NUQVRVUyJTCgdD",
            "aGF0TnRmEigKDHJlZnJlc2hfdHlwZRgBIAEoDjISLmNzcGIuUkVGUkVTSF9U",
            "WVBFEh4KA21zZxgCIAMoCzIRLmNzcGIuQ2hhdE1lc3NhZ2UiIAoPQ29sbGVj",
            "dExhbmRzTnRmEg0KBWxhbmRzGAEgAygFIj0KBEl0ZW0SHAoDdHlwGAEgASgO",
            "Mg8uY3NwYi5JVEVNX1RZUEUSCgoCaWQYAiABKAUSCwoDbnVtGAMgASgFIjsK",
            "CkdhY2hhQXdhcmQSIAoMZXhwZWN0X2F3YXJkGAEgASgLMgouY3NwYi5JdGVt",
            "EgsKA3JpZBgCIAEoAyKUAQoKR2FjaGFQcmljZRIKCgJpZBgBIAEoBRIZCgVw",
            "cmljZRgCIAEoCzIKLmNzcGIuSXRlbRIeCgpuZXh0X3ByaWNlGAMgASgLMgou",
            "Y3NwYi5JdGVtEhIKCmZyZWVfY291bnQYBCABKAUSEwoLZ2FjaGFfY291bnQY",
            "BSABKAUSFgoObmV4dF9mcmVlX3RpbWUYBiABKAMi6QEKCEdhY2hhQmFnEgoK",
            "AmlkGAEgASgDEhIKCnBhY2thZ2VfaWQYAiABKAUSDQoFY291bnQYAyABKAUS",
            "FgoOZGlzYXBwZWFyX3RpbWUYBCABKAMSIAoGcHJpY2VzGAUgAygLMhAuY3Nw",
            "Yi5HYWNoYVByaWNlEhoKBmF3YXJkcxgGIAMoCzIKLmNzcGIuSXRlbRIOCgZh",
            "Y3RpdmUYByABKAUSDQoFbGV2ZWwYCCABKAUSEwoLdG90YWxfY291bnQYCSAB",
            "KAUSDQoFZGFpbHkYCiABKAgSFQoNbmV4dF9zdXJwcmlzZRgLIAEoBSKcAQoE",
            "VGFzaxIKCgJpZBgBIAEoBRIMCgR0eXBlGAIgASgFEg0KBWZpbmlkGAMgAygF",
            "Eg8KB2ZpbnR5cGUYBCABKAUSDgoGZmluY250GAUgAygFEg0KBWNvdW50GAYg",
            "AygFEhkKBWF3YXJkGAcgAygLMgouY3NwYi5JdGVtEg0KBXN0YXRlGAggASgF",
            "EhEKCWNoYXB0ZXJpZBgJIAEoBSJnCghUYXNrc050ZhIdCglhZGRfdGFza3MY",
            "ASADKAsyCi5jc3BiLlRhc2sSHQoJc3ViX3Rhc2tzGAIgAygLMgouY3NwYi5U",
            "YXNrEh0KCXJlZl90YXNrcxgDIAMoCzIKLmNzcGIuVGFzayJuCgpNYXJrZXRJ",
            "dGVtEgoKAmlkGAEgASgFEhkKBWdvb2RzGAIgAygLMgouY3NwYi5JdGVtEhkK",
            "BXByaWNlGAMgAygLMgouY3NwYi5JdGVtEhAKCGRpc2NvdW50GAQgASgFEgwK",
            "BHNvbGQYBSABKAgiZwoGTWFya2V0EgoKAmlkGAEgASgFEhEKCWZyZXNoQ29z",
            "dBgCIAEoBRIgCgZtYXJrZXQYAyADKAsyEC5jc3BiLk1hcmtldEl0ZW0SEAoI",
            "bGFzdHRpbWUYBCABKAMSCgoCY2QYBSABKAMiKwoKTWFya2V0c050ZhIdCgdt",
            "YXJrZXRzGAEgAygLMgwuY3NwYi5NYXJrZXQiSAoGVGF4TnRmEgsKA3RheBgB",
            "IAEoBRIOCgZucGNUYXgYAiABKAUSEAoIdGF4VmFsdWUYAyADKAUSDwoHdGF4",
            "VGltZRgEIAMoAyIzChBHdWFyZGlhblRyb29wTnRmEh8KCGZpZ2h0ZXJzGAEg",
            "AygLMg0uY3NwYi5GaWdodGVyIiYKCEF3YXJkTnRmEhoKBmF3YXJkcxgBIAMo",
            "CzIKLmNzcGIuSXRlbSJTCg5CYXR0bGVBd2FyZE50ZhIaCgZhd2FyZHMYASAD",
            "KAsyCi5jc3BiLkl0ZW0SJQoEdHlwZRgCIAEoDjIXLmNzcGIuQkFUVExFX0FX",
            "QVJEX1RZUEUiNAoGVmlzaW9uEg4KBmNlbnRlchgBIAEoBRIOCgZyYWRpdXMY",
            "AiABKAUSCgoCb3AYAyABKAUiKwoKVmlzaW9uc050ZhIdCgd2aXNpb25zGAEg",
            "AygLMgwuY3NwYi5WaXNpb24iLAoKQXBwbHlVbmlvbhIQCgh1bmlvbl9pZBgB",
            "IAEoAxIMCgR0aW1lGAIgASgDIi0KC1VuaW9uSW52aXRlEhAKCHVuaW9uX2lk",
            "GAEgASgDEgwKBHRpbWUYAiABKAMi1gEKC1BsYXllclVuaW9uEhAKCHVuaW9u",
            "X2lkGAEgASgDEhAKCHRpdGxlX2lkGAIgASgFEhQKDGxhc3RfcXVpdF9hdBgD",
            "IAEoAxIhCgdhcHBsaWVzGAQgAygLMhAuY3NwYi5BcHBseVVuaW9uEiIKB2lu",
            "dml0ZXMYBSADKAsyES5jc3BiLlVuaW9uSW52aXRlEiYKCXJlbGF0aW9ucxgG",
            "IAMoCzITLmNzcGIuVW5pb25SZWxhdGlvbhIeCgVtYXJrcxgHIAMoCzIPLmNz",
            "cGIuVW5pb25NYXJrIjIKDlBsYXllclVuaW9uTnRmEiAKBXVuaW9uGAEgASgL",
            "MhEuY3NwYi5QbGF5ZXJVbmlvbiKTAQoKRmFsbGVuSW5mbxIQCgh1bmlvbl9p",
            "ZBgBIAEoAxIMCgR0aW1lGAIgASgDEhIKCnJldm9sdF9yZXMYAyABKAUSFgoO",
            "cmV2b2x0X3Jlc19tYXgYBCABKAUSEAoIRmFsbGVuSWQYBSABKAMSEgoKRmFs",
            "bGVuTmFtZRgGIAEoCRITCgtGYWxsZW5VbmlvbhgHIAEoCSJGCglTbGF2ZUlu",
            "Zm8SEAoIc2xhdmVfaWQYASABKAMSEgoKc2xhdmVfbmFtZRgCIAEoCRITCgtz",
            "bGF2ZV91bmlvbhgDIAEoCSIuCgtVbmlvbkRlbWlzZRIRCgl0YXJnZXRfaWQY",
            "ASABKAMSDAoEdGltZRgCIAEoAyJICglVbmlvbkZsYWcSDQoFY29sb3IYASAB",
            "KAUSDQoFc2hhcGUYAiABKAUSDwoHcGF0dGVybhgDIAEoBRIMCgRob3JuGAQg",
            "ASgFIqIBCgtVbmlvblBsYXllchIRCglwbGF5ZXJfaWQYASABKAMSEQoJYXZh",
            "dGFyX2lkGAIgASgFEgwKBG5hbWUYAyABKAkSEAoIdGl0bGVfaWQYBCABKAUS",
            "DQoFcG93ZXIYBSABKAUSDAoEYXJlYRgGIAEoCRILCgNwb3MYByABKAUSFAoM",
            "Y29udHJpYnV0aW9uGAggASgFEg0KBWdsb3J5GAkgASgFImYKC0FwcGx5UGxh",
            "eWVyEhEKCXBsYXllcl9pZBgBIAEoAxIMCgRuYW1lGAIgASgJEgwKBHRpbWUY",
            "AyABKAMSDQoFcG93ZXIYBCABKAUSCwoDcG9zGAUgASgFEgwKBGFyZWEYBiAB",
            "KAkiRgoNVW5pb25SZWxhdGlvbhIQCgh1bmlvbl9pZBgBIAEoAxIVCg1yZWxh",
            "dGlvbl90eXBlGAIgASgFEgwKBHRpbWUYAyABKAMiNwoJVW5pb25NYXJrEgsK",
            "A3BvcxgBIAEoBRIMCgRuYW1lGAIgASgJEg8KB2NvbnRlbnQYAyABKAkiQwoJ",
            "VW5pb25DaXR5EgsKA3BvcxgBIAEoBRIMCgRuYW1lGAIgASgJEg0KBWxldmVs",
            "GAMgASgFEgwKBHRpbWUYBCABKAMiawoIVW5pb25Mb2cSDAoEdHlwZRgBIAEo",
            "BRIQCghzdWJfdHlwZRgCIAEoBRIMCgR0aW1lGAMgASgDEg8KB3N1YmplY3QY",
            "BCABKAkSDwoHb2JqZWN0MRgFIAEoCRIPCgdvYmplY3QyGAYgASgJIjMKDlVu",
            "aW9uUmVzUHJvQWJzEg4KBnJlc19pZBgBIAEoBRIRCglhYnNfdmFsdWUYAiAB",
            "KAUiMwoOVW5pb25SZXNQcm9QY3QSDgoGcmVzX2lkGAEgASgFEhEKCXBjdF92",
            "YWx1ZRgCIAEoBSKWBQoFVW5pb24SEAoIdW5pb25faWQYASABKAMSEgoKdW5p",
            "b25fbmFtZRgCIAEoCRIRCgluaWNrX25hbWUYAyABKAkSDAoEYXJlYRgEIAEo",
            "CRILCgNwb3MYBSABKAUSDQoFbGV2ZWwYBiABKAUSCwoDZXhwGAcgASgFEg0K",
            "BXBvd2VyGAggASgFEhAKCGNpdHlfbnVtGAkgASgFEgsKA251bRgKIAEoBRIP",
            "CgdtYXhfbnVtGAsgASgFEiUKB3Jlc19hYnMYDCADKAsyFC5jc3BiLlVuaW9u",
            "UmVzUHJvQWJzEiUKB3Jlc19wY3QYDSADKAsyFC5jc3BiLlVuaW9uUmVzUHJv",
            "UGN0EhMKC2FwcGx5X2xpbWl0GA4gASgFEhAKCGxhbmd1YWdlGA8gASgFEgwK",
            "BGRlc2MYECABKAkSHQoEZmxhZxgRIAEoCzIPLmNzcGIuVW5pb25GbGFnEiEK",
            "BmRlbWlzZRgSIAEoCzIRLmNzcGIuVW5pb25EZW1pc2USIQoGbGVhZGVyGBMg",
            "ASgLMhEuY3NwYi5VbmlvblBsYXllchISCgpoYXNfZGV0YWlsGBQgASgIEiIK",
            "B2FwcGxpZXMYFSADKAsyES5jc3BiLkFwcGx5UGxheWVyEiIKB21lbWJlcnMY",
            "FiADKAsyES5jc3BiLlVuaW9uUGxheWVyEiYKCXJlbGF0aW9ucxgXIAMoCzIT",
            "LmNzcGIuVW5pb25SZWxhdGlvbhIeCgVtYXJrcxgYIAMoCzIPLmNzcGIuVW5p",
            "b25NYXJrEh8KBmNpdGllcxgZIAMoCzIPLmNzcGIuVW5pb25DaXR5EhwKBGxv",
            "Z3MYGiADKAsyDi5jc3BiLlVuaW9uTG9nEhMKC2Rpc3NvbHZlX2F0GBsgASgD",
            "IjkKCVVuaW9uSW5mbxIaCgV1bmlvbhgBIAEoCzILLmNzcGIuVW5pb24SEAoI",
            "ZGlzdGFuY2UYAiABKAUiKwoIVW5pb25OdGYSHwoGdW5pb25zGAEgAygLMg8u",
            "Y3NwYi5VbmlvbkluZm8iLQoZVW5pb25SZWxhdGlvbkJyb2FkY2FzdE50ZhIQ",
            "Cgh1bmlvbl9pZBgBIAEoAyIsChdVbmlvblBsYXllckJyb2FkY2FzdE50ZhIR",
            "CglwbGF5ZXJfaWQYASABKAMiKwoXVW5pb25GYWxsZW5Ccm9hZGNhc3ROdGYS",
            "EAoIdW5pb25faWQYASABKAMidQoJTGFuZEJhc2ljEgsKA3BvcxgBIAEoBRIm",
            "CgtlbnRpdHlfdHlwZRgCIAEoDjIRLmNzcGIuRU5USVRZX1RZUEUSDwoHZHVy",
            "YWJsZRgDIAEoBRIUCgxnaXZldXBfZW5kYXQYBCABKAMSDAoEbmFtZRgFIAEo",
            "CSI0Cg1MYW5kc0Jhc2ljTnRmEiMKCmxhbmRfYmFzaWMYASADKAsyDy5jc3Bi",
            "LkxhbmRCYXNpYyJGCghDb25mbGljdBIgCgN0eXAYASABKA4yEy5jc3BiLkNP",
            "TkZMSUNUX1RZUEUSCwoDZG1nGAIgASgFEgsKA3BvcxgDIAEoBSJXCgxOcGND",
            "aXR5QnJpZWYSCwoDcG9zGAEgASgFEhAKCHVuaW9uX2lkGAIgASgDEhMKC2N1",
            "cl9kdXJhYmxlGAMgASgFEhMKC21heF9kdXJhYmxlGAQgASgFIqEBCg9GYWxs",
            "ZW5Ob3RpY2VOdGYSEQoJZmFsbGVuX2lkGAEgASgDEhMKC2ZhbGxlbl9uYW1l",
            "GAIgASgJEhQKDGZhbGxlbl91bmlvbhgDIAEoCRITCgtmYWxsZW5ieV9pZBgE",
            "IAEoAxIVCg1mYWxsZW5ieV9uYW1lGAUgASgJEhYKDmZhbGxlbmJ5X3VuaW9u",
            "GAYgASgJEgwKBHRpbWUYByABKAMiWwoNRmFsbGVuSW5mb050ZhIQCgh1bmlv",
            "bl9pZBgBIAEoAxIMCgR0aW1lGAIgASgDEhIKCnJldm9sdF9yZXMYAyABKAUS",
            "FgoOcmV2b2x0X21heF9yZXMYBCABKAUiyQEKCURyaWxsVGlsZRILCgNwb3MY",
            "ASABKAUSEAoIYXRrX2Nvc3QYAiABKAISEgoKYXRrX251bWJlchgDIAEoBRIO",
            "CgZhdGtfaHAYBCABKAUSDwoHZHVyYWJsZRgFIAEoBRITCgttYXhfZHVyYWJs",
            "ZRgGIAEoBRIOCgZpc19lbmQYByABKAgSEwoLaXNfZm9ydHJlc3MYCCABKAgS",
            "EgoKZGVmX3Ryb29wcxgJIAMoBRIaCgZhd2FyZHMYCiADKAsyCi5jc3BiLkl0",
            "ZW0iMQoORHJpbGxQYXNzQ291bnQSEAoIZHJpbGxfaWQYASABKAUSDQoFY291",
            "bnQYAiABKAUiiAMKD0RyaWxsQlJlcG9ydE50ZhIRCglyZXBvcnRfaWQYASAB",
            "KAMSCwoDcG9zGAIgASgFEhMKC2lzX2F0dGFja2VyGAMgASgIEiMKBnJlc3Vs",
            "dBgEIAEoDjITLmNzcGIuQkFUVExFX1JFU1VMVBIkCghhdHRhY2tlchgFIAEo",
            "CzISLmNzcGIuQlJUcm9vcEJyaWVmEiQKCGRlZmVuZGVyGAYgASgLMhIuY3Nw",
            "Yi5CUlRyb29wQnJpZWYSDAoEdGltZRgHIAEoAxIRCgliYXR0bGVfaWQYCCAB",
            "KAMSEQoJaXNfb2NjdXB5GAkgASgIEhgKEGRldGFpbF9yZXBvcnRfaWQYCiAB",
            "KAMSIwoIZHN0X3R5cGUYCyABKA4yES5jc3BiLkVOVElUWV9UWVBFEg8KB2V4",
            "cF9nZXQYDCABKAUSGgoGYXdhcmRzGA0gAygLMgouY3NwYi5JdGVtEhoKBnN1",
            "cHBseRgOIAMoCzIKLmNzcGIuSXRlbRITCgtzdWJfZHVyYWJsZRgPIAEoBSJL",
            "CglBZmZhaXJOdGYSFAoMbW92ZV9jaXR5X2F0GAEgASgDEigKCmludmluY2li",
            "bGUYAiABKAsyFC5jc3BiLkludmluY2libGVJbmZvIi8KDkludmluY2libGVJ",
            "bmZvEg0KBXN0YXRlGAEgASgFEg4KBmVuZF9hdBgCIAEoAyIuCglSb2JiZXJO",
            "dGYSCwoDcG9zGAEgASgFEhQKDHJlZnJlc2hfdGltZRgCIAEoAyIeCg9SZW1v",
            "dmVSb2JiZXJOdGYSCwoDcG9zGAEgASgFIigKCFR1dG9yaWFsEg8KB2ZpbnNo",
            "ZWQYASABKAgSCwoDbG9nGAIgASgJIn8KCEVwaWNJbmZvEgoKAmlkGAEgASgF",
            "Eg0KBXN0YXRlGAIgASgFEgsKA2N1chgDIAEoBRIlCghjdXJfYXJyeRgEIAMo",
            "CzITLmNzcGIuRXBpY1VuaW9uSW5mbxIOCgZlbmRfYXQYBSABKAMSFAoMcGxh",
            "eWVyX3N0YXRlGAYgASgFIicKB0VwaWNOdGYSHAoEZXBpYxgBIAMoCzIOLmNz",
            "cGIuRXBpY0luZm8iMwoNRXBpY1VuaW9uSW5mbxIPCgd1bmlvbklkGAEgASgD",
            "EhEKCXVuaW9uTmFtZRgCIAEoCSKBAQoLUGVyc29uQm9hcmQSDAoEbmFtZRgB",
            "IAEoCRIRCglwbGF5ZXJfaWQYAiABKAMSEAoIc3RhdGVfaWQYAyABKAUSFgoO",
            "c3ViX2NpdHlfY291bnQYBCABKAUSEgoKbGFuZF9jb3VudBgFIAEoBRITCgtw",
            "b3dlcl92YWx1ZRgGIAEoBSKMAQoKVW5pb25Cb2FyZBIMCgRuYW1lGAEgASgJ",
            "EhAKCHVuaW9uX2lkGAIgASgDEg0KBWxldmVsGAMgASgFEhAKCHN0YXRlX2lk",
            "GAQgASgFEhQKDG1lbWJlcl9jb3VudBgFIAEoBRISCgpjaXR5X2NvdW50GAYg",
            "ASgFEhMKC3Bvd2VyX3ZhbHVlGAcgASgFIjoKDk5wY0NpdHlJbmZvTnRmEigK",
            "C2NpdHlfb2NjdXB5GAEgAygLMhMuY3NwYi5OcGNDaXR5T2NjdXB5IjIKDU5w",
            "Y0NpdHlPY2N1cHkSDwoHY2l0eV9pZBgBIAEoBRIQCgh1bmlvbl9pZBgCIAEo",
            "A2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Cspb.DefReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.EPCityBrief), global::Cspb.EPCityBrief.Parser, new[]{ "PlayerId", "CityName", "State", "IsInvincible" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.EPCityInfo), global::Cspb.EPCityInfo.Parser, new[]{ "Owner", "CityName", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.EPCityDstBrief), global::Cspb.EPCityDstBrief.Parser, new[]{ "PlayerId", "Center", "CityName", "IsInvincible" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.EPCityDstInfo), global::Cspb.EPCityDstInfo.Parser, new[]{ "Owner", "CityName", "Center" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.EFortressBrief), global::Cspb.EFortressBrief.Parser, new[]{ "PlayerId", "CityName", "State", "IsInvincible" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.EFortressInfo), global::Cspb.EFortressInfo.Parser, new[]{ "Owner", "CityName", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.ENCityBrief), global::Cspb.ENCityBrief.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.ENCityInfo), global::Cspb.ENCityInfo.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.MapPlayerInfo), global::Cspb.MapPlayerInfo.Parser, new[]{ "Id", "Name", "Power", "Intro", "Presitge", "UnionName", "NickName", "AvatarId", "UnionFlag", "UnionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.StationBrief), global::Cspb.StationBrief.Parser, new[]{ "ActionType", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.StationInfo), global::Cspb.StationInfo.Parser, new[]{ "Player", "TroopId", "ActionType", "ArivedAt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.NpcInfo), global::Cspb.NpcInfo.Parser, new[]{ "BattleStart", "LeftTroopCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.OccupyBrief), global::Cspb.OccupyBrief.Parser, new[]{ "OwnerId", "GiveupAt", "ProtectUntil", "UnionId", "FallenBy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.OccupyInfo), global::Cspb.OccupyInfo.Parser, new[]{ "Owner", "UnionOwnerName", "OwnerType", "ProtectUntil", "CurDurable", "MaxDurable", "GiveupAt", "RefreshAt", "UnionId", "FallenBy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.TroopBrief), global::Cspb.TroopBrief.Parser, new[]{ "PlayerId", "UnionId", "TroopId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.TileBrief), global::Cspb.TileBrief.Parser, new[]{ "Pos", "EntityType", "MainCity", "PCityDst", "SubCity", "PFortress", "NFortress", "NpcCity", "NpcGate", "Occupy", "Stations", "DrawTroops" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.TileEntityBrief), global::Cspb.TileEntityBrief.Parser, new[]{ "Pos", "EntityType", "MainCity", "PCityDst", "SubCity", "PFortress", "NFortress", "NpcCity", "NpcGate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.MarchBrief), global::Cspb.MarchBrief.Parser, new[]{ "MarchId", "TroopId", "StartPos", "EndPos", "StartTime", "ArriveTime", "IsReturn", "DetailReportId", "PlayerId", "UnionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.Grid), global::Cspb.Grid.Parser, new[]{ "Tiles", "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.CityBuild), global::Cspb.CityBuild.Parser, new[]{ "EndT", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.PCityNtf), global::Cspb.PCityNtf.Parser, new[]{ "Id", "Pos", "CityType", "Builds", "BuildQueue", "TempBuildQueue", "QueueMax" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.MCityNtf), global::Cspb.MCityNtf.Parser, new[]{ "Id", "Troops", "ConscriptQueue", "Redif", "BuffAttrs", "State", "CityType", "Pos", "Name", "StateEndAt" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.MFortressNtf), global::Cspb.MFortressNtf.Parser, new[]{ "Id", "Troops", "ConscriptQueue", "Redif", "State", "BuffAttrs", "CityType", "Pos", "Name", "StateEndAt" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.DelCityNtf), global::Cspb.DelCityNtf.Parser, new[]{ "CityId", "CityType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.BasicNtf), global::Cspb.BasicNtf.Parser, new[]{ "PlayerId", "Name", "FinishGuide", "NewbieStep", "AvatarId", "Intro", "MainCityPos", "Union", "Fallen", "CreateAt", "UnfroceGuide" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.PlayerInfo), global::Cspb.PlayerInfo.Parser, new[]{ "PlayerId", "AvatarId", "Name", "Intro", "Power", "Presitge", "UnionName", "UnionNickName", "FallenByName", "FallenByNickName", "UnionFlag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.HeroSkill), global::Cspb.HeroSkill.Parser, new[]{ "Id", "Lv", "Idx" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.HeroAttr), global::Cspb.HeroAttr.Parser, new[]{ "AtkAsgn", "PdefAsgn", "MdefAsgn", "SpeedAsgn" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.HeroEnergy), global::Cspb.HeroEnergy.Parser, new[]{ "Energy", "LastT" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.HeroState), global::Cspb.HeroState.Parser, new[]{ "HurtT" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.Hero), global::Cspb.Hero.Parser, new[]{ "HeroRid", "HeroId", "Level", "AdvStar", "Attr", "Skills", "Energy", "State", "Exp", "Awake", "IsLock", "ResetAt", "TroopId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.HerosNtf), global::Cspb.HerosNtf.Parser, new[]{ "Heros" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.MarchsNtf), global::Cspb.MarchsNtf.Parser, new[]{ "Marchs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.DelMarchNtf), global::Cspb.DelMarchNtf.Parser, new[]{ "MarchIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.TilesNtf), global::Cspb.TilesNtf.Parser, new[]{ "Tiles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.KickoutNtf), global::Cspb.KickoutNtf.Parser, new[]{ "Reason" }, null, new[]{ typeof(global::Cspb.KickoutNtf.Types.Reason) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.DelHerosNtf), global::Cspb.DelHerosNtf.Parser, new[]{ "HeroRids" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.FEnergy), global::Cspb.FEnergy.Parser, new[]{ "Energy", "LastT" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.FState), global::Cspb.FState.Parser, new[]{ "HurtT" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.FConscript), global::Cspb.FConscript.Parser, new[]{ "EndT", "Cnt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.Fighter), global::Cspb.Fighter.Parser, new[]{ "HeroRid", "CurHp", "Pos", "Energy", "State", "Conscript", "HeroId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.TileAction), global::Cspb.TileAction.Parser, new[]{ "ActionType", "StartPos", "DestPos", "CurActionFinishAt", "MaxActionCnt", "SurActionCnt", "StartAt", "MarchId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.TroopNtf), global::Cspb.TroopNtf.Parser, new[]{ "TroopId", "Fighters", "State", "Action", "LocalCityPos", "BelongCityPos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.DelTroopNtf), global::Cspb.DelTroopNtf.Parser, new[]{ "TroopId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.Skill), global::Cspb.Skill.Parser, new[]{ "SkillId", "Rprogress", "Heros" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.SkillsNtf), global::Cspb.SkillsNtf.Parser, new[]{ "Skills" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.SkillExpNtf), global::Cspb.SkillExpNtf.Parser, new[]{ "SkillExp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.BRFighterBrief), global::Cspb.BRFighterBrief.Parser, new[]{ "HeroId", "Pos", "Lv", "CurHp", "MaxHp", "HeroRid", "AdvStar", "Awake", "Skills", "Exp", "ArmType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.BRTroopBrief), global::Cspb.BRTroopBrief.Parser, new[]{ "PlayerName", "Fighters", "IsNpc", "UnionName", "NpcTroop" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.BReportNtf), global::Cspb.BReportNtf.Parser, new[]{ "ReportId", "Pos", "IsAttacker", "Result", "Attacker", "Defender", "Time", "BattleId", "IsOccupy", "DetailReportId", "DstType", "ExpGet", "Awards", "Supply", "SubDurable", "LeftDurable", "UexpGet", "HasNewEnemy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.Land), global::Cspb.Land.Parser, new[]{ "Pos", "EType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.LandListNtf), global::Cspb.LandListNtf.Parser, new[]{ "Lands" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.Resource), global::Cspb.Resource.Parser, new[]{ "Id", "Res", "Produce", "Max", "RefreshAt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.ResourceNtf), global::Cspb.ResourceNtf.Parser, new[]{ "Resources", "Diamond", "Coin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.DSkillInfo), global::Cspb.DSkillInfo.Parser, new[]{ "Id", "Lv" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.DFighterInfo), global::Cspb.DFighterInfo.Parser, new[]{ "HeroId", "Pos", "CurHp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.BRSkill), global::Cspb.BRSkill.Parser, new[]{ "Id", "Lv" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.BRFighter), global::Cspb.BRFighter.Parser, new[]{ "Id", "HeroId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.BattleReport), global::Cspb.BattleReport.Parser, new[]{ "OccurTime", "Fighters", "TxtReport" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.BReportDetailNtf), global::Cspb.BReportDetailNtf.Parser, new[]{ "ReportId", "Report" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.PowerRankItem), global::Cspb.PowerRankItem.Parser, new[]{ "Id", "Name", "Power", "Place", "Area" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.MailAddr), global::Cspb.MailAddr.Parser, new[]{ "Name", "AddrType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.MailContent), global::Cspb.MailContent.Parser, new[]{ "SenderId", "SenderName", "SenderTitle", "ContentType", "ContentVal", "TitleId", "ContentId", "Replaces" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.MailDetail), global::Cspb.MailDetail.Parser, new[]{ "MailId", "From", "To", "MailType", "CreatedAt", "Title", "Content", "Attachments", "Status", "BoxId", "RelationId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.MailListNtf), global::Cspb.MailListNtf.Parser, new[]{ "RefreshType", "Mails" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.MailAwardsNtf), global::Cspb.MailAwardsNtf.Parser, new[]{ "MailId", "Awards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.MailBoxInfo), global::Cspb.MailBoxInfo.Parser, new[]{ "BoxId", "Unread", "Total" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.MailBoxNtf), global::Cspb.MailBoxNtf.Parser, new[]{ "Boxes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.ChatMessage), global::Cspb.ChatMessage.Parser, new[]{ "Channel", "From", "Message", "Attachment", "CreatedAt", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.ChatNtf), global::Cspb.ChatNtf.Parser, new[]{ "RefreshType", "Msg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.CollectLandsNtf), global::Cspb.CollectLandsNtf.Parser, new[]{ "Lands" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.Item), global::Cspb.Item.Parser, new[]{ "Typ", "Id", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.GachaAward), global::Cspb.GachaAward.Parser, new[]{ "ExpectAward", "Rid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.GachaPrice), global::Cspb.GachaPrice.Parser, new[]{ "Id", "Price", "NextPrice", "FreeCount", "GachaCount", "NextFreeTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.GachaBag), global::Cspb.GachaBag.Parser, new[]{ "Id", "PackageId", "Count", "DisappearTime", "Prices", "Awards", "Active", "Level", "TotalCount", "Daily", "NextSurprise" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.Task), global::Cspb.Task.Parser, new[]{ "Id", "Type", "Finid", "Fintype", "Fincnt", "Count", "Award", "State", "Chapterid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.TasksNtf), global::Cspb.TasksNtf.Parser, new[]{ "AddTasks", "SubTasks", "RefTasks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.MarketItem), global::Cspb.MarketItem.Parser, new[]{ "Id", "Goods", "Price", "Discount", "Sold" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.Market), global::Cspb.Market.Parser, new[]{ "Id", "FreshCost", "Market_", "Lasttime", "Cd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.MarketsNtf), global::Cspb.MarketsNtf.Parser, new[]{ "Markets" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.TaxNtf), global::Cspb.TaxNtf.Parser, new[]{ "Tax", "NpcTax", "TaxValue", "TaxTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.GuardianTroopNtf), global::Cspb.GuardianTroopNtf.Parser, new[]{ "Fighters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.AwardNtf), global::Cspb.AwardNtf.Parser, new[]{ "Awards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.BattleAwardNtf), global::Cspb.BattleAwardNtf.Parser, new[]{ "Awards", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.Vision), global::Cspb.Vision.Parser, new[]{ "Center", "Radius", "Op" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.VisionsNtf), global::Cspb.VisionsNtf.Parser, new[]{ "Visions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.ApplyUnion), global::Cspb.ApplyUnion.Parser, new[]{ "UnionId", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.UnionInvite), global::Cspb.UnionInvite.Parser, new[]{ "UnionId", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.PlayerUnion), global::Cspb.PlayerUnion.Parser, new[]{ "UnionId", "TitleId", "LastQuitAt", "Applies", "Invites", "Relations", "Marks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.PlayerUnionNtf), global::Cspb.PlayerUnionNtf.Parser, new[]{ "Union" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.FallenInfo), global::Cspb.FallenInfo.Parser, new[]{ "UnionId", "Time", "RevoltRes", "RevoltResMax", "FallenId", "FallenName", "FallenUnion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.SlaveInfo), global::Cspb.SlaveInfo.Parser, new[]{ "SlaveId", "SlaveName", "SlaveUnion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.UnionDemise), global::Cspb.UnionDemise.Parser, new[]{ "TargetId", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.UnionFlag), global::Cspb.UnionFlag.Parser, new[]{ "Color", "Shape", "Pattern", "Horn" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.UnionPlayer), global::Cspb.UnionPlayer.Parser, new[]{ "PlayerId", "AvatarId", "Name", "TitleId", "Power", "Area", "Pos", "Contribution", "Glory" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.ApplyPlayer), global::Cspb.ApplyPlayer.Parser, new[]{ "PlayerId", "Name", "Time", "Power", "Pos", "Area" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.UnionRelation), global::Cspb.UnionRelation.Parser, new[]{ "UnionId", "RelationType", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.UnionMark), global::Cspb.UnionMark.Parser, new[]{ "Pos", "Name", "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.UnionCity), global::Cspb.UnionCity.Parser, new[]{ "Pos", "Name", "Level", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.UnionLog), global::Cspb.UnionLog.Parser, new[]{ "Type", "SubType", "Time", "Subject", "Object1", "Object2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.UnionResProAbs), global::Cspb.UnionResProAbs.Parser, new[]{ "ResId", "AbsValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.UnionResProPct), global::Cspb.UnionResProPct.Parser, new[]{ "ResId", "PctValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.Union), global::Cspb.Union.Parser, new[]{ "UnionId", "UnionName", "NickName", "Area", "Pos", "Level", "Exp", "Power", "CityNum", "Num", "MaxNum", "ResAbs", "ResPct", "ApplyLimit", "Language", "Desc", "Flag", "Demise", "Leader", "HasDetail", "Applies", "Members", "Relations", "Marks", "Cities", "Logs", "DissolveAt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.UnionInfo), global::Cspb.UnionInfo.Parser, new[]{ "Union", "Distance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.UnionNtf), global::Cspb.UnionNtf.Parser, new[]{ "Unions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.UnionRelationBroadcastNtf), global::Cspb.UnionRelationBroadcastNtf.Parser, new[]{ "UnionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.UnionPlayerBroadcastNtf), global::Cspb.UnionPlayerBroadcastNtf.Parser, new[]{ "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.UnionFallenBroadcastNtf), global::Cspb.UnionFallenBroadcastNtf.Parser, new[]{ "UnionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.LandBasic), global::Cspb.LandBasic.Parser, new[]{ "Pos", "EntityType", "Durable", "GiveupEndat", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.LandsBasicNtf), global::Cspb.LandsBasicNtf.Parser, new[]{ "LandBasic" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.Conflict), global::Cspb.Conflict.Parser, new[]{ "Typ", "Dmg", "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.NpcCityBrief), global::Cspb.NpcCityBrief.Parser, new[]{ "Pos", "UnionId", "CurDurable", "MaxDurable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.FallenNoticeNtf), global::Cspb.FallenNoticeNtf.Parser, new[]{ "FallenId", "FallenName", "FallenUnion", "FallenbyId", "FallenbyName", "FallenbyUnion", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.FallenInfoNtf), global::Cspb.FallenInfoNtf.Parser, new[]{ "UnionId", "Time", "RevoltRes", "RevoltMaxRes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.DrillTile), global::Cspb.DrillTile.Parser, new[]{ "Pos", "AtkCost", "AtkNumber", "AtkHp", "Durable", "MaxDurable", "IsEnd", "IsFortress", "DefTroops", "Awards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.DrillPassCount), global::Cspb.DrillPassCount.Parser, new[]{ "DrillId", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.DrillBReportNtf), global::Cspb.DrillBReportNtf.Parser, new[]{ "ReportId", "Pos", "IsAttacker", "Result", "Attacker", "Defender", "Time", "BattleId", "IsOccupy", "DetailReportId", "DstType", "ExpGet", "Awards", "Supply", "SubDurable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.AffairNtf), global::Cspb.AffairNtf.Parser, new[]{ "MoveCityAt", "Invincible" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.InvincibleInfo), global::Cspb.InvincibleInfo.Parser, new[]{ "State", "EndAt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.RobberNtf), global::Cspb.RobberNtf.Parser, new[]{ "Pos", "RefreshTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.RemoveRobberNtf), global::Cspb.RemoveRobberNtf.Parser, new[]{ "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.Tutorial), global::Cspb.Tutorial.Parser, new[]{ "Finshed", "Log" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.EpicInfo), global::Cspb.EpicInfo.Parser, new[]{ "Id", "State", "Cur", "CurArry", "EndAt", "PlayerState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.EpicNtf), global::Cspb.EpicNtf.Parser, new[]{ "Epic" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.EpicUnionInfo), global::Cspb.EpicUnionInfo.Parser, new[]{ "UnionId", "UnionName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.PersonBoard), global::Cspb.PersonBoard.Parser, new[]{ "Name", "PlayerId", "StateId", "SubCityCount", "LandCount", "PowerValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.UnionBoard), global::Cspb.UnionBoard.Parser, new[]{ "Name", "UnionId", "Level", "StateId", "MemberCount", "CityCount", "PowerValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.NpcCityInfoNtf), global::Cspb.NpcCityInfoNtf.Parser, new[]{ "CityOccupy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.NpcCityOccupy), global::Cspb.NpcCityOccupy.Parser, new[]{ "CityId", "UnionId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// 大地图格子上的各类实体简要信息
  /// 主城/分城
  /// </summary>
  public sealed partial class EPCityBrief : pb::IMessage<EPCityBrief> {
    private static readonly pb::MessageParser<EPCityBrief> _parser = new pb::MessageParser<EPCityBrief>(() => new EPCityBrief());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EPCityBrief> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EPCityBrief() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EPCityBrief(EPCityBrief other) : this() {
      playerId_ = other.playerId_;
      cityName_ = other.cityName_;
      state_ = other.state_;
      isInvincible_ = other.isInvincible_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EPCityBrief Clone() {
      return new EPCityBrief(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    /// <summary>
    /// 主城所属玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "city_name" field.</summary>
    public const int CityNameFieldNumber = 2;
    private string cityName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CityName {
      get { return cityName_; }
      set {
        cityName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private global::Cspb.CITY_STATE state_ = 0;
    /// <summary>
    /// 城池状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.CITY_STATE State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "isInvincible" field.</summary>
    public const int IsInvincibleFieldNumber = 4;
    private bool isInvincible_;
    /// <summary>
    /// 坚守状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInvincible {
      get { return isInvincible_; }
      set {
        isInvincible_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EPCityBrief);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EPCityBrief other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (CityName != other.CityName) return false;
      if (State != other.State) return false;
      if (IsInvincible != other.IsInvincible) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (CityName.Length != 0) hash ^= CityName.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (IsInvincible != false) hash ^= IsInvincible.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (CityName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CityName);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) State);
      }
      if (IsInvincible != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsInvincible);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (CityName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CityName);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (IsInvincible != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EPCityBrief other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.CityName.Length != 0) {
        CityName = other.CityName;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.IsInvincible != false) {
        IsInvincible = other.IsInvincible;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 18: {
            CityName = input.ReadString();
            break;
          }
          case 24: {
            state_ = (global::Cspb.CITY_STATE) input.ReadEnum();
            break;
          }
          case 32: {
            IsInvincible = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EPCityInfo : pb::IMessage<EPCityInfo> {
    private static readonly pb::MessageParser<EPCityInfo> _parser = new pb::MessageParser<EPCityInfo>(() => new EPCityInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EPCityInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EPCityInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EPCityInfo(EPCityInfo other) : this() {
      Owner = other.owner_ != null ? other.Owner.Clone() : null;
      cityName_ = other.cityName_;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EPCityInfo Clone() {
      return new EPCityInfo(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::Cspb.MapPlayerInfo owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.MapPlayerInfo Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "city_name" field.</summary>
    public const int CityNameFieldNumber = 2;
    private string cityName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CityName {
      get { return cityName_; }
      set {
        cityName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private global::Cspb.CITY_STATE state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.CITY_STATE State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EPCityInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EPCityInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Owner, other.Owner)) return false;
      if (CityName != other.CityName) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (CityName.Length != 0) hash ^= CityName.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (owner_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Owner);
      }
      if (CityName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CityName);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (CityName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CityName);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EPCityInfo other) {
      if (other == null) {
        return;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          owner_ = new global::Cspb.MapPlayerInfo();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.CityName.Length != 0) {
        CityName = other.CityName;
      }
      if (other.State != 0) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (owner_ == null) {
              owner_ = new global::Cspb.MapPlayerInfo();
            }
            input.ReadMessage(owner_);
            break;
          }
          case 18: {
            CityName = input.ReadString();
            break;
          }
          case 24: {
            state_ = (global::Cspb.CITY_STATE) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 主城/分城城区
  /// </summary>
  public sealed partial class EPCityDstBrief : pb::IMessage<EPCityDstBrief> {
    private static readonly pb::MessageParser<EPCityDstBrief> _parser = new pb::MessageParser<EPCityDstBrief>(() => new EPCityDstBrief());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EPCityDstBrief> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EPCityDstBrief() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EPCityDstBrief(EPCityDstBrief other) : this() {
      playerId_ = other.playerId_;
      center_ = other.center_;
      cityName_ = other.cityName_;
      isInvincible_ = other.isInvincible_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EPCityDstBrief Clone() {
      return new EPCityDstBrief(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "center" field.</summary>
    public const int CenterFieldNumber = 2;
    private int center_;
    /// <summary>
    /// 中心点位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Center {
      get { return center_; }
      set {
        center_ = value;
      }
    }

    /// <summary>Field number for the "city_name" field.</summary>
    public const int CityNameFieldNumber = 3;
    private string cityName_ = "";
    /// <summary>
    /// 城池名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CityName {
      get { return cityName_; }
      set {
        cityName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isInvincible" field.</summary>
    public const int IsInvincibleFieldNumber = 4;
    private bool isInvincible_;
    /// <summary>
    /// 坚守状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInvincible {
      get { return isInvincible_; }
      set {
        isInvincible_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EPCityDstBrief);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EPCityDstBrief other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Center != other.Center) return false;
      if (CityName != other.CityName) return false;
      if (IsInvincible != other.IsInvincible) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (Center != 0) hash ^= Center.GetHashCode();
      if (CityName.Length != 0) hash ^= CityName.GetHashCode();
      if (IsInvincible != false) hash ^= IsInvincible.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (Center != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Center);
      }
      if (CityName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CityName);
      }
      if (IsInvincible != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsInvincible);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (Center != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Center);
      }
      if (CityName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CityName);
      }
      if (IsInvincible != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EPCityDstBrief other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.Center != 0) {
        Center = other.Center;
      }
      if (other.CityName.Length != 0) {
        CityName = other.CityName;
      }
      if (other.IsInvincible != false) {
        IsInvincible = other.IsInvincible;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 16: {
            Center = input.ReadInt32();
            break;
          }
          case 26: {
            CityName = input.ReadString();
            break;
          }
          case 32: {
            IsInvincible = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EPCityDstInfo : pb::IMessage<EPCityDstInfo> {
    private static readonly pb::MessageParser<EPCityDstInfo> _parser = new pb::MessageParser<EPCityDstInfo>(() => new EPCityDstInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EPCityDstInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EPCityDstInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EPCityDstInfo(EPCityDstInfo other) : this() {
      Owner = other.owner_ != null ? other.Owner.Clone() : null;
      cityName_ = other.cityName_;
      center_ = other.center_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EPCityDstInfo Clone() {
      return new EPCityDstInfo(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::Cspb.MapPlayerInfo owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.MapPlayerInfo Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "city_name" field.</summary>
    public const int CityNameFieldNumber = 2;
    private string cityName_ = "";
    /// <summary>
    /// 城池名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CityName {
      get { return cityName_; }
      set {
        cityName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "center" field.</summary>
    public const int CenterFieldNumber = 3;
    private int center_;
    /// <summary>
    /// 中心点位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Center {
      get { return center_; }
      set {
        center_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EPCityDstInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EPCityDstInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Owner, other.Owner)) return false;
      if (CityName != other.CityName) return false;
      if (Center != other.Center) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (CityName.Length != 0) hash ^= CityName.GetHashCode();
      if (Center != 0) hash ^= Center.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (owner_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Owner);
      }
      if (CityName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CityName);
      }
      if (Center != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Center);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (CityName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CityName);
      }
      if (Center != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Center);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EPCityDstInfo other) {
      if (other == null) {
        return;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          owner_ = new global::Cspb.MapPlayerInfo();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.CityName.Length != 0) {
        CityName = other.CityName;
      }
      if (other.Center != 0) {
        Center = other.Center;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (owner_ == null) {
              owner_ = new global::Cspb.MapPlayerInfo();
            }
            input.ReadMessage(owner_);
            break;
          }
          case 18: {
            CityName = input.ReadString();
            break;
          }
          case 24: {
            Center = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 要塞
  /// </summary>
  public sealed partial class EFortressBrief : pb::IMessage<EFortressBrief> {
    private static readonly pb::MessageParser<EFortressBrief> _parser = new pb::MessageParser<EFortressBrief>(() => new EFortressBrief());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EFortressBrief> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EFortressBrief() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EFortressBrief(EFortressBrief other) : this() {
      playerId_ = other.playerId_;
      cityName_ = other.cityName_;
      state_ = other.state_;
      isInvincible_ = other.isInvincible_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EFortressBrief Clone() {
      return new EFortressBrief(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    /// <summary>
    /// 分城城所属玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "city_name" field.</summary>
    public const int CityNameFieldNumber = 2;
    private string cityName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CityName {
      get { return cityName_; }
      set {
        cityName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private global::Cspb.CITY_STATE state_ = 0;
    /// <summary>
    /// 城池状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.CITY_STATE State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "isInvincible" field.</summary>
    public const int IsInvincibleFieldNumber = 4;
    private bool isInvincible_;
    /// <summary>
    /// 坚守状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInvincible {
      get { return isInvincible_; }
      set {
        isInvincible_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EFortressBrief);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EFortressBrief other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (CityName != other.CityName) return false;
      if (State != other.State) return false;
      if (IsInvincible != other.IsInvincible) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (CityName.Length != 0) hash ^= CityName.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (IsInvincible != false) hash ^= IsInvincible.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (CityName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CityName);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) State);
      }
      if (IsInvincible != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsInvincible);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (CityName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CityName);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (IsInvincible != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EFortressBrief other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.CityName.Length != 0) {
        CityName = other.CityName;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.IsInvincible != false) {
        IsInvincible = other.IsInvincible;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 18: {
            CityName = input.ReadString();
            break;
          }
          case 24: {
            state_ = (global::Cspb.CITY_STATE) input.ReadEnum();
            break;
          }
          case 32: {
            IsInvincible = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EFortressInfo : pb::IMessage<EFortressInfo> {
    private static readonly pb::MessageParser<EFortressInfo> _parser = new pb::MessageParser<EFortressInfo>(() => new EFortressInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EFortressInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EFortressInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EFortressInfo(EFortressInfo other) : this() {
      Owner = other.owner_ != null ? other.Owner.Clone() : null;
      cityName_ = other.cityName_;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EFortressInfo Clone() {
      return new EFortressInfo(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::Cspb.MapPlayerInfo owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.MapPlayerInfo Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "city_name" field.</summary>
    public const int CityNameFieldNumber = 2;
    private string cityName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CityName {
      get { return cityName_; }
      set {
        cityName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private global::Cspb.CITY_STATE state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.CITY_STATE State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EFortressInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EFortressInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Owner, other.Owner)) return false;
      if (CityName != other.CityName) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (CityName.Length != 0) hash ^= CityName.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (owner_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Owner);
      }
      if (CityName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CityName);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (CityName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CityName);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EFortressInfo other) {
      if (other == null) {
        return;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          owner_ = new global::Cspb.MapPlayerInfo();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.CityName.Length != 0) {
        CityName = other.CityName;
      }
      if (other.State != 0) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (owner_ == null) {
              owner_ = new global::Cspb.MapPlayerInfo();
            }
            input.ReadMessage(owner_);
            break;
          }
          case 18: {
            CityName = input.ReadString();
            break;
          }
          case 24: {
            state_ = (global::Cspb.CITY_STATE) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// npc城池
  /// </summary>
  public sealed partial class ENCityBrief : pb::IMessage<ENCityBrief> {
    private static readonly pb::MessageParser<ENCityBrief> _parser = new pb::MessageParser<ENCityBrief>(() => new ENCityBrief());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ENCityBrief> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ENCityBrief() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ENCityBrief(ENCityBrief other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ENCityBrief Clone() {
      return new ENCityBrief(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ENCityBrief);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ENCityBrief other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ENCityBrief other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ENCityInfo : pb::IMessage<ENCityInfo> {
    private static readonly pb::MessageParser<ENCityInfo> _parser = new pb::MessageParser<ENCityInfo>(() => new ENCityInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ENCityInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ENCityInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ENCityInfo(ENCityInfo other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ENCityInfo Clone() {
      return new ENCityInfo(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ENCityInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ENCityInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ENCityInfo other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class MapPlayerInfo : pb::IMessage<MapPlayerInfo> {
    private static readonly pb::MessageParser<MapPlayerInfo> _parser = new pb::MessageParser<MapPlayerInfo>(() => new MapPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapPlayerInfo(MapPlayerInfo other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      power_ = other.power_;
      intro_ = other.intro_;
      presitge_ = other.presitge_;
      unionName_ = other.unionName_;
      nickName_ = other.nickName_;
      avatarId_ = other.avatarId_;
      UnionFlag = other.unionFlag_ != null ? other.UnionFlag.Clone() : null;
      unionId_ = other.unionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapPlayerInfo Clone() {
      return new MapPlayerInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 3;
    private int power_;
    /// <summary>
    /// 势力值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "intro" field.</summary>
    public const int IntroFieldNumber = 4;
    private string intro_ = "";
    /// <summary>
    /// 个人描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Intro {
      get { return intro_; }
      set {
        intro_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "presitge" field.</summary>
    public const int PresitgeFieldNumber = 5;
    private int presitge_;
    /// <summary>
    /// 名望值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Presitge {
      get { return presitge_; }
      set {
        presitge_ = value;
      }
    }

    /// <summary>Field number for the "union_name" field.</summary>
    public const int UnionNameFieldNumber = 6;
    private string unionName_ = "";
    /// <summary>
    /// 联盟名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnionName {
      get { return unionName_; }
      set {
        unionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nick_name" field.</summary>
    public const int NickNameFieldNumber = 7;
    private string nickName_ = "";
    /// <summary>
    /// 联盟简称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_id" field.</summary>
    public const int AvatarIdFieldNumber = 8;
    private int avatarId_;
    /// <summary>
    /// 个人头像id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvatarId {
      get { return avatarId_; }
      set {
        avatarId_ = value;
      }
    }

    /// <summary>Field number for the "union_flag" field.</summary>
    public const int UnionFlagFieldNumber = 9;
    private global::Cspb.UnionFlag unionFlag_;
    /// <summary>
    /// 联盟旗帜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.UnionFlag UnionFlag {
      get { return unionFlag_; }
      set {
        unionFlag_ = value;
      }
    }

    /// <summary>Field number for the "union_id" field.</summary>
    public const int UnionIdFieldNumber = 10;
    private long unionId_;
    /// <summary>
    /// 联盟ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Power != other.Power) return false;
      if (Intro != other.Intro) return false;
      if (Presitge != other.Presitge) return false;
      if (UnionName != other.UnionName) return false;
      if (NickName != other.NickName) return false;
      if (AvatarId != other.AvatarId) return false;
      if (!object.Equals(UnionFlag, other.UnionFlag)) return false;
      if (UnionId != other.UnionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      if (Intro.Length != 0) hash ^= Intro.GetHashCode();
      if (Presitge != 0) hash ^= Presitge.GetHashCode();
      if (UnionName.Length != 0) hash ^= UnionName.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (AvatarId != 0) hash ^= AvatarId.GetHashCode();
      if (unionFlag_ != null) hash ^= UnionFlag.GetHashCode();
      if (UnionId != 0L) hash ^= UnionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Power != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Power);
      }
      if (Intro.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Intro);
      }
      if (Presitge != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Presitge);
      }
      if (UnionName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(UnionName);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(NickName);
      }
      if (AvatarId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(AvatarId);
      }
      if (unionFlag_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(UnionFlag);
      }
      if (UnionId != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(UnionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (Intro.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Intro);
      }
      if (Presitge != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Presitge);
      }
      if (UnionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnionName);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (AvatarId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvatarId);
      }
      if (unionFlag_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnionFlag);
      }
      if (UnionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.Intro.Length != 0) {
        Intro = other.Intro;
      }
      if (other.Presitge != 0) {
        Presitge = other.Presitge;
      }
      if (other.UnionName.Length != 0) {
        UnionName = other.UnionName;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      if (other.AvatarId != 0) {
        AvatarId = other.AvatarId;
      }
      if (other.unionFlag_ != null) {
        if (unionFlag_ == null) {
          unionFlag_ = new global::Cspb.UnionFlag();
        }
        UnionFlag.MergeFrom(other.UnionFlag);
      }
      if (other.UnionId != 0L) {
        UnionId = other.UnionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Power = input.ReadInt32();
            break;
          }
          case 34: {
            Intro = input.ReadString();
            break;
          }
          case 40: {
            Presitge = input.ReadInt32();
            break;
          }
          case 50: {
            UnionName = input.ReadString();
            break;
          }
          case 58: {
            NickName = input.ReadString();
            break;
          }
          case 64: {
            AvatarId = input.ReadInt32();
            break;
          }
          case 74: {
            if (unionFlag_ == null) {
              unionFlag_ = new global::Cspb.UnionFlag();
            }
            input.ReadMessage(unionFlag_);
            break;
          }
          case 80: {
            UnionId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 临时驻扎信息（部队移动到土地发生某些行为）
  /// </summary>
  public sealed partial class StationBrief : pb::IMessage<StationBrief> {
    private static readonly pb::MessageParser<StationBrief> _parser = new pb::MessageParser<StationBrief>(() => new StationBrief());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StationBrief> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationBrief() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationBrief(StationBrief other) : this() {
      actionType_ = other.actionType_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationBrief Clone() {
      return new StationBrief(this);
    }

    /// <summary>Field number for the "action_type" field.</summary>
    public const int ActionTypeFieldNumber = 1;
    private global::Cspb.TILE_ACTION_TYPE actionType_ = 0;
    /// <summary>
    /// 行动类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.TILE_ACTION_TYPE ActionType {
      get { return actionType_; }
      set {
        actionType_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StationBrief);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StationBrief other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActionType != other.ActionType) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActionType != 0) hash ^= ActionType.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActionType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ActionType);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionType);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StationBrief other) {
      if (other == null) {
        return;
      }
      if (other.ActionType != 0) {
        ActionType = other.ActionType;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            actionType_ = (global::Cspb.TILE_ACTION_TYPE) input.ReadEnum();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StationInfo : pb::IMessage<StationInfo> {
    private static readonly pb::MessageParser<StationInfo> _parser = new pb::MessageParser<StationInfo>(() => new StationInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StationInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationInfo(StationInfo other) : this() {
      Player = other.player_ != null ? other.Player.Clone() : null;
      troopId_ = other.troopId_;
      actionType_ = other.actionType_;
      arivedAt_ = other.arivedAt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationInfo Clone() {
      return new StationInfo(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private global::Cspb.MapPlayerInfo player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.MapPlayerInfo Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "troop_id" field.</summary>
    public const int TroopIdFieldNumber = 2;
    private long troopId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TroopId {
      get { return troopId_; }
      set {
        troopId_ = value;
      }
    }

    /// <summary>Field number for the "action_type" field.</summary>
    public const int ActionTypeFieldNumber = 3;
    private global::Cspb.TILE_ACTION_TYPE actionType_ = 0;
    /// <summary>
    /// 行动类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.TILE_ACTION_TYPE ActionType {
      get { return actionType_; }
      set {
        actionType_ = value;
      }
    }

    /// <summary>Field number for the "arived_at" field.</summary>
    public const int ArivedAtFieldNumber = 4;
    private long arivedAt_;
    /// <summary>
    /// 部队到达时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ArivedAt {
      get { return arivedAt_; }
      set {
        arivedAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StationInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StationInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Player, other.Player)) return false;
      if (TroopId != other.TroopId) return false;
      if (ActionType != other.ActionType) return false;
      if (ArivedAt != other.ArivedAt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (player_ != null) hash ^= Player.GetHashCode();
      if (TroopId != 0L) hash ^= TroopId.GetHashCode();
      if (ActionType != 0) hash ^= ActionType.GetHashCode();
      if (ArivedAt != 0L) hash ^= ArivedAt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (player_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Player);
      }
      if (TroopId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TroopId);
      }
      if (ActionType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ActionType);
      }
      if (ArivedAt != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ArivedAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (TroopId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TroopId);
      }
      if (ActionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionType);
      }
      if (ArivedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ArivedAt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StationInfo other) {
      if (other == null) {
        return;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          player_ = new global::Cspb.MapPlayerInfo();
        }
        Player.MergeFrom(other.Player);
      }
      if (other.TroopId != 0L) {
        TroopId = other.TroopId;
      }
      if (other.ActionType != 0) {
        ActionType = other.ActionType;
      }
      if (other.ArivedAt != 0L) {
        ArivedAt = other.ArivedAt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (player_ == null) {
              player_ = new global::Cspb.MapPlayerInfo();
            }
            input.ReadMessage(player_);
            break;
          }
          case 16: {
            TroopId = input.ReadInt64();
            break;
          }
          case 24: {
            actionType_ = (global::Cspb.TILE_ACTION_TYPE) input.ReadEnum();
            break;
          }
          case 32: {
            ArivedAt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NpcInfo : pb::IMessage<NpcInfo> {
    private static readonly pb::MessageParser<NpcInfo> _parser = new pb::MessageParser<NpcInfo>(() => new NpcInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NpcInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcInfo(NpcInfo other) : this() {
      battleStart_ = other.battleStart_;
      leftTroopCount_ = other.leftTroopCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcInfo Clone() {
      return new NpcInfo(this);
    }

    /// <summary>Field number for the "battle_start" field.</summary>
    public const int BattleStartFieldNumber = 1;
    private long battleStart_;
    /// <summary>
    /// npc触战时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BattleStart {
      get { return battleStart_; }
      set {
        battleStart_ = value;
      }
    }

    /// <summary>Field number for the "left_troop_count" field.</summary>
    public const int LeftTroopCountFieldNumber = 2;
    private int leftTroopCount_;
    /// <summary>
    /// 剩余npc队伍数量, -1 表示不需要显示剩余npc队伍数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftTroopCount {
      get { return leftTroopCount_; }
      set {
        leftTroopCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NpcInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NpcInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleStart != other.BattleStart) return false;
      if (LeftTroopCount != other.LeftTroopCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleStart != 0L) hash ^= BattleStart.GetHashCode();
      if (LeftTroopCount != 0) hash ^= LeftTroopCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleStart != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(BattleStart);
      }
      if (LeftTroopCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LeftTroopCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleStart != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BattleStart);
      }
      if (LeftTroopCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftTroopCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NpcInfo other) {
      if (other == null) {
        return;
      }
      if (other.BattleStart != 0L) {
        BattleStart = other.BattleStart;
      }
      if (other.LeftTroopCount != 0) {
        LeftTroopCount = other.LeftTroopCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleStart = input.ReadInt64();
            break;
          }
          case 16: {
            LeftTroopCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 占领信息
  /// </summary>
  public sealed partial class OccupyBrief : pb::IMessage<OccupyBrief> {
    private static readonly pb::MessageParser<OccupyBrief> _parser = new pb::MessageParser<OccupyBrief>(() => new OccupyBrief());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OccupyBrief> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OccupyBrief() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OccupyBrief(OccupyBrief other) : this() {
      ownerId_ = other.ownerId_;
      giveupAt_ = other.giveupAt_;
      protectUntil_ = other.protectUntil_;
      unionId_ = other.unionId_;
      fallenBy_ = other.fallenBy_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OccupyBrief Clone() {
      return new OccupyBrief(this);
    }

    /// <summary>Field number for the "owner_id" field.</summary>
    public const int OwnerIdFieldNumber = 1;
    private long ownerId_;
    /// <summary>
    /// 占领者ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OwnerId {
      get { return ownerId_; }
      set {
        ownerId_ = value;
      }
    }

    /// <summary>Field number for the "giveup_at" field.</summary>
    public const int GiveupAtFieldNumber = 2;
    private long giveupAt_;
    /// <summary>
    /// 放弃土地结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GiveupAt {
      get { return giveupAt_; }
      set {
        giveupAt_ = value;
      }
    }

    /// <summary>Field number for the "protect_until" field.</summary>
    public const int ProtectUntilFieldNumber = 3;
    private long protectUntil_;
    /// <summary>
    /// 免战期结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProtectUntil {
      get { return protectUntil_; }
      set {
        protectUntil_ = value;
      }
    }

    /// <summary>Field number for the "union_id" field.</summary>
    public const int UnionIdFieldNumber = 4;
    private long unionId_;
    /// <summary>
    /// 占领者联盟id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    /// <summary>Field number for the "fallen_by" field.</summary>
    public const int FallenByFieldNumber = 5;
    private long fallenBy_;
    /// <summary>
    /// 被沦陷的联盟Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FallenBy {
      get { return fallenBy_; }
      set {
        fallenBy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OccupyBrief);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OccupyBrief other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OwnerId != other.OwnerId) return false;
      if (GiveupAt != other.GiveupAt) return false;
      if (ProtectUntil != other.ProtectUntil) return false;
      if (UnionId != other.UnionId) return false;
      if (FallenBy != other.FallenBy) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OwnerId != 0L) hash ^= OwnerId.GetHashCode();
      if (GiveupAt != 0L) hash ^= GiveupAt.GetHashCode();
      if (ProtectUntil != 0L) hash ^= ProtectUntil.GetHashCode();
      if (UnionId != 0L) hash ^= UnionId.GetHashCode();
      if (FallenBy != 0L) hash ^= FallenBy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OwnerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(OwnerId);
      }
      if (GiveupAt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(GiveupAt);
      }
      if (ProtectUntil != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ProtectUntil);
      }
      if (UnionId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UnionId);
      }
      if (FallenBy != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(FallenBy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OwnerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OwnerId);
      }
      if (GiveupAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GiveupAt);
      }
      if (ProtectUntil != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProtectUntil);
      }
      if (UnionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnionId);
      }
      if (FallenBy != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FallenBy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OccupyBrief other) {
      if (other == null) {
        return;
      }
      if (other.OwnerId != 0L) {
        OwnerId = other.OwnerId;
      }
      if (other.GiveupAt != 0L) {
        GiveupAt = other.GiveupAt;
      }
      if (other.ProtectUntil != 0L) {
        ProtectUntil = other.ProtectUntil;
      }
      if (other.UnionId != 0L) {
        UnionId = other.UnionId;
      }
      if (other.FallenBy != 0L) {
        FallenBy = other.FallenBy;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OwnerId = input.ReadInt64();
            break;
          }
          case 16: {
            GiveupAt = input.ReadInt64();
            break;
          }
          case 24: {
            ProtectUntil = input.ReadInt64();
            break;
          }
          case 32: {
            UnionId = input.ReadInt64();
            break;
          }
          case 40: {
            FallenBy = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OccupyInfo : pb::IMessage<OccupyInfo> {
    private static readonly pb::MessageParser<OccupyInfo> _parser = new pb::MessageParser<OccupyInfo>(() => new OccupyInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OccupyInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OccupyInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OccupyInfo(OccupyInfo other) : this() {
      Owner = other.owner_ != null ? other.Owner.Clone() : null;
      unionOwnerName_ = other.unionOwnerName_;
      ownerType_ = other.ownerType_;
      protectUntil_ = other.protectUntil_;
      curDurable_ = other.curDurable_;
      maxDurable_ = other.maxDurable_;
      giveupAt_ = other.giveupAt_;
      refreshAt_ = other.refreshAt_;
      unionId_ = other.unionId_;
      fallenBy_ = other.fallenBy_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OccupyInfo Clone() {
      return new OccupyInfo(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::Cspb.MapPlayerInfo owner_;
    /// <summary>
    /// 占领者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.MapPlayerInfo Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "union_owner_name" field.</summary>
    public const int UnionOwnerNameFieldNumber = 2;
    private string unionOwnerName_ = "";
    /// <summary>
    /// 占领工会
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnionOwnerName {
      get { return unionOwnerName_; }
      set {
        unionOwnerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner_type" field.</summary>
    public const int OwnerTypeFieldNumber = 3;
    private int ownerType_;
    /// <summary>
    /// 占领类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OwnerType {
      get { return ownerType_; }
      set {
        ownerType_ = value;
      }
    }

    /// <summary>Field number for the "protect_until" field.</summary>
    public const int ProtectUntilFieldNumber = 4;
    private long protectUntil_;
    /// <summary>
    /// 免战期结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProtectUntil {
      get { return protectUntil_; }
      set {
        protectUntil_ = value;
      }
    }

    /// <summary>Field number for the "cur_durable" field.</summary>
    public const int CurDurableFieldNumber = 5;
    private int curDurable_;
    /// <summary>
    /// 当前耐久度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurDurable {
      get { return curDurable_; }
      set {
        curDurable_ = value;
      }
    }

    /// <summary>Field number for the "max_durable" field.</summary>
    public const int MaxDurableFieldNumber = 6;
    private int maxDurable_;
    /// <summary>
    /// 最大耐久度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxDurable {
      get { return maxDurable_; }
      set {
        maxDurable_ = value;
      }
    }

    /// <summary>Field number for the "giveup_at" field.</summary>
    public const int GiveupAtFieldNumber = 7;
    private long giveupAt_;
    /// <summary>
    /// 放弃土地结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GiveupAt {
      get { return giveupAt_; }
      set {
        giveupAt_ = value;
      }
    }

    /// <summary>Field number for the "refresh_at" field.</summary>
    public const int RefreshAtFieldNumber = 8;
    private long refreshAt_;
    /// <summary>
    /// 耐久度上一次刷新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RefreshAt {
      get { return refreshAt_; }
      set {
        refreshAt_ = value;
      }
    }

    /// <summary>Field number for the "union_id" field.</summary>
    public const int UnionIdFieldNumber = 20;
    private long unionId_;
    /// <summary>
    /// 占领者联盟id   AI
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    /// <summary>Field number for the "fallen_by" field.</summary>
    public const int FallenByFieldNumber = 21;
    private long fallenBy_;
    /// <summary>
    /// 被沦陷的联盟Id AI
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FallenBy {
      get { return fallenBy_; }
      set {
        fallenBy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OccupyInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OccupyInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Owner, other.Owner)) return false;
      if (UnionOwnerName != other.UnionOwnerName) return false;
      if (OwnerType != other.OwnerType) return false;
      if (ProtectUntil != other.ProtectUntil) return false;
      if (CurDurable != other.CurDurable) return false;
      if (MaxDurable != other.MaxDurable) return false;
      if (GiveupAt != other.GiveupAt) return false;
      if (RefreshAt != other.RefreshAt) return false;
      if (UnionId != other.UnionId) return false;
      if (FallenBy != other.FallenBy) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (UnionOwnerName.Length != 0) hash ^= UnionOwnerName.GetHashCode();
      if (OwnerType != 0) hash ^= OwnerType.GetHashCode();
      if (ProtectUntil != 0L) hash ^= ProtectUntil.GetHashCode();
      if (CurDurable != 0) hash ^= CurDurable.GetHashCode();
      if (MaxDurable != 0) hash ^= MaxDurable.GetHashCode();
      if (GiveupAt != 0L) hash ^= GiveupAt.GetHashCode();
      if (RefreshAt != 0L) hash ^= RefreshAt.GetHashCode();
      if (UnionId != 0L) hash ^= UnionId.GetHashCode();
      if (FallenBy != 0L) hash ^= FallenBy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (owner_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Owner);
      }
      if (UnionOwnerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UnionOwnerName);
      }
      if (OwnerType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OwnerType);
      }
      if (ProtectUntil != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ProtectUntil);
      }
      if (CurDurable != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CurDurable);
      }
      if (MaxDurable != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxDurable);
      }
      if (GiveupAt != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(GiveupAt);
      }
      if (RefreshAt != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(RefreshAt);
      }
      if (UnionId != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(UnionId);
      }
      if (FallenBy != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(FallenBy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (UnionOwnerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnionOwnerName);
      }
      if (OwnerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OwnerType);
      }
      if (ProtectUntil != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProtectUntil);
      }
      if (CurDurable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurDurable);
      }
      if (MaxDurable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxDurable);
      }
      if (GiveupAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GiveupAt);
      }
      if (RefreshAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RefreshAt);
      }
      if (UnionId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UnionId);
      }
      if (FallenBy != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(FallenBy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OccupyInfo other) {
      if (other == null) {
        return;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          owner_ = new global::Cspb.MapPlayerInfo();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.UnionOwnerName.Length != 0) {
        UnionOwnerName = other.UnionOwnerName;
      }
      if (other.OwnerType != 0) {
        OwnerType = other.OwnerType;
      }
      if (other.ProtectUntil != 0L) {
        ProtectUntil = other.ProtectUntil;
      }
      if (other.CurDurable != 0) {
        CurDurable = other.CurDurable;
      }
      if (other.MaxDurable != 0) {
        MaxDurable = other.MaxDurable;
      }
      if (other.GiveupAt != 0L) {
        GiveupAt = other.GiveupAt;
      }
      if (other.RefreshAt != 0L) {
        RefreshAt = other.RefreshAt;
      }
      if (other.UnionId != 0L) {
        UnionId = other.UnionId;
      }
      if (other.FallenBy != 0L) {
        FallenBy = other.FallenBy;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (owner_ == null) {
              owner_ = new global::Cspb.MapPlayerInfo();
            }
            input.ReadMessage(owner_);
            break;
          }
          case 18: {
            UnionOwnerName = input.ReadString();
            break;
          }
          case 24: {
            OwnerType = input.ReadInt32();
            break;
          }
          case 32: {
            ProtectUntil = input.ReadInt64();
            break;
          }
          case 40: {
            CurDurable = input.ReadInt32();
            break;
          }
          case 48: {
            MaxDurable = input.ReadInt32();
            break;
          }
          case 56: {
            GiveupAt = input.ReadInt64();
            break;
          }
          case 64: {
            RefreshAt = input.ReadInt64();
            break;
          }
          case 160: {
            UnionId = input.ReadInt64();
            break;
          }
          case 168: {
            FallenBy = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TroopBrief : pb::IMessage<TroopBrief> {
    private static readonly pb::MessageParser<TroopBrief> _parser = new pb::MessageParser<TroopBrief>(() => new TroopBrief());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TroopBrief> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroopBrief() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroopBrief(TroopBrief other) : this() {
      playerId_ = other.playerId_;
      unionId_ = other.unionId_;
      troopId_ = other.troopId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroopBrief Clone() {
      return new TroopBrief(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "union_id" field.</summary>
    public const int UnionIdFieldNumber = 2;
    private long unionId_;
    /// <summary>
    /// 联盟ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    /// <summary>Field number for the "troop_id" field.</summary>
    public const int TroopIdFieldNumber = 3;
    private long troopId_;
    /// <summary>
    /// 队伍ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TroopId {
      get { return troopId_; }
      set {
        troopId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TroopBrief);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TroopBrief other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (UnionId != other.UnionId) return false;
      if (TroopId != other.TroopId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (UnionId != 0L) hash ^= UnionId.GetHashCode();
      if (TroopId != 0L) hash ^= TroopId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (UnionId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UnionId);
      }
      if (TroopId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TroopId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (UnionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnionId);
      }
      if (TroopId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TroopId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TroopBrief other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.UnionId != 0L) {
        UnionId = other.UnionId;
      }
      if (other.TroopId != 0L) {
        TroopId = other.TroopId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 16: {
            UnionId = input.ReadInt64();
            break;
          }
          case 24: {
            TroopId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 格子简要信息，拖动大地图时使用
  /// 1. 地形信息, 无需发送
  /// 2. 实体简要信息
  /// 3. 实体占领信息
  /// </summary>
  public sealed partial class TileBrief : pb::IMessage<TileBrief> {
    private static readonly pb::MessageParser<TileBrief> _parser = new pb::MessageParser<TileBrief>(() => new TileBrief());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TileBrief> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileBrief() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileBrief(TileBrief other) : this() {
      pos_ = other.pos_;
      entityType_ = other.entityType_;
      MainCity = other.mainCity_ != null ? other.MainCity.Clone() : null;
      PCityDst = other.pCityDst_ != null ? other.PCityDst.Clone() : null;
      SubCity = other.subCity_ != null ? other.SubCity.Clone() : null;
      PFortress = other.pFortress_ != null ? other.PFortress.Clone() : null;
      NFortress = other.nFortress_ != null ? other.NFortress.Clone() : null;
      NpcCity = other.npcCity_ != null ? other.NpcCity.Clone() : null;
      NpcGate = other.npcGate_ != null ? other.NpcGate.Clone() : null;
      Occupy = other.occupy_ != null ? other.Occupy.Clone() : null;
      stations_ = other.stations_.Clone();
      drawTroops_ = other.drawTroops_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileBrief Clone() {
      return new TileBrief(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private int pos_;
    /// <summary>
    /// 土地坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "entity_type" field.</summary>
    public const int EntityTypeFieldNumber = 2;
    private global::Cspb.ENTITY_TYPE entityType_ = 0;
    /// <summary>
    /// 实体类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ENTITY_TYPE EntityType {
      get { return entityType_; }
      set {
        entityType_ = value;
      }
    }

    /// <summary>Field number for the "main_city" field.</summary>
    public const int MainCityFieldNumber = 3;
    private global::Cspb.EPCityBrief mainCity_;
    /// <summary>
    /// 主城
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.EPCityBrief MainCity {
      get { return mainCity_; }
      set {
        mainCity_ = value;
      }
    }

    /// <summary>Field number for the "p_city_dst" field.</summary>
    public const int PCityDstFieldNumber = 4;
    private global::Cspb.EPCityDstBrief pCityDst_;
    /// <summary>
    /// 主城/分城城区
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.EPCityDstBrief PCityDst {
      get { return pCityDst_; }
      set {
        pCityDst_ = value;
      }
    }

    /// <summary>Field number for the "sub_city" field.</summary>
    public const int SubCityFieldNumber = 8;
    private global::Cspb.EPCityBrief subCity_;
    /// <summary>
    /// 分城
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.EPCityBrief SubCity {
      get { return subCity_; }
      set {
        subCity_ = value;
      }
    }

    /// <summary>Field number for the "p_fortress" field.</summary>
    public const int PFortressFieldNumber = 9;
    private global::Cspb.EFortressBrief pFortress_;
    /// <summary>
    /// 玩家要塞
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.EFortressBrief PFortress {
      get { return pFortress_; }
      set {
        pFortress_ = value;
      }
    }

    /// <summary>Field number for the "n_fortress" field.</summary>
    public const int NFortressFieldNumber = 10;
    private global::Cspb.EFortressBrief nFortress_;
    /// <summary>
    /// 野外要塞
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.EFortressBrief NFortress {
      get { return nFortress_; }
      set {
        nFortress_ = value;
      }
    }

    /// <summary>Field number for the "npc_city" field.</summary>
    public const int NpcCityFieldNumber = 11;
    private global::Cspb.ENCityBrief npcCity_;
    /// <summary>
    /// npc城池
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ENCityBrief NpcCity {
      get { return npcCity_; }
      set {
        npcCity_ = value;
      }
    }

    /// <summary>Field number for the "npc_gate" field.</summary>
    public const int NpcGateFieldNumber = 12;
    private global::Cspb.ENCityBrief npcGate_;
    /// <summary>
    /// npc关卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ENCityBrief NpcGate {
      get { return npcGate_; }
      set {
        npcGate_ = value;
      }
    }

    /// <summary>Field number for the "occupy" field.</summary>
    public const int OccupyFieldNumber = 5;
    private global::Cspb.OccupyBrief occupy_;
    /// <summary>
    /// 占领 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.OccupyBrief Occupy {
      get { return occupy_; }
      set {
        occupy_ = value;
      }
    }

    /// <summary>Field number for the "stations" field.</summary>
    public const int StationsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Cspb.StationBrief> _repeated_stations_codec
        = pb::FieldCodec.ForMessage(58, global::Cspb.StationBrief.Parser);
    private readonly pbc::RepeatedField<global::Cspb.StationBrief> stations_ = new pbc::RepeatedField<global::Cspb.StationBrief>();
    /// <summary>
    /// 土地状态信息，包括守军数量，平局数量等
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.StationBrief> Stations {
      get { return stations_; }
    }

    /// <summary>Field number for the "draw_troops" field.</summary>
    public const int DrawTroopsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Cspb.TroopBrief> _repeated_drawTroops_codec
        = pb::FieldCodec.ForMessage(106, global::Cspb.TroopBrief.Parser);
    private readonly pbc::RepeatedField<global::Cspb.TroopBrief> drawTroops_ = new pbc::RepeatedField<global::Cspb.TroopBrief>();
    /// <summary>
    /// 所有打平队伍
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.TroopBrief> DrawTroops {
      get { return drawTroops_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TileBrief);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TileBrief other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pos != other.Pos) return false;
      if (EntityType != other.EntityType) return false;
      if (!object.Equals(MainCity, other.MainCity)) return false;
      if (!object.Equals(PCityDst, other.PCityDst)) return false;
      if (!object.Equals(SubCity, other.SubCity)) return false;
      if (!object.Equals(PFortress, other.PFortress)) return false;
      if (!object.Equals(NFortress, other.NFortress)) return false;
      if (!object.Equals(NpcCity, other.NpcCity)) return false;
      if (!object.Equals(NpcGate, other.NpcGate)) return false;
      if (!object.Equals(Occupy, other.Occupy)) return false;
      if(!stations_.Equals(other.stations_)) return false;
      if(!drawTroops_.Equals(other.drawTroops_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (EntityType != 0) hash ^= EntityType.GetHashCode();
      if (mainCity_ != null) hash ^= MainCity.GetHashCode();
      if (pCityDst_ != null) hash ^= PCityDst.GetHashCode();
      if (subCity_ != null) hash ^= SubCity.GetHashCode();
      if (pFortress_ != null) hash ^= PFortress.GetHashCode();
      if (nFortress_ != null) hash ^= NFortress.GetHashCode();
      if (npcCity_ != null) hash ^= NpcCity.GetHashCode();
      if (npcGate_ != null) hash ^= NpcGate.GetHashCode();
      if (occupy_ != null) hash ^= Occupy.GetHashCode();
      hash ^= stations_.GetHashCode();
      hash ^= drawTroops_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pos);
      }
      if (EntityType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EntityType);
      }
      if (mainCity_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MainCity);
      }
      if (pCityDst_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PCityDst);
      }
      if (occupy_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Occupy);
      }
      stations_.WriteTo(output, _repeated_stations_codec);
      if (subCity_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SubCity);
      }
      if (pFortress_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(PFortress);
      }
      if (nFortress_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(NFortress);
      }
      if (npcCity_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(NpcCity);
      }
      if (npcGate_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(NpcGate);
      }
      drawTroops_.WriteTo(output, _repeated_drawTroops_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (EntityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntityType);
      }
      if (mainCity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MainCity);
      }
      if (pCityDst_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PCityDst);
      }
      if (subCity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubCity);
      }
      if (pFortress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PFortress);
      }
      if (nFortress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NFortress);
      }
      if (npcCity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NpcCity);
      }
      if (npcGate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NpcGate);
      }
      if (occupy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Occupy);
      }
      size += stations_.CalculateSize(_repeated_stations_codec);
      size += drawTroops_.CalculateSize(_repeated_drawTroops_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TileBrief other) {
      if (other == null) {
        return;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.EntityType != 0) {
        EntityType = other.EntityType;
      }
      if (other.mainCity_ != null) {
        if (mainCity_ == null) {
          mainCity_ = new global::Cspb.EPCityBrief();
        }
        MainCity.MergeFrom(other.MainCity);
      }
      if (other.pCityDst_ != null) {
        if (pCityDst_ == null) {
          pCityDst_ = new global::Cspb.EPCityDstBrief();
        }
        PCityDst.MergeFrom(other.PCityDst);
      }
      if (other.subCity_ != null) {
        if (subCity_ == null) {
          subCity_ = new global::Cspb.EPCityBrief();
        }
        SubCity.MergeFrom(other.SubCity);
      }
      if (other.pFortress_ != null) {
        if (pFortress_ == null) {
          pFortress_ = new global::Cspb.EFortressBrief();
        }
        PFortress.MergeFrom(other.PFortress);
      }
      if (other.nFortress_ != null) {
        if (nFortress_ == null) {
          nFortress_ = new global::Cspb.EFortressBrief();
        }
        NFortress.MergeFrom(other.NFortress);
      }
      if (other.npcCity_ != null) {
        if (npcCity_ == null) {
          npcCity_ = new global::Cspb.ENCityBrief();
        }
        NpcCity.MergeFrom(other.NpcCity);
      }
      if (other.npcGate_ != null) {
        if (npcGate_ == null) {
          npcGate_ = new global::Cspb.ENCityBrief();
        }
        NpcGate.MergeFrom(other.NpcGate);
      }
      if (other.occupy_ != null) {
        if (occupy_ == null) {
          occupy_ = new global::Cspb.OccupyBrief();
        }
        Occupy.MergeFrom(other.Occupy);
      }
      stations_.Add(other.stations_);
      drawTroops_.Add(other.drawTroops_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pos = input.ReadInt32();
            break;
          }
          case 16: {
            entityType_ = (global::Cspb.ENTITY_TYPE) input.ReadEnum();
            break;
          }
          case 26: {
            if (mainCity_ == null) {
              mainCity_ = new global::Cspb.EPCityBrief();
            }
            input.ReadMessage(mainCity_);
            break;
          }
          case 34: {
            if (pCityDst_ == null) {
              pCityDst_ = new global::Cspb.EPCityDstBrief();
            }
            input.ReadMessage(pCityDst_);
            break;
          }
          case 42: {
            if (occupy_ == null) {
              occupy_ = new global::Cspb.OccupyBrief();
            }
            input.ReadMessage(occupy_);
            break;
          }
          case 58: {
            stations_.AddEntriesFrom(input, _repeated_stations_codec);
            break;
          }
          case 66: {
            if (subCity_ == null) {
              subCity_ = new global::Cspb.EPCityBrief();
            }
            input.ReadMessage(subCity_);
            break;
          }
          case 74: {
            if (pFortress_ == null) {
              pFortress_ = new global::Cspb.EFortressBrief();
            }
            input.ReadMessage(pFortress_);
            break;
          }
          case 82: {
            if (nFortress_ == null) {
              nFortress_ = new global::Cspb.EFortressBrief();
            }
            input.ReadMessage(nFortress_);
            break;
          }
          case 90: {
            if (npcCity_ == null) {
              npcCity_ = new global::Cspb.ENCityBrief();
            }
            input.ReadMessage(npcCity_);
            break;
          }
          case 98: {
            if (npcGate_ == null) {
              npcGate_ = new global::Cspb.ENCityBrief();
            }
            input.ReadMessage(npcGate_);
            break;
          }
          case 106: {
            drawTroops_.AddEntriesFrom(input, _repeated_drawTroops_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 只打包tile的实体信息
  /// </summary>
  public sealed partial class TileEntityBrief : pb::IMessage<TileEntityBrief> {
    private static readonly pb::MessageParser<TileEntityBrief> _parser = new pb::MessageParser<TileEntityBrief>(() => new TileEntityBrief());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TileEntityBrief> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileEntityBrief() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileEntityBrief(TileEntityBrief other) : this() {
      pos_ = other.pos_;
      entityType_ = other.entityType_;
      MainCity = other.mainCity_ != null ? other.MainCity.Clone() : null;
      PCityDst = other.pCityDst_ != null ? other.PCityDst.Clone() : null;
      SubCity = other.subCity_ != null ? other.SubCity.Clone() : null;
      PFortress = other.pFortress_ != null ? other.PFortress.Clone() : null;
      NFortress = other.nFortress_ != null ? other.NFortress.Clone() : null;
      NpcCity = other.npcCity_ != null ? other.NpcCity.Clone() : null;
      NpcGate = other.npcGate_ != null ? other.NpcGate.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileEntityBrief Clone() {
      return new TileEntityBrief(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private int pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "entity_type" field.</summary>
    public const int EntityTypeFieldNumber = 2;
    private global::Cspb.ENTITY_TYPE entityType_ = 0;
    /// <summary>
    /// 实体类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ENTITY_TYPE EntityType {
      get { return entityType_; }
      set {
        entityType_ = value;
      }
    }

    /// <summary>Field number for the "main_city" field.</summary>
    public const int MainCityFieldNumber = 3;
    private global::Cspb.EPCityBrief mainCity_;
    /// <summary>
    /// 主城
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.EPCityBrief MainCity {
      get { return mainCity_; }
      set {
        mainCity_ = value;
      }
    }

    /// <summary>Field number for the "p_city_dst" field.</summary>
    public const int PCityDstFieldNumber = 4;
    private global::Cspb.EPCityDstBrief pCityDst_;
    /// <summary>
    /// 主城/分城城区
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.EPCityDstBrief PCityDst {
      get { return pCityDst_; }
      set {
        pCityDst_ = value;
      }
    }

    /// <summary>Field number for the "sub_city" field.</summary>
    public const int SubCityFieldNumber = 5;
    private global::Cspb.EPCityBrief subCity_;
    /// <summary>
    /// 分城
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.EPCityBrief SubCity {
      get { return subCity_; }
      set {
        subCity_ = value;
      }
    }

    /// <summary>Field number for the "p_fortress" field.</summary>
    public const int PFortressFieldNumber = 6;
    private global::Cspb.EFortressBrief pFortress_;
    /// <summary>
    /// 玩家要塞
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.EFortressBrief PFortress {
      get { return pFortress_; }
      set {
        pFortress_ = value;
      }
    }

    /// <summary>Field number for the "n_fortress" field.</summary>
    public const int NFortressFieldNumber = 7;
    private global::Cspb.EFortressBrief nFortress_;
    /// <summary>
    /// 野外要塞
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.EFortressBrief NFortress {
      get { return nFortress_; }
      set {
        nFortress_ = value;
      }
    }

    /// <summary>Field number for the "npc_city" field.</summary>
    public const int NpcCityFieldNumber = 8;
    private global::Cspb.ENCityBrief npcCity_;
    /// <summary>
    /// npc城池
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ENCityBrief NpcCity {
      get { return npcCity_; }
      set {
        npcCity_ = value;
      }
    }

    /// <summary>Field number for the "npc_gate" field.</summary>
    public const int NpcGateFieldNumber = 9;
    private global::Cspb.ENCityBrief npcGate_;
    /// <summary>
    /// npc关卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ENCityBrief NpcGate {
      get { return npcGate_; }
      set {
        npcGate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TileEntityBrief);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TileEntityBrief other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pos != other.Pos) return false;
      if (EntityType != other.EntityType) return false;
      if (!object.Equals(MainCity, other.MainCity)) return false;
      if (!object.Equals(PCityDst, other.PCityDst)) return false;
      if (!object.Equals(SubCity, other.SubCity)) return false;
      if (!object.Equals(PFortress, other.PFortress)) return false;
      if (!object.Equals(NFortress, other.NFortress)) return false;
      if (!object.Equals(NpcCity, other.NpcCity)) return false;
      if (!object.Equals(NpcGate, other.NpcGate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (EntityType != 0) hash ^= EntityType.GetHashCode();
      if (mainCity_ != null) hash ^= MainCity.GetHashCode();
      if (pCityDst_ != null) hash ^= PCityDst.GetHashCode();
      if (subCity_ != null) hash ^= SubCity.GetHashCode();
      if (pFortress_ != null) hash ^= PFortress.GetHashCode();
      if (nFortress_ != null) hash ^= NFortress.GetHashCode();
      if (npcCity_ != null) hash ^= NpcCity.GetHashCode();
      if (npcGate_ != null) hash ^= NpcGate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pos);
      }
      if (EntityType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EntityType);
      }
      if (mainCity_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MainCity);
      }
      if (pCityDst_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PCityDst);
      }
      if (subCity_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SubCity);
      }
      if (pFortress_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(PFortress);
      }
      if (nFortress_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(NFortress);
      }
      if (npcCity_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(NpcCity);
      }
      if (npcGate_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(NpcGate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (EntityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntityType);
      }
      if (mainCity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MainCity);
      }
      if (pCityDst_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PCityDst);
      }
      if (subCity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubCity);
      }
      if (pFortress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PFortress);
      }
      if (nFortress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NFortress);
      }
      if (npcCity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NpcCity);
      }
      if (npcGate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NpcGate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TileEntityBrief other) {
      if (other == null) {
        return;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.EntityType != 0) {
        EntityType = other.EntityType;
      }
      if (other.mainCity_ != null) {
        if (mainCity_ == null) {
          mainCity_ = new global::Cspb.EPCityBrief();
        }
        MainCity.MergeFrom(other.MainCity);
      }
      if (other.pCityDst_ != null) {
        if (pCityDst_ == null) {
          pCityDst_ = new global::Cspb.EPCityDstBrief();
        }
        PCityDst.MergeFrom(other.PCityDst);
      }
      if (other.subCity_ != null) {
        if (subCity_ == null) {
          subCity_ = new global::Cspb.EPCityBrief();
        }
        SubCity.MergeFrom(other.SubCity);
      }
      if (other.pFortress_ != null) {
        if (pFortress_ == null) {
          pFortress_ = new global::Cspb.EFortressBrief();
        }
        PFortress.MergeFrom(other.PFortress);
      }
      if (other.nFortress_ != null) {
        if (nFortress_ == null) {
          nFortress_ = new global::Cspb.EFortressBrief();
        }
        NFortress.MergeFrom(other.NFortress);
      }
      if (other.npcCity_ != null) {
        if (npcCity_ == null) {
          npcCity_ = new global::Cspb.ENCityBrief();
        }
        NpcCity.MergeFrom(other.NpcCity);
      }
      if (other.npcGate_ != null) {
        if (npcGate_ == null) {
          npcGate_ = new global::Cspb.ENCityBrief();
        }
        NpcGate.MergeFrom(other.NpcGate);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pos = input.ReadInt32();
            break;
          }
          case 16: {
            entityType_ = (global::Cspb.ENTITY_TYPE) input.ReadEnum();
            break;
          }
          case 26: {
            if (mainCity_ == null) {
              mainCity_ = new global::Cspb.EPCityBrief();
            }
            input.ReadMessage(mainCity_);
            break;
          }
          case 34: {
            if (pCityDst_ == null) {
              pCityDst_ = new global::Cspb.EPCityDstBrief();
            }
            input.ReadMessage(pCityDst_);
            break;
          }
          case 42: {
            if (subCity_ == null) {
              subCity_ = new global::Cspb.EPCityBrief();
            }
            input.ReadMessage(subCity_);
            break;
          }
          case 50: {
            if (pFortress_ == null) {
              pFortress_ = new global::Cspb.EFortressBrief();
            }
            input.ReadMessage(pFortress_);
            break;
          }
          case 58: {
            if (nFortress_ == null) {
              nFortress_ = new global::Cspb.EFortressBrief();
            }
            input.ReadMessage(nFortress_);
            break;
          }
          case 66: {
            if (npcCity_ == null) {
              npcCity_ = new global::Cspb.ENCityBrief();
            }
            input.ReadMessage(npcCity_);
            break;
          }
          case 74: {
            if (npcGate_ == null) {
              npcGate_ = new global::Cspb.ENCityBrief();
            }
            input.ReadMessage(npcGate_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 行军简略信息，拖动大地图时使用
  /// </summary>
  public sealed partial class MarchBrief : pb::IMessage<MarchBrief> {
    private static readonly pb::MessageParser<MarchBrief> _parser = new pb::MessageParser<MarchBrief>(() => new MarchBrief());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarchBrief> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarchBrief() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarchBrief(MarchBrief other) : this() {
      marchId_ = other.marchId_;
      troopId_ = other.troopId_;
      startPos_ = other.startPos_;
      endPos_ = other.endPos_;
      startTime_ = other.startTime_;
      arriveTime_ = other.arriveTime_;
      isReturn_ = other.isReturn_;
      detailReportId_ = other.detailReportId_;
      playerId_ = other.playerId_;
      unionId_ = other.unionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarchBrief Clone() {
      return new MarchBrief(this);
    }

    /// <summary>Field number for the "march_id" field.</summary>
    public const int MarchIdFieldNumber = 1;
    private long marchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MarchId {
      get { return marchId_; }
      set {
        marchId_ = value;
      }
    }

    /// <summary>Field number for the "troop_id" field.</summary>
    public const int TroopIdFieldNumber = 2;
    private long troopId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TroopId {
      get { return troopId_; }
      set {
        troopId_ = value;
      }
    }

    /// <summary>Field number for the "start_pos" field.</summary>
    public const int StartPosFieldNumber = 3;
    private int startPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartPos {
      get { return startPos_; }
      set {
        startPos_ = value;
      }
    }

    /// <summary>Field number for the "end_pos" field.</summary>
    public const int EndPosFieldNumber = 4;
    private int endPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndPos {
      get { return endPos_; }
      set {
        endPos_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 5;
    private long startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "arrive_time" field.</summary>
    public const int ArriveTimeFieldNumber = 6;
    private long arriveTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ArriveTime {
      get { return arriveTime_; }
      set {
        arriveTime_ = value;
      }
    }

    /// <summary>Field number for the "is_return" field.</summary>
    public const int IsReturnFieldNumber = 7;
    private bool isReturn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReturn {
      get { return isReturn_; }
      set {
        isReturn_ = value;
      }
    }

    /// <summary>Field number for the "detail_report_id" field.</summary>
    public const int DetailReportIdFieldNumber = 8;
    private long detailReportId_;
    /// <summary>
    /// 战斗后的回放id, 只有攻击无主土地胜利/失败之后才会存在
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DetailReportId {
      get { return detailReportId_; }
      set {
        detailReportId_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 9;
    private long playerId_;
    /// <summary>
    /// player id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "union_id" field.</summary>
    public const int UnionIdFieldNumber = 10;
    private long unionId_;
    /// <summary>
    /// union id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarchBrief);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarchBrief other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MarchId != other.MarchId) return false;
      if (TroopId != other.TroopId) return false;
      if (StartPos != other.StartPos) return false;
      if (EndPos != other.EndPos) return false;
      if (StartTime != other.StartTime) return false;
      if (ArriveTime != other.ArriveTime) return false;
      if (IsReturn != other.IsReturn) return false;
      if (DetailReportId != other.DetailReportId) return false;
      if (PlayerId != other.PlayerId) return false;
      if (UnionId != other.UnionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MarchId != 0L) hash ^= MarchId.GetHashCode();
      if (TroopId != 0L) hash ^= TroopId.GetHashCode();
      if (StartPos != 0) hash ^= StartPos.GetHashCode();
      if (EndPos != 0) hash ^= EndPos.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (ArriveTime != 0L) hash ^= ArriveTime.GetHashCode();
      if (IsReturn != false) hash ^= IsReturn.GetHashCode();
      if (DetailReportId != 0L) hash ^= DetailReportId.GetHashCode();
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (UnionId != 0L) hash ^= UnionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MarchId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MarchId);
      }
      if (TroopId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TroopId);
      }
      if (StartPos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StartPos);
      }
      if (EndPos != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndPos);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(StartTime);
      }
      if (ArriveTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ArriveTime);
      }
      if (IsReturn != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsReturn);
      }
      if (DetailReportId != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(DetailReportId);
      }
      if (PlayerId != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(PlayerId);
      }
      if (UnionId != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(UnionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MarchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MarchId);
      }
      if (TroopId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TroopId);
      }
      if (StartPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartPos);
      }
      if (EndPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndPos);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (ArriveTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ArriveTime);
      }
      if (IsReturn != false) {
        size += 1 + 1;
      }
      if (DetailReportId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DetailReportId);
      }
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (UnionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarchBrief other) {
      if (other == null) {
        return;
      }
      if (other.MarchId != 0L) {
        MarchId = other.MarchId;
      }
      if (other.TroopId != 0L) {
        TroopId = other.TroopId;
      }
      if (other.StartPos != 0) {
        StartPos = other.StartPos;
      }
      if (other.EndPos != 0) {
        EndPos = other.EndPos;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.ArriveTime != 0L) {
        ArriveTime = other.ArriveTime;
      }
      if (other.IsReturn != false) {
        IsReturn = other.IsReturn;
      }
      if (other.DetailReportId != 0L) {
        DetailReportId = other.DetailReportId;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.UnionId != 0L) {
        UnionId = other.UnionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MarchId = input.ReadInt64();
            break;
          }
          case 16: {
            TroopId = input.ReadInt64();
            break;
          }
          case 24: {
            StartPos = input.ReadInt32();
            break;
          }
          case 32: {
            EndPos = input.ReadInt32();
            break;
          }
          case 40: {
            StartTime = input.ReadInt64();
            break;
          }
          case 48: {
            ArriveTime = input.ReadInt64();
            break;
          }
          case 56: {
            IsReturn = input.ReadBool();
            break;
          }
          case 64: {
            DetailReportId = input.ReadInt64();
            break;
          }
          case 72: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 80: {
            UnionId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 大地图Grid信息 包括静态信息(如tiles)
  /// </summary>
  public sealed partial class Grid : pb::IMessage<Grid> {
    private static readonly pb::MessageParser<Grid> _parser = new pb::MessageParser<Grid>(() => new Grid());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Grid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Grid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Grid(Grid other) : this() {
      tiles_ = other.tiles_.Clone();
      pos_ = other.pos_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Grid Clone() {
      return new Grid(this);
    }

    /// <summary>Field number for the "tiles" field.</summary>
    public const int TilesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.TileBrief> _repeated_tiles_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.TileBrief.Parser);
    private readonly pbc::RepeatedField<global::Cspb.TileBrief> tiles_ = new pbc::RepeatedField<global::Cspb.TileBrief>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.TileBrief> Tiles {
      get { return tiles_; }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private int pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Grid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Grid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tiles_.Equals(other.tiles_)) return false;
      if (Pos != other.Pos) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tiles_.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tiles_.WriteTo(output, _repeated_tiles_codec);
      if (Pos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tiles_.CalculateSize(_repeated_tiles_codec);
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Grid other) {
      if (other == null) {
        return;
      }
      tiles_.Add(other.tiles_);
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tiles_.AddEntriesFrom(input, _repeated_tiles_codec);
            break;
          }
          case 24: {
            Pos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家城池信息
  /// </summary>
  public sealed partial class CityBuild : pb::IMessage<CityBuild> {
    private static readonly pb::MessageParser<CityBuild> _parser = new pb::MessageParser<CityBuild>(() => new CityBuild());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CityBuild> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CityBuild() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CityBuild(CityBuild other) : this() {
      endT_ = other.endT_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CityBuild Clone() {
      return new CityBuild(this);
    }

    /// <summary>Field number for the "end_t" field.</summary>
    public const int EndTFieldNumber = 1;
    private long endT_;
    /// <summary>
    /// 升级结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndT {
      get { return endT_; }
      set {
        endT_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CityBuild);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CityBuild other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EndT != other.EndT) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EndT != 0L) hash ^= EndT.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EndT != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EndT);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EndT != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndT);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CityBuild other) {
      if (other == null) {
        return;
      }
      if (other.EndT != 0L) {
        EndT = other.EndT;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EndT = input.ReadInt64();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家所有的城池的城建
  /// </summary>
  public sealed partial class PCityNtf : pb::IMessage<PCityNtf> {
    private static readonly pb::MessageParser<PCityNtf> _parser = new pb::MessageParser<PCityNtf>(() => new PCityNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PCityNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PCityNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PCityNtf(PCityNtf other) : this() {
      id_ = other.id_;
      pos_ = other.pos_;
      cityType_ = other.cityType_;
      builds_ = other.builds_.Clone();
      buildQueue_ = other.buildQueue_.Clone();
      tempBuildQueue_ = other.tempBuildQueue_.Clone();
      queueMax_ = other.queueMax_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PCityNtf Clone() {
      return new PCityNtf(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private int pos_;
    /// <summary>
    /// 城池在大地图中的位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "city_type" field.</summary>
    public const int CityTypeFieldNumber = 3;
    private global::Cspb.CITY_TYPE cityType_ = 0;
    /// <summary>
    /// 城池类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.CITY_TYPE CityType {
      get { return cityType_; }
      set {
        cityType_ = value;
      }
    }

    /// <summary>Field number for the "builds" field.</summary>
    public const int BuildsFieldNumber = 4;
    private static readonly pbc::MapField<int, global::Cspb.CityBuild>.Codec _map_builds_codec
        = new pbc::MapField<int, global::Cspb.CityBuild>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Cspb.CityBuild.Parser), 34);
    private readonly pbc::MapField<int, global::Cspb.CityBuild> builds_ = new pbc::MapField<int, global::Cspb.CityBuild>();
    /// <summary>
    /// 城建
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Cspb.CityBuild> Builds {
      get { return builds_; }
    }

    /// <summary>Field number for the "build_queue" field.</summary>
    public const int BuildQueueFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_buildQueue_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> buildQueue_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 普通建筑队列
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BuildQueue {
      get { return buildQueue_; }
    }

    /// <summary>Field number for the "temp_build_queue" field.</summary>
    public const int TempBuildQueueFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_tempBuildQueue_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> tempBuildQueue_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 临时建筑队列
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TempBuildQueue {
      get { return tempBuildQueue_; }
    }

    /// <summary>Field number for the "queue_max" field.</summary>
    public const int QueueMaxFieldNumber = 7;
    private int queueMax_;
    /// <summary>
    /// 最大建造队列数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QueueMax {
      get { return queueMax_; }
      set {
        queueMax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PCityNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PCityNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Pos != other.Pos) return false;
      if (CityType != other.CityType) return false;
      if (!Builds.Equals(other.Builds)) return false;
      if(!buildQueue_.Equals(other.buildQueue_)) return false;
      if(!tempBuildQueue_.Equals(other.tempBuildQueue_)) return false;
      if (QueueMax != other.QueueMax) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (CityType != 0) hash ^= CityType.GetHashCode();
      hash ^= Builds.GetHashCode();
      hash ^= buildQueue_.GetHashCode();
      hash ^= tempBuildQueue_.GetHashCode();
      if (QueueMax != 0) hash ^= QueueMax.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos);
      }
      if (CityType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) CityType);
      }
      builds_.WriteTo(output, _map_builds_codec);
      buildQueue_.WriteTo(output, _repeated_buildQueue_codec);
      tempBuildQueue_.WriteTo(output, _repeated_tempBuildQueue_codec);
      if (QueueMax != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(QueueMax);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (CityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CityType);
      }
      size += builds_.CalculateSize(_map_builds_codec);
      size += buildQueue_.CalculateSize(_repeated_buildQueue_codec);
      size += tempBuildQueue_.CalculateSize(_repeated_tempBuildQueue_codec);
      if (QueueMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QueueMax);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PCityNtf other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.CityType != 0) {
        CityType = other.CityType;
      }
      builds_.Add(other.builds_);
      buildQueue_.Add(other.buildQueue_);
      tempBuildQueue_.Add(other.tempBuildQueue_);
      if (other.QueueMax != 0) {
        QueueMax = other.QueueMax;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Pos = input.ReadInt32();
            break;
          }
          case 24: {
            cityType_ = (global::Cspb.CITY_TYPE) input.ReadEnum();
            break;
          }
          case 34: {
            builds_.AddEntriesFrom(input, _map_builds_codec);
            break;
          }
          case 42:
          case 40: {
            buildQueue_.AddEntriesFrom(input, _repeated_buildQueue_codec);
            break;
          }
          case 50:
          case 48: {
            tempBuildQueue_.AddEntriesFrom(input, _repeated_tempBuildQueue_codec);
            break;
          }
          case 56: {
            QueueMax = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 主城/分城部队
  /// </summary>
  public sealed partial class MCityNtf : pb::IMessage<MCityNtf> {
    private static readonly pb::MessageParser<MCityNtf> _parser = new pb::MessageParser<MCityNtf>(() => new MCityNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MCityNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MCityNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MCityNtf(MCityNtf other) : this() {
      id_ = other.id_;
      troops_ = other.troops_.Clone();
      conscriptQueue_ = other.conscriptQueue_.Clone();
      redif_ = other.redif_;
      buffAttrs_ = other.buffAttrs_.Clone();
      state_ = other.state_;
      cityType_ = other.cityType_;
      pos_ = other.pos_;
      name_ = other.name_;
      stateEndAt_ = other.stateEndAt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MCityNtf Clone() {
      return new MCityNtf(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "troops" field.</summary>
    public const int TroopsFieldNumber = 2;
    private static readonly pbc::MapField<int, long>.Codec _map_troops_codec
        = new pbc::MapField<int, long>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt64(16), 18);
    private readonly pbc::MapField<int, long> troops_ = new pbc::MapField<int, long>();
    /// <summary>
    /// 城池中的部队 部队编号 -> 部队ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, long> Troops {
      get { return troops_; }
    }

    /// <summary>Field number for the "conscript_queue" field.</summary>
    public const int ConscriptQueueFieldNumber = 4;
    private static readonly pb::FieldCodec<long> _repeated_conscriptQueue_codec
        = pb::FieldCodec.ForInt64(34);
    private readonly pbc::RepeatedField<long> conscriptQueue_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// 征兵队列, 保存正在征兵的troop_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> ConscriptQueue {
      get { return conscriptQueue_; }
    }

    /// <summary>Field number for the "redif" field.</summary>
    public const int RedifFieldNumber = 6;
    private int redif_;
    /// <summary>
    /// 预备兵
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Redif {
      get { return redif_; }
      set {
        redif_ = value;
      }
    }

    /// <summary>Field number for the "buff_attrs" field.</summary>
    public const int BuffAttrsFieldNumber = 7;
    private static readonly pbc::MapField<string, float>.Codec _map_buffAttrs_codec
        = new pbc::MapField<string, float>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForFloat(21), 58);
    private readonly pbc::MapField<string, float> buffAttrs_ = new pbc::MapField<string, float>();
    /// <summary>
    /// 所有Buff属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, float> BuffAttrs {
      get { return buffAttrs_; }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 8;
    private global::Cspb.CITY_STATE state_ = 0;
    /// <summary>
    /// 城池状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.CITY_STATE State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "city_type" field.</summary>
    public const int CityTypeFieldNumber = 9;
    private global::Cspb.CITY_TYPE cityType_ = 0;
    /// <summary>
    /// 城池类型: 主城/分城
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.CITY_TYPE CityType {
      get { return cityType_; }
      set {
        cityType_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 10;
    private int pos_;
    /// <summary>
    /// 城池位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 11;
    private string name_ = "";
    /// <summary>
    /// 城池名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state_end_at" field.</summary>
    public const int StateEndAtFieldNumber = 12;
    private long stateEndAt_;
    /// <summary>
    /// 城池状态切换结束时间(修建完成时间/拆除完成时间等)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StateEndAt {
      get { return stateEndAt_; }
      set {
        stateEndAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MCityNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MCityNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!Troops.Equals(other.Troops)) return false;
      if(!conscriptQueue_.Equals(other.conscriptQueue_)) return false;
      if (Redif != other.Redif) return false;
      if (!BuffAttrs.Equals(other.BuffAttrs)) return false;
      if (State != other.State) return false;
      if (CityType != other.CityType) return false;
      if (Pos != other.Pos) return false;
      if (Name != other.Name) return false;
      if (StateEndAt != other.StateEndAt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      hash ^= Troops.GetHashCode();
      hash ^= conscriptQueue_.GetHashCode();
      if (Redif != 0) hash ^= Redif.GetHashCode();
      hash ^= BuffAttrs.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (CityType != 0) hash ^= CityType.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (StateEndAt != 0L) hash ^= StateEndAt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      troops_.WriteTo(output, _map_troops_codec);
      conscriptQueue_.WriteTo(output, _repeated_conscriptQueue_codec);
      if (Redif != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Redif);
      }
      buffAttrs_.WriteTo(output, _map_buffAttrs_codec);
      if (State != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) State);
      }
      if (CityType != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) CityType);
      }
      if (Pos != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Pos);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Name);
      }
      if (StateEndAt != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(StateEndAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      size += troops_.CalculateSize(_map_troops_codec);
      size += conscriptQueue_.CalculateSize(_repeated_conscriptQueue_codec);
      if (Redif != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Redif);
      }
      size += buffAttrs_.CalculateSize(_map_buffAttrs_codec);
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (CityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CityType);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (StateEndAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StateEndAt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MCityNtf other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      troops_.Add(other.troops_);
      conscriptQueue_.Add(other.conscriptQueue_);
      if (other.Redif != 0) {
        Redif = other.Redif;
      }
      buffAttrs_.Add(other.buffAttrs_);
      if (other.State != 0) {
        State = other.State;
      }
      if (other.CityType != 0) {
        CityType = other.CityType;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.StateEndAt != 0L) {
        StateEndAt = other.StateEndAt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            troops_.AddEntriesFrom(input, _map_troops_codec);
            break;
          }
          case 34:
          case 32: {
            conscriptQueue_.AddEntriesFrom(input, _repeated_conscriptQueue_codec);
            break;
          }
          case 48: {
            Redif = input.ReadInt32();
            break;
          }
          case 58: {
            buffAttrs_.AddEntriesFrom(input, _map_buffAttrs_codec);
            break;
          }
          case 64: {
            state_ = (global::Cspb.CITY_STATE) input.ReadEnum();
            break;
          }
          case 72: {
            cityType_ = (global::Cspb.CITY_TYPE) input.ReadEnum();
            break;
          }
          case 80: {
            Pos = input.ReadInt32();
            break;
          }
          case 90: {
            Name = input.ReadString();
            break;
          }
          case 96: {
            StateEndAt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 要塞调动部队/征兵
  /// </summary>
  public sealed partial class MFortressNtf : pb::IMessage<MFortressNtf> {
    private static readonly pb::MessageParser<MFortressNtf> _parser = new pb::MessageParser<MFortressNtf>(() => new MFortressNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MFortressNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MFortressNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MFortressNtf(MFortressNtf other) : this() {
      id_ = other.id_;
      troops_ = other.troops_.Clone();
      conscriptQueue_ = other.conscriptQueue_.Clone();
      redif_ = other.redif_;
      state_ = other.state_;
      buffAttrs_ = other.buffAttrs_.Clone();
      cityType_ = other.cityType_;
      pos_ = other.pos_;
      name_ = other.name_;
      stateEndAt_ = other.stateEndAt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MFortressNtf Clone() {
      return new MFortressNtf(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "troops" field.</summary>
    public const int TroopsFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_troops_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> troops_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// 城池中的部队
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Troops {
      get { return troops_; }
    }

    /// <summary>Field number for the "conscript_queue" field.</summary>
    public const int ConscriptQueueFieldNumber = 4;
    private static readonly pb::FieldCodec<long> _repeated_conscriptQueue_codec
        = pb::FieldCodec.ForInt64(34);
    private readonly pbc::RepeatedField<long> conscriptQueue_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// 征兵队列, 保存正在征兵的troop_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> ConscriptQueue {
      get { return conscriptQueue_; }
    }

    /// <summary>Field number for the "redif" field.</summary>
    public const int RedifFieldNumber = 5;
    private int redif_;
    /// <summary>
    /// 预备兵
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Redif {
      get { return redif_; }
      set {
        redif_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 6;
    private global::Cspb.CITY_STATE state_ = 0;
    /// <summary>
    /// 城池状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.CITY_STATE State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "buff_attrs" field.</summary>
    public const int BuffAttrsFieldNumber = 7;
    private static readonly pbc::MapField<string, float>.Codec _map_buffAttrs_codec
        = new pbc::MapField<string, float>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForFloat(21), 58);
    private readonly pbc::MapField<string, float> buffAttrs_ = new pbc::MapField<string, float>();
    /// <summary>
    /// 所有Buff属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, float> BuffAttrs {
      get { return buffAttrs_; }
    }

    /// <summary>Field number for the "city_type" field.</summary>
    public const int CityTypeFieldNumber = 8;
    private global::Cspb.CITY_TYPE cityType_ = 0;
    /// <summary>
    /// 城池类型: 要塞, 野外要塞, 军营
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.CITY_TYPE CityType {
      get { return cityType_; }
      set {
        cityType_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 9;
    private int pos_;
    /// <summary>
    /// 要塞位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 10;
    private string name_ = "";
    /// <summary>
    /// 城池名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state_end_at" field.</summary>
    public const int StateEndAtFieldNumber = 11;
    private long stateEndAt_;
    /// <summary>
    /// 城池状态切换结束时间(修建完成时间/拆除完成时间等)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StateEndAt {
      get { return stateEndAt_; }
      set {
        stateEndAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MFortressNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MFortressNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!troops_.Equals(other.troops_)) return false;
      if(!conscriptQueue_.Equals(other.conscriptQueue_)) return false;
      if (Redif != other.Redif) return false;
      if (State != other.State) return false;
      if (!BuffAttrs.Equals(other.BuffAttrs)) return false;
      if (CityType != other.CityType) return false;
      if (Pos != other.Pos) return false;
      if (Name != other.Name) return false;
      if (StateEndAt != other.StateEndAt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      hash ^= troops_.GetHashCode();
      hash ^= conscriptQueue_.GetHashCode();
      if (Redif != 0) hash ^= Redif.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      hash ^= BuffAttrs.GetHashCode();
      if (CityType != 0) hash ^= CityType.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (StateEndAt != 0L) hash ^= StateEndAt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      troops_.WriteTo(output, _repeated_troops_codec);
      conscriptQueue_.WriteTo(output, _repeated_conscriptQueue_codec);
      if (Redif != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Redif);
      }
      if (State != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) State);
      }
      buffAttrs_.WriteTo(output, _map_buffAttrs_codec);
      if (CityType != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) CityType);
      }
      if (Pos != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Pos);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Name);
      }
      if (StateEndAt != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(StateEndAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      size += troops_.CalculateSize(_repeated_troops_codec);
      size += conscriptQueue_.CalculateSize(_repeated_conscriptQueue_codec);
      if (Redif != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Redif);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      size += buffAttrs_.CalculateSize(_map_buffAttrs_codec);
      if (CityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CityType);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (StateEndAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StateEndAt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MFortressNtf other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      troops_.Add(other.troops_);
      conscriptQueue_.Add(other.conscriptQueue_);
      if (other.Redif != 0) {
        Redif = other.Redif;
      }
      if (other.State != 0) {
        State = other.State;
      }
      buffAttrs_.Add(other.buffAttrs_);
      if (other.CityType != 0) {
        CityType = other.CityType;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.StateEndAt != 0L) {
        StateEndAt = other.StateEndAt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18:
          case 16: {
            troops_.AddEntriesFrom(input, _repeated_troops_codec);
            break;
          }
          case 34:
          case 32: {
            conscriptQueue_.AddEntriesFrom(input, _repeated_conscriptQueue_codec);
            break;
          }
          case 40: {
            Redif = input.ReadInt32();
            break;
          }
          case 48: {
            state_ = (global::Cspb.CITY_STATE) input.ReadEnum();
            break;
          }
          case 58: {
            buffAttrs_.AddEntriesFrom(input, _map_buffAttrs_codec);
            break;
          }
          case 64: {
            cityType_ = (global::Cspb.CITY_TYPE) input.ReadEnum();
            break;
          }
          case 72: {
            Pos = input.ReadInt32();
            break;
          }
          case 82: {
            Name = input.ReadString();
            break;
          }
          case 88: {
            StateEndAt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家城池删除ntf
  /// </summary>
  public sealed partial class DelCityNtf : pb::IMessage<DelCityNtf> {
    private static readonly pb::MessageParser<DelCityNtf> _parser = new pb::MessageParser<DelCityNtf>(() => new DelCityNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DelCityNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelCityNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelCityNtf(DelCityNtf other) : this() {
      cityId_ = other.cityId_;
      cityType_ = other.cityType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelCityNtf Clone() {
      return new DelCityNtf(this);
    }

    /// <summary>Field number for the "city_id" field.</summary>
    public const int CityIdFieldNumber = 1;
    private long cityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CityId {
      get { return cityId_; }
      set {
        cityId_ = value;
      }
    }

    /// <summary>Field number for the "city_type" field.</summary>
    public const int CityTypeFieldNumber = 2;
    private global::Cspb.CITY_TYPE cityType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.CITY_TYPE CityType {
      get { return cityType_; }
      set {
        cityType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DelCityNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DelCityNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CityId != other.CityId) return false;
      if (CityType != other.CityType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CityId != 0L) hash ^= CityId.GetHashCode();
      if (CityType != 0) hash ^= CityType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CityId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CityId);
      }
      if (CityType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CityType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CityId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CityId);
      }
      if (CityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CityType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DelCityNtf other) {
      if (other == null) {
        return;
      }
      if (other.CityId != 0L) {
        CityId = other.CityId;
      }
      if (other.CityType != 0) {
        CityType = other.CityType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CityId = input.ReadInt64();
            break;
          }
          case 16: {
            cityType_ = (global::Cspb.CITY_TYPE) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家基本信息
  /// </summary>
  public sealed partial class BasicNtf : pb::IMessage<BasicNtf> {
    private static readonly pb::MessageParser<BasicNtf> _parser = new pb::MessageParser<BasicNtf>(() => new BasicNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BasicNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicNtf(BasicNtf other) : this() {
      playerId_ = other.playerId_;
      name_ = other.name_;
      finishGuide_ = other.finishGuide_;
      newbieStep_ = other.newbieStep_.Clone();
      avatarId_ = other.avatarId_;
      intro_ = other.intro_;
      mainCityPos_ = other.mainCityPos_;
      Union = other.union_ != null ? other.Union.Clone() : null;
      Fallen = other.fallen_ != null ? other.Fallen.Clone() : null;
      createAt_ = other.createAt_;
      unfroceGuide_ = other.unfroceGuide_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicNtf Clone() {
      return new BasicNtf(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "finish_guide" field.</summary>
    public const int FinishGuideFieldNumber = 4;
    private bool finishGuide_;
    /// <summary>
    /// 新手引导是否结束
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FinishGuide {
      get { return finishGuide_; }
      set {
        finishGuide_ = value;
      }
    }

    /// <summary>Field number for the "newbie_step" field.</summary>
    public const int NewbieStepFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_newbieStep_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> newbieStep_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 新手引导步骤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> NewbieStep {
      get { return newbieStep_; }
    }

    /// <summary>Field number for the "avatar_id" field.</summary>
    public const int AvatarIdFieldNumber = 6;
    private int avatarId_;
    /// <summary>
    /// 个人头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvatarId {
      get { return avatarId_; }
      set {
        avatarId_ = value;
      }
    }

    /// <summary>Field number for the "intro" field.</summary>
    public const int IntroFieldNumber = 7;
    private string intro_ = "";
    /// <summary>
    /// 个人简介
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Intro {
      get { return intro_; }
      set {
        intro_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "main_city_pos" field.</summary>
    public const int MainCityPosFieldNumber = 8;
    private int mainCityPos_;
    /// <summary>
    /// 主城位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MainCityPos {
      get { return mainCityPos_; }
      set {
        mainCityPos_ = value;
      }
    }

    /// <summary>Field number for the "union" field.</summary>
    public const int UnionFieldNumber = 9;
    private global::Cspb.PlayerUnion union_;
    /// <summary>
    /// 联盟信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.PlayerUnion Union {
      get { return union_; }
      set {
        union_ = value;
      }
    }

    /// <summary>Field number for the "fallen" field.</summary>
    public const int FallenFieldNumber = 10;
    private global::Cspb.FallenInfo fallen_;
    /// <summary>
    /// 沦陷信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.FallenInfo Fallen {
      get { return fallen_; }
      set {
        fallen_ = value;
      }
    }

    /// <summary>Field number for the "create_at" field.</summary>
    public const int CreateAtFieldNumber = 12;
    private long createAt_;
    /// <summary>
    /// 角色创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateAt {
      get { return createAt_; }
      set {
        createAt_ = value;
      }
    }

    /// <summary>Field number for the "unfroce_Guide" field.</summary>
    public const int UnfroceGuideFieldNumber = 13;
    private long unfroceGuide_;
    /// <summary>
    /// 弱引导
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnfroceGuide {
      get { return unfroceGuide_; }
      set {
        unfroceGuide_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BasicNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BasicNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Name != other.Name) return false;
      if (FinishGuide != other.FinishGuide) return false;
      if(!newbieStep_.Equals(other.newbieStep_)) return false;
      if (AvatarId != other.AvatarId) return false;
      if (Intro != other.Intro) return false;
      if (MainCityPos != other.MainCityPos) return false;
      if (!object.Equals(Union, other.Union)) return false;
      if (!object.Equals(Fallen, other.Fallen)) return false;
      if (CreateAt != other.CreateAt) return false;
      if (UnfroceGuide != other.UnfroceGuide) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (FinishGuide != false) hash ^= FinishGuide.GetHashCode();
      hash ^= newbieStep_.GetHashCode();
      if (AvatarId != 0) hash ^= AvatarId.GetHashCode();
      if (Intro.Length != 0) hash ^= Intro.GetHashCode();
      if (MainCityPos != 0) hash ^= MainCityPos.GetHashCode();
      if (union_ != null) hash ^= Union.GetHashCode();
      if (fallen_ != null) hash ^= Fallen.GetHashCode();
      if (CreateAt != 0L) hash ^= CreateAt.GetHashCode();
      if (UnfroceGuide != 0L) hash ^= UnfroceGuide.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (FinishGuide != false) {
        output.WriteRawTag(32);
        output.WriteBool(FinishGuide);
      }
      newbieStep_.WriteTo(output, _repeated_newbieStep_codec);
      if (AvatarId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AvatarId);
      }
      if (Intro.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Intro);
      }
      if (MainCityPos != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MainCityPos);
      }
      if (union_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Union);
      }
      if (fallen_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Fallen);
      }
      if (CreateAt != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(CreateAt);
      }
      if (UnfroceGuide != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(UnfroceGuide);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (FinishGuide != false) {
        size += 1 + 1;
      }
      size += newbieStep_.CalculateSize(_repeated_newbieStep_codec);
      if (AvatarId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvatarId);
      }
      if (Intro.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Intro);
      }
      if (MainCityPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MainCityPos);
      }
      if (union_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Union);
      }
      if (fallen_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fallen);
      }
      if (CreateAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateAt);
      }
      if (UnfroceGuide != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnfroceGuide);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BasicNtf other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.FinishGuide != false) {
        FinishGuide = other.FinishGuide;
      }
      newbieStep_.Add(other.newbieStep_);
      if (other.AvatarId != 0) {
        AvatarId = other.AvatarId;
      }
      if (other.Intro.Length != 0) {
        Intro = other.Intro;
      }
      if (other.MainCityPos != 0) {
        MainCityPos = other.MainCityPos;
      }
      if (other.union_ != null) {
        if (union_ == null) {
          union_ = new global::Cspb.PlayerUnion();
        }
        Union.MergeFrom(other.Union);
      }
      if (other.fallen_ != null) {
        if (fallen_ == null) {
          fallen_ = new global::Cspb.FallenInfo();
        }
        Fallen.MergeFrom(other.Fallen);
      }
      if (other.CreateAt != 0L) {
        CreateAt = other.CreateAt;
      }
      if (other.UnfroceGuide != 0L) {
        UnfroceGuide = other.UnfroceGuide;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            FinishGuide = input.ReadBool();
            break;
          }
          case 42: {
            newbieStep_.AddEntriesFrom(input, _repeated_newbieStep_codec);
            break;
          }
          case 48: {
            AvatarId = input.ReadInt32();
            break;
          }
          case 58: {
            Intro = input.ReadString();
            break;
          }
          case 64: {
            MainCityPos = input.ReadInt32();
            break;
          }
          case 74: {
            if (union_ == null) {
              union_ = new global::Cspb.PlayerUnion();
            }
            input.ReadMessage(union_);
            break;
          }
          case 82: {
            if (fallen_ == null) {
              fallen_ = new global::Cspb.FallenInfo();
            }
            input.ReadMessage(fallen_);
            break;
          }
          case 96: {
            CreateAt = input.ReadInt64();
            break;
          }
          case 104: {
            UnfroceGuide = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家信息（用于其他玩家查看）
  /// </summary>
  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      playerId_ = other.playerId_;
      avatarId_ = other.avatarId_;
      name_ = other.name_;
      intro_ = other.intro_;
      power_ = other.power_;
      presitge_ = other.presitge_;
      unionName_ = other.unionName_;
      unionNickName_ = other.unionNickName_;
      fallenByName_ = other.fallenByName_;
      fallenByNickName_ = other.fallenByNickName_;
      UnionFlag = other.unionFlag_ != null ? other.UnionFlag.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "avatar_id" field.</summary>
    public const int AvatarIdFieldNumber = 2;
    private int avatarId_;
    /// <summary>
    /// 头像id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvatarId {
      get { return avatarId_; }
      set {
        avatarId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// 玩家名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "intro" field.</summary>
    public const int IntroFieldNumber = 4;
    private string intro_ = "";
    /// <summary>
    /// 个人简介
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Intro {
      get { return intro_; }
      set {
        intro_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 5;
    private int power_;
    /// <summary>
    /// 势力值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "presitge" field.</summary>
    public const int PresitgeFieldNumber = 6;
    private int presitge_;
    /// <summary>
    /// 名望值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Presitge {
      get { return presitge_; }
      set {
        presitge_ = value;
      }
    }

    /// <summary>Field number for the "union_name" field.</summary>
    public const int UnionNameFieldNumber = 7;
    private string unionName_ = "";
    /// <summary>
    /// 联盟名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnionName {
      get { return unionName_; }
      set {
        unionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "union_nick_name" field.</summary>
    public const int UnionNickNameFieldNumber = 8;
    private string unionNickName_ = "";
    /// <summary>
    /// 联盟昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnionNickName {
      get { return unionNickName_; }
      set {
        unionNickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fallen_by_name" field.</summary>
    public const int FallenByNameFieldNumber = 9;
    private string fallenByName_ = "";
    /// <summary>
    /// 上级联盟名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FallenByName {
      get { return fallenByName_; }
      set {
        fallenByName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fallen_by_nick_name" field.</summary>
    public const int FallenByNickNameFieldNumber = 10;
    private string fallenByNickName_ = "";
    /// <summary>
    /// 上级联盟昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FallenByNickName {
      get { return fallenByNickName_; }
      set {
        fallenByNickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "union_flag" field.</summary>
    public const int UnionFlagFieldNumber = 11;
    private global::Cspb.UnionFlag unionFlag_;
    /// <summary>
    /// 联盟旗帜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.UnionFlag UnionFlag {
      get { return unionFlag_; }
      set {
        unionFlag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (AvatarId != other.AvatarId) return false;
      if (Name != other.Name) return false;
      if (Intro != other.Intro) return false;
      if (Power != other.Power) return false;
      if (Presitge != other.Presitge) return false;
      if (UnionName != other.UnionName) return false;
      if (UnionNickName != other.UnionNickName) return false;
      if (FallenByName != other.FallenByName) return false;
      if (FallenByNickName != other.FallenByNickName) return false;
      if (!object.Equals(UnionFlag, other.UnionFlag)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (AvatarId != 0) hash ^= AvatarId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Intro.Length != 0) hash ^= Intro.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      if (Presitge != 0) hash ^= Presitge.GetHashCode();
      if (UnionName.Length != 0) hash ^= UnionName.GetHashCode();
      if (UnionNickName.Length != 0) hash ^= UnionNickName.GetHashCode();
      if (FallenByName.Length != 0) hash ^= FallenByName.GetHashCode();
      if (FallenByNickName.Length != 0) hash ^= FallenByNickName.GetHashCode();
      if (unionFlag_ != null) hash ^= UnionFlag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (AvatarId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AvatarId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Intro.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Intro);
      }
      if (Power != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Power);
      }
      if (Presitge != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Presitge);
      }
      if (UnionName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(UnionName);
      }
      if (UnionNickName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(UnionNickName);
      }
      if (FallenByName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(FallenByName);
      }
      if (FallenByNickName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(FallenByNickName);
      }
      if (unionFlag_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(UnionFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (AvatarId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvatarId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Intro.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Intro);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (Presitge != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Presitge);
      }
      if (UnionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnionName);
      }
      if (UnionNickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnionNickName);
      }
      if (FallenByName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FallenByName);
      }
      if (FallenByNickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FallenByNickName);
      }
      if (unionFlag_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnionFlag);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.AvatarId != 0) {
        AvatarId = other.AvatarId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Intro.Length != 0) {
        Intro = other.Intro;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.Presitge != 0) {
        Presitge = other.Presitge;
      }
      if (other.UnionName.Length != 0) {
        UnionName = other.UnionName;
      }
      if (other.UnionNickName.Length != 0) {
        UnionNickName = other.UnionNickName;
      }
      if (other.FallenByName.Length != 0) {
        FallenByName = other.FallenByName;
      }
      if (other.FallenByNickName.Length != 0) {
        FallenByNickName = other.FallenByNickName;
      }
      if (other.unionFlag_ != null) {
        if (unionFlag_ == null) {
          unionFlag_ = new global::Cspb.UnionFlag();
        }
        UnionFlag.MergeFrom(other.UnionFlag);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 16: {
            AvatarId = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Intro = input.ReadString();
            break;
          }
          case 40: {
            Power = input.ReadInt32();
            break;
          }
          case 48: {
            Presitge = input.ReadInt32();
            break;
          }
          case 58: {
            UnionName = input.ReadString();
            break;
          }
          case 66: {
            UnionNickName = input.ReadString();
            break;
          }
          case 74: {
            FallenByName = input.ReadString();
            break;
          }
          case 82: {
            FallenByNickName = input.ReadString();
            break;
          }
          case 90: {
            if (unionFlag_ == null) {
              unionFlag_ = new global::Cspb.UnionFlag();
            }
            input.ReadMessage(unionFlag_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeroSkill : pb::IMessage<HeroSkill> {
    private static readonly pb::MessageParser<HeroSkill> _parser = new pb::MessageParser<HeroSkill>(() => new HeroSkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroSkill(HeroSkill other) : this() {
      id_ = other.id_;
      lv_ = other.lv_;
      idx_ = other.idx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroSkill Clone() {
      return new HeroSkill(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "lv" field.</summary>
    public const int LvFieldNumber = 2;
    private int lv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lv {
      get { return lv_; }
      set {
        lv_ = value;
      }
    }

    /// <summary>Field number for the "idx" field.</summary>
    public const int IdxFieldNumber = 3;
    private int idx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Idx {
      get { return idx_; }
      set {
        idx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Lv != other.Lv) return false;
      if (Idx != other.Idx) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Lv != 0) hash ^= Lv.GetHashCode();
      if (Idx != 0) hash ^= Idx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Lv != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Lv);
      }
      if (Idx != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Idx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Lv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lv);
      }
      if (Idx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Idx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroSkill other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Lv != 0) {
        Lv = other.Lv;
      }
      if (other.Idx != 0) {
        Idx = other.Idx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Lv = input.ReadInt32();
            break;
          }
          case 24: {
            Idx = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeroAttr : pb::IMessage<HeroAttr> {
    private static readonly pb::MessageParser<HeroAttr> _parser = new pb::MessageParser<HeroAttr>(() => new HeroAttr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroAttr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroAttr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroAttr(HeroAttr other) : this() {
      atkAsgn_ = other.atkAsgn_;
      pdefAsgn_ = other.pdefAsgn_;
      mdefAsgn_ = other.mdefAsgn_;
      speedAsgn_ = other.speedAsgn_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroAttr Clone() {
      return new HeroAttr(this);
    }

    /// <summary>Field number for the "atk_asgn" field.</summary>
    public const int AtkAsgnFieldNumber = 1;
    private int atkAsgn_;
    /// <summary>
    /// 手动分配属性(通过升级 进阶)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AtkAsgn {
      get { return atkAsgn_; }
      set {
        atkAsgn_ = value;
      }
    }

    /// <summary>Field number for the "pdef_asgn" field.</summary>
    public const int PdefAsgnFieldNumber = 2;
    private int pdefAsgn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PdefAsgn {
      get { return pdefAsgn_; }
      set {
        pdefAsgn_ = value;
      }
    }

    /// <summary>Field number for the "mdef_asgn" field.</summary>
    public const int MdefAsgnFieldNumber = 3;
    private int mdefAsgn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MdefAsgn {
      get { return mdefAsgn_; }
      set {
        mdefAsgn_ = value;
      }
    }

    /// <summary>Field number for the "speed_asgn" field.</summary>
    public const int SpeedAsgnFieldNumber = 4;
    private int speedAsgn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpeedAsgn {
      get { return speedAsgn_; }
      set {
        speedAsgn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroAttr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroAttr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AtkAsgn != other.AtkAsgn) return false;
      if (PdefAsgn != other.PdefAsgn) return false;
      if (MdefAsgn != other.MdefAsgn) return false;
      if (SpeedAsgn != other.SpeedAsgn) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AtkAsgn != 0) hash ^= AtkAsgn.GetHashCode();
      if (PdefAsgn != 0) hash ^= PdefAsgn.GetHashCode();
      if (MdefAsgn != 0) hash ^= MdefAsgn.GetHashCode();
      if (SpeedAsgn != 0) hash ^= SpeedAsgn.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AtkAsgn != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AtkAsgn);
      }
      if (PdefAsgn != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PdefAsgn);
      }
      if (MdefAsgn != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MdefAsgn);
      }
      if (SpeedAsgn != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SpeedAsgn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AtkAsgn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AtkAsgn);
      }
      if (PdefAsgn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PdefAsgn);
      }
      if (MdefAsgn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MdefAsgn);
      }
      if (SpeedAsgn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeedAsgn);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroAttr other) {
      if (other == null) {
        return;
      }
      if (other.AtkAsgn != 0) {
        AtkAsgn = other.AtkAsgn;
      }
      if (other.PdefAsgn != 0) {
        PdefAsgn = other.PdefAsgn;
      }
      if (other.MdefAsgn != 0) {
        MdefAsgn = other.MdefAsgn;
      }
      if (other.SpeedAsgn != 0) {
        SpeedAsgn = other.SpeedAsgn;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AtkAsgn = input.ReadInt32();
            break;
          }
          case 16: {
            PdefAsgn = input.ReadInt32();
            break;
          }
          case 24: {
            MdefAsgn = input.ReadInt32();
            break;
          }
          case 32: {
            SpeedAsgn = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeroEnergy : pb::IMessage<HeroEnergy> {
    private static readonly pb::MessageParser<HeroEnergy> _parser = new pb::MessageParser<HeroEnergy>(() => new HeroEnergy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroEnergy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroEnergy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroEnergy(HeroEnergy other) : this() {
      energy_ = other.energy_;
      lastT_ = other.lastT_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroEnergy Clone() {
      return new HeroEnergy(this);
    }

    /// <summary>Field number for the "energy" field.</summary>
    public const int EnergyFieldNumber = 1;
    private int energy_;
    /// <summary>
    ///体力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Energy {
      get { return energy_; }
      set {
        energy_ = value;
      }
    }

    /// <summary>Field number for the "last_t" field.</summary>
    public const int LastTFieldNumber = 2;
    private long lastT_;
    /// <summary>
    ///上次更新体力时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastT {
      get { return lastT_; }
      set {
        lastT_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroEnergy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroEnergy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Energy != other.Energy) return false;
      if (LastT != other.LastT) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Energy != 0) hash ^= Energy.GetHashCode();
      if (LastT != 0L) hash ^= LastT.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Energy != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Energy);
      }
      if (LastT != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LastT);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Energy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Energy);
      }
      if (LastT != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastT);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroEnergy other) {
      if (other == null) {
        return;
      }
      if (other.Energy != 0) {
        Energy = other.Energy;
      }
      if (other.LastT != 0L) {
        LastT = other.LastT;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Energy = input.ReadInt32();
            break;
          }
          case 16: {
            LastT = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeroState : pb::IMessage<HeroState> {
    private static readonly pb::MessageParser<HeroState> _parser = new pb::MessageParser<HeroState>(() => new HeroState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroState(HeroState other) : this() {
      hurtT_ = other.hurtT_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroState Clone() {
      return new HeroState(this);
    }

    /// <summary>Field number for the "hurt_t" field.</summary>
    public const int HurtTFieldNumber = 1;
    private long hurtT_;
    /// <summary>
    ///重伤状态到期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HurtT {
      get { return hurtT_; }
      set {
        hurtT_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HurtT != other.HurtT) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HurtT != 0L) hash ^= HurtT.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HurtT != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HurtT);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HurtT != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HurtT);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroState other) {
      if (other == null) {
        return;
      }
      if (other.HurtT != 0L) {
        HurtT = other.HurtT;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HurtT = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///英雄信息
  /// </summary>
  public sealed partial class Hero : pb::IMessage<Hero> {
    private static readonly pb::MessageParser<Hero> _parser = new pb::MessageParser<Hero>(() => new Hero());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hero(Hero other) : this() {
      heroRid_ = other.heroRid_;
      heroId_ = other.heroId_;
      level_ = other.level_;
      advStar_ = other.advStar_;
      Attr = other.attr_ != null ? other.Attr.Clone() : null;
      skills_ = other.skills_.Clone();
      Energy = other.energy_ != null ? other.Energy.Clone() : null;
      State = other.state_ != null ? other.State.Clone() : null;
      exp_ = other.exp_;
      awake_ = other.awake_;
      isLock_ = other.isLock_;
      resetAt_ = other.resetAt_;
      troopId_ = other.troopId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hero Clone() {
      return new Hero(this);
    }

    /// <summary>Field number for the "hero_rid" field.</summary>
    public const int HeroRidFieldNumber = 1;
    private long heroRid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroRid {
      get { return heroRid_; }
      set {
        heroRid_ = value;
      }
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 2;
    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "adv_star" field.</summary>
    public const int AdvStarFieldNumber = 4;
    private int advStar_;
    /// <summary>
    /// 进阶次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AdvStar {
      get { return advStar_; }
      set {
        advStar_ = value;
      }
    }

    /// <summary>Field number for the "attr" field.</summary>
    public const int AttrFieldNumber = 5;
    private global::Cspb.HeroAttr attr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.HeroAttr Attr {
      get { return attr_; }
      set {
        attr_ = value;
      }
    }

    /// <summary>Field number for the "skills" field.</summary>
    public const int SkillsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Cspb.HeroSkill> _repeated_skills_codec
        = pb::FieldCodec.ForMessage(50, global::Cspb.HeroSkill.Parser);
    private readonly pbc::RepeatedField<global::Cspb.HeroSkill> skills_ = new pbc::RepeatedField<global::Cspb.HeroSkill>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.HeroSkill> Skills {
      get { return skills_; }
    }

    /// <summary>Field number for the "energy" field.</summary>
    public const int EnergyFieldNumber = 7;
    private global::Cspb.HeroEnergy energy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.HeroEnergy Energy {
      get { return energy_; }
      set {
        energy_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 8;
    private global::Cspb.HeroState state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.HeroState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 9;
    private int exp_;
    /// <summary>
    /// 当前经验值(升级所需经验值从配置表读)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "awake" field.</summary>
    public const int AwakeFieldNumber = 10;
    private bool awake_;
    /// <summary>
    /// 觉醒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Awake {
      get { return awake_; }
      set {
        awake_ = value;
      }
    }

    /// <summary>Field number for the "is_lock" field.</summary>
    public const int IsLockFieldNumber = 11;
    private bool isLock_;
    /// <summary>
    /// 是否锁定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLock {
      get { return isLock_; }
      set {
        isLock_ = value;
      }
    }

    /// <summary>Field number for the "reset_at" field.</summary>
    public const int ResetAtFieldNumber = 12;
    private long resetAt_;
    /// <summary>
    /// 上一次重置加点时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ResetAt {
      get { return resetAt_; }
      set {
        resetAt_ = value;
      }
    }

    /// <summary>Field number for the "troop_id" field.</summary>
    public const int TroopIdFieldNumber = 13;
    private long troopId_;
    /// <summary>
    /// 英雄在部队时的部队id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TroopId {
      get { return troopId_; }
      set {
        troopId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroRid != other.HeroRid) return false;
      if (HeroId != other.HeroId) return false;
      if (Level != other.Level) return false;
      if (AdvStar != other.AdvStar) return false;
      if (!object.Equals(Attr, other.Attr)) return false;
      if(!skills_.Equals(other.skills_)) return false;
      if (!object.Equals(Energy, other.Energy)) return false;
      if (!object.Equals(State, other.State)) return false;
      if (Exp != other.Exp) return false;
      if (Awake != other.Awake) return false;
      if (IsLock != other.IsLock) return false;
      if (ResetAt != other.ResetAt) return false;
      if (TroopId != other.TroopId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroRid != 0L) hash ^= HeroRid.GetHashCode();
      if (HeroId != 0) hash ^= HeroId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (AdvStar != 0) hash ^= AdvStar.GetHashCode();
      if (attr_ != null) hash ^= Attr.GetHashCode();
      hash ^= skills_.GetHashCode();
      if (energy_ != null) hash ^= Energy.GetHashCode();
      if (state_ != null) hash ^= State.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (Awake != false) hash ^= Awake.GetHashCode();
      if (IsLock != false) hash ^= IsLock.GetHashCode();
      if (ResetAt != 0L) hash ^= ResetAt.GetHashCode();
      if (TroopId != 0L) hash ^= TroopId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroRid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroRid);
      }
      if (HeroId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HeroId);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (AdvStar != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AdvStar);
      }
      if (attr_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Attr);
      }
      skills_.WriteTo(output, _repeated_skills_codec);
      if (energy_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Energy);
      }
      if (state_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(State);
      }
      if (Exp != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Exp);
      }
      if (Awake != false) {
        output.WriteRawTag(80);
        output.WriteBool(Awake);
      }
      if (IsLock != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsLock);
      }
      if (ResetAt != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(ResetAt);
      }
      if (TroopId != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(TroopId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroRid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroRid);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (AdvStar != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdvStar);
      }
      if (attr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attr);
      }
      size += skills_.CalculateSize(_repeated_skills_codec);
      if (energy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Energy);
      }
      if (state_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (Awake != false) {
        size += 1 + 1;
      }
      if (IsLock != false) {
        size += 1 + 1;
      }
      if (ResetAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ResetAt);
      }
      if (TroopId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TroopId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hero other) {
      if (other == null) {
        return;
      }
      if (other.HeroRid != 0L) {
        HeroRid = other.HeroRid;
      }
      if (other.HeroId != 0) {
        HeroId = other.HeroId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.AdvStar != 0) {
        AdvStar = other.AdvStar;
      }
      if (other.attr_ != null) {
        if (attr_ == null) {
          attr_ = new global::Cspb.HeroAttr();
        }
        Attr.MergeFrom(other.Attr);
      }
      skills_.Add(other.skills_);
      if (other.energy_ != null) {
        if (energy_ == null) {
          energy_ = new global::Cspb.HeroEnergy();
        }
        Energy.MergeFrom(other.Energy);
      }
      if (other.state_ != null) {
        if (state_ == null) {
          state_ = new global::Cspb.HeroState();
        }
        State.MergeFrom(other.State);
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.Awake != false) {
        Awake = other.Awake;
      }
      if (other.IsLock != false) {
        IsLock = other.IsLock;
      }
      if (other.ResetAt != 0L) {
        ResetAt = other.ResetAt;
      }
      if (other.TroopId != 0L) {
        TroopId = other.TroopId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeroRid = input.ReadInt64();
            break;
          }
          case 16: {
            HeroId = input.ReadInt32();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            AdvStar = input.ReadInt32();
            break;
          }
          case 42: {
            if (attr_ == null) {
              attr_ = new global::Cspb.HeroAttr();
            }
            input.ReadMessage(attr_);
            break;
          }
          case 50: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
          case 58: {
            if (energy_ == null) {
              energy_ = new global::Cspb.HeroEnergy();
            }
            input.ReadMessage(energy_);
            break;
          }
          case 66: {
            if (state_ == null) {
              state_ = new global::Cspb.HeroState();
            }
            input.ReadMessage(state_);
            break;
          }
          case 72: {
            Exp = input.ReadInt32();
            break;
          }
          case 80: {
            Awake = input.ReadBool();
            break;
          }
          case 88: {
            IsLock = input.ReadBool();
            break;
          }
          case 96: {
            ResetAt = input.ReadInt64();
            break;
          }
          case 104: {
            TroopId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///增加，更新单个或多个Hero
  /// </summary>
  public sealed partial class HerosNtf : pb::IMessage<HerosNtf> {
    private static readonly pb::MessageParser<HerosNtf> _parser = new pb::MessageParser<HerosNtf>(() => new HerosNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HerosNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HerosNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HerosNtf(HerosNtf other) : this() {
      heros_ = other.heros_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HerosNtf Clone() {
      return new HerosNtf(this);
    }

    /// <summary>Field number for the "heros" field.</summary>
    public const int HerosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.Hero> _repeated_heros_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.Hero.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Hero> heros_ = new pbc::RepeatedField<global::Cspb.Hero>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Hero> Heros {
      get { return heros_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HerosNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HerosNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!heros_.Equals(other.heros_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= heros_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      heros_.WriteTo(output, _repeated_heros_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += heros_.CalculateSize(_repeated_heros_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HerosNtf other) {
      if (other == null) {
        return;
      }
      heros_.Add(other.heros_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            heros_.AddEntriesFrom(input, _repeated_heros_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 在玩家OB内，有行军信息的添加或修改
  /// </summary>
  public sealed partial class MarchsNtf : pb::IMessage<MarchsNtf> {
    private static readonly pb::MessageParser<MarchsNtf> _parser = new pb::MessageParser<MarchsNtf>(() => new MarchsNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarchsNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarchsNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarchsNtf(MarchsNtf other) : this() {
      marchs_ = other.marchs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarchsNtf Clone() {
      return new MarchsNtf(this);
    }

    /// <summary>Field number for the "marchs" field.</summary>
    public const int MarchsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.MarchBrief> _repeated_marchs_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.MarchBrief.Parser);
    private readonly pbc::RepeatedField<global::Cspb.MarchBrief> marchs_ = new pbc::RepeatedField<global::Cspb.MarchBrief>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.MarchBrief> Marchs {
      get { return marchs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarchsNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarchsNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!marchs_.Equals(other.marchs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= marchs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      marchs_.WriteTo(output, _repeated_marchs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += marchs_.CalculateSize(_repeated_marchs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarchsNtf other) {
      if (other == null) {
        return;
      }
      marchs_.Add(other.marchs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            marchs_.AddEntriesFrom(input, _repeated_marchs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 在玩家OB内，有行军信息删除
  /// </summary>
  public sealed partial class DelMarchNtf : pb::IMessage<DelMarchNtf> {
    private static readonly pb::MessageParser<DelMarchNtf> _parser = new pb::MessageParser<DelMarchNtf>(() => new DelMarchNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DelMarchNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelMarchNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelMarchNtf(DelMarchNtf other) : this() {
      marchIds_ = other.marchIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelMarchNtf Clone() {
      return new DelMarchNtf(this);
    }

    /// <summary>Field number for the "march_ids" field.</summary>
    public const int MarchIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_marchIds_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> marchIds_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> MarchIds {
      get { return marchIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DelMarchNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DelMarchNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!marchIds_.Equals(other.marchIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= marchIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      marchIds_.WriteTo(output, _repeated_marchIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += marchIds_.CalculateSize(_repeated_marchIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DelMarchNtf other) {
      if (other == null) {
        return;
      }
      marchIds_.Add(other.marchIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            marchIds_.AddEntriesFrom(input, _repeated_marchIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 在玩家OB内，Tile信息变动
  /// </summary>
  public sealed partial class TilesNtf : pb::IMessage<TilesNtf> {
    private static readonly pb::MessageParser<TilesNtf> _parser = new pb::MessageParser<TilesNtf>(() => new TilesNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TilesNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TilesNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TilesNtf(TilesNtf other) : this() {
      tiles_ = other.tiles_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TilesNtf Clone() {
      return new TilesNtf(this);
    }

    /// <summary>Field number for the "tiles" field.</summary>
    public const int TilesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.TileBrief> _repeated_tiles_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.TileBrief.Parser);
    private readonly pbc::RepeatedField<global::Cspb.TileBrief> tiles_ = new pbc::RepeatedField<global::Cspb.TileBrief>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.TileBrief> Tiles {
      get { return tiles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TilesNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TilesNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tiles_.Equals(other.tiles_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tiles_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tiles_.WriteTo(output, _repeated_tiles_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tiles_.CalculateSize(_repeated_tiles_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TilesNtf other) {
      if (other == null) {
        return;
      }
      tiles_.Add(other.tiles_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tiles_.AddEntriesFrom(input, _repeated_tiles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class KickoutNtf : pb::IMessage<KickoutNtf> {
    private static readonly pb::MessageParser<KickoutNtf> _parser = new pb::MessageParser<KickoutNtf>(() => new KickoutNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KickoutNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickoutNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickoutNtf(KickoutNtf other) : this() {
      reason_ = other.reason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KickoutNtf Clone() {
      return new KickoutNtf(this);
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 1;
    private global::Cspb.KickoutNtf.Types.Reason reason_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.KickoutNtf.Types.Reason Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KickoutNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KickoutNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reason != other.Reason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Reason != 0) hash ^= Reason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reason != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KickoutNtf other) {
      if (other == null) {
        return;
      }
      if (other.Reason != 0) {
        Reason = other.Reason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            reason_ = (global::Cspb.KickoutNtf.Types.Reason) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the KickoutNtf message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Reason {
        [pbr::OriginalName("Other_Login")] OtherLogin = 0,
      }

    }
    #endregion

  }

  public sealed partial class DelHerosNtf : pb::IMessage<DelHerosNtf> {
    private static readonly pb::MessageParser<DelHerosNtf> _parser = new pb::MessageParser<DelHerosNtf>(() => new DelHerosNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DelHerosNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelHerosNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelHerosNtf(DelHerosNtf other) : this() {
      heroRids_ = other.heroRids_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelHerosNtf Clone() {
      return new DelHerosNtf(this);
    }

    /// <summary>Field number for the "hero_rids" field.</summary>
    public const int HeroRidsFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_heroRids_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> heroRids_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> HeroRids {
      get { return heroRids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DelHerosNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DelHerosNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!heroRids_.Equals(other.heroRids_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= heroRids_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      heroRids_.WriteTo(output, _repeated_heroRids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += heroRids_.CalculateSize(_repeated_heroRids_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DelHerosNtf other) {
      if (other == null) {
        return;
      }
      heroRids_.Add(other.heroRids_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            heroRids_.AddEntriesFrom(input, _repeated_heroRids_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FEnergy : pb::IMessage<FEnergy> {
    private static readonly pb::MessageParser<FEnergy> _parser = new pb::MessageParser<FEnergy>(() => new FEnergy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FEnergy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FEnergy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FEnergy(FEnergy other) : this() {
      energy_ = other.energy_;
      lastT_ = other.lastT_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FEnergy Clone() {
      return new FEnergy(this);
    }

    /// <summary>Field number for the "energy" field.</summary>
    public const int EnergyFieldNumber = 1;
    private int energy_;
    /// <summary>
    ///体力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Energy {
      get { return energy_; }
      set {
        energy_ = value;
      }
    }

    /// <summary>Field number for the "last_t" field.</summary>
    public const int LastTFieldNumber = 2;
    private long lastT_;
    /// <summary>
    ///上次更新体力时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastT {
      get { return lastT_; }
      set {
        lastT_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FEnergy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FEnergy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Energy != other.Energy) return false;
      if (LastT != other.LastT) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Energy != 0) hash ^= Energy.GetHashCode();
      if (LastT != 0L) hash ^= LastT.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Energy != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Energy);
      }
      if (LastT != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LastT);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Energy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Energy);
      }
      if (LastT != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastT);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FEnergy other) {
      if (other == null) {
        return;
      }
      if (other.Energy != 0) {
        Energy = other.Energy;
      }
      if (other.LastT != 0L) {
        LastT = other.LastT;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Energy = input.ReadInt32();
            break;
          }
          case 16: {
            LastT = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FState : pb::IMessage<FState> {
    private static readonly pb::MessageParser<FState> _parser = new pb::MessageParser<FState>(() => new FState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FState(FState other) : this() {
      hurtT_ = other.hurtT_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FState Clone() {
      return new FState(this);
    }

    /// <summary>Field number for the "hurt_t" field.</summary>
    public const int HurtTFieldNumber = 1;
    private long hurtT_;
    /// <summary>
    ///重伤状态结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HurtT {
      get { return hurtT_; }
      set {
        hurtT_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HurtT != other.HurtT) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HurtT != 0L) hash ^= HurtT.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HurtT != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HurtT);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HurtT != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HurtT);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FState other) {
      if (other == null) {
        return;
      }
      if (other.HurtT != 0L) {
        HurtT = other.HurtT;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HurtT = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FConscript : pb::IMessage<FConscript> {
    private static readonly pb::MessageParser<FConscript> _parser = new pb::MessageParser<FConscript>(() => new FConscript());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FConscript> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FConscript() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FConscript(FConscript other) : this() {
      endT_ = other.endT_;
      cnt_ = other.cnt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FConscript Clone() {
      return new FConscript(this);
    }

    /// <summary>Field number for the "end_t" field.</summary>
    public const int EndTFieldNumber = 1;
    private long endT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndT {
      get { return endT_; }
      set {
        endT_ = value;
      }
    }

    /// <summary>Field number for the "cnt" field.</summary>
    public const int CntFieldNumber = 2;
    private int cnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cnt {
      get { return cnt_; }
      set {
        cnt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FConscript);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FConscript other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EndT != other.EndT) return false;
      if (Cnt != other.Cnt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EndT != 0L) hash ^= EndT.GetHashCode();
      if (Cnt != 0) hash ^= Cnt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EndT != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EndT);
      }
      if (Cnt != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cnt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EndT != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndT);
      }
      if (Cnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cnt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FConscript other) {
      if (other == null) {
        return;
      }
      if (other.EndT != 0L) {
        EndT = other.EndT;
      }
      if (other.Cnt != 0) {
        Cnt = other.Cnt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EndT = input.ReadInt64();
            break;
          }
          case 16: {
            Cnt = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 队伍里面的fighter
  /// </summary>
  public sealed partial class Fighter : pb::IMessage<Fighter> {
    private static readonly pb::MessageParser<Fighter> _parser = new pb::MessageParser<Fighter>(() => new Fighter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Fighter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Fighter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Fighter(Fighter other) : this() {
      heroRid_ = other.heroRid_;
      curHp_ = other.curHp_;
      pos_ = other.pos_;
      Energy = other.energy_ != null ? other.Energy.Clone() : null;
      State = other.state_ != null ? other.State.Clone() : null;
      Conscript = other.conscript_ != null ? other.Conscript.Clone() : null;
      heroId_ = other.heroId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Fighter Clone() {
      return new Fighter(this);
    }

    /// <summary>Field number for the "hero_rid" field.</summary>
    public const int HeroRidFieldNumber = 1;
    private long heroRid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroRid {
      get { return heroRid_; }
      set {
        heroRid_ = value;
      }
    }

    /// <summary>Field number for the "cur_hp" field.</summary>
    public const int CurHpFieldNumber = 2;
    private int curHp_;
    /// <summary>
    /// 当前兵力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurHp {
      get { return curHp_; }
      set {
        curHp_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private int pos_;
    /// <summary>
    /// 成员在部队中的位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "energy" field.</summary>
    public const int EnergyFieldNumber = 4;
    private global::Cspb.FEnergy energy_;
    /// <summary>
    /// 体力, 字段不为nil
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.FEnergy Energy {
      get { return energy_; }
      set {
        energy_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 5;
    private global::Cspb.FState state_;
    /// <summary>
    /// 状态, 字段不为nil
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.FState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "conscript" field.</summary>
    public const int ConscriptFieldNumber = 6;
    private global::Cspb.FConscript conscript_;
    /// <summary>
    /// 征兵情况, 字段可能为nil
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.FConscript Conscript {
      get { return conscript_; }
      set {
        conscript_ = value;
      }
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 7;
    private int heroId_;
    /// <summary>
    /// hreo_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Fighter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Fighter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroRid != other.HeroRid) return false;
      if (CurHp != other.CurHp) return false;
      if (Pos != other.Pos) return false;
      if (!object.Equals(Energy, other.Energy)) return false;
      if (!object.Equals(State, other.State)) return false;
      if (!object.Equals(Conscript, other.Conscript)) return false;
      if (HeroId != other.HeroId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroRid != 0L) hash ^= HeroRid.GetHashCode();
      if (CurHp != 0) hash ^= CurHp.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (energy_ != null) hash ^= Energy.GetHashCode();
      if (state_ != null) hash ^= State.GetHashCode();
      if (conscript_ != null) hash ^= Conscript.GetHashCode();
      if (HeroId != 0) hash ^= HeroId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroRid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroRid);
      }
      if (CurHp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurHp);
      }
      if (Pos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Pos);
      }
      if (energy_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Energy);
      }
      if (state_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(State);
      }
      if (conscript_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Conscript);
      }
      if (HeroId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HeroId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroRid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroRid);
      }
      if (CurHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurHp);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (energy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Energy);
      }
      if (state_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
      }
      if (conscript_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Conscript);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Fighter other) {
      if (other == null) {
        return;
      }
      if (other.HeroRid != 0L) {
        HeroRid = other.HeroRid;
      }
      if (other.CurHp != 0) {
        CurHp = other.CurHp;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.energy_ != null) {
        if (energy_ == null) {
          energy_ = new global::Cspb.FEnergy();
        }
        Energy.MergeFrom(other.Energy);
      }
      if (other.state_ != null) {
        if (state_ == null) {
          state_ = new global::Cspb.FState();
        }
        State.MergeFrom(other.State);
      }
      if (other.conscript_ != null) {
        if (conscript_ == null) {
          conscript_ = new global::Cspb.FConscript();
        }
        Conscript.MergeFrom(other.Conscript);
      }
      if (other.HeroId != 0) {
        HeroId = other.HeroId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeroRid = input.ReadInt64();
            break;
          }
          case 16: {
            CurHp = input.ReadInt32();
            break;
          }
          case 24: {
            Pos = input.ReadInt32();
            break;
          }
          case 34: {
            if (energy_ == null) {
              energy_ = new global::Cspb.FEnergy();
            }
            input.ReadMessage(energy_);
            break;
          }
          case 42: {
            if (state_ == null) {
              state_ = new global::Cspb.FState();
            }
            input.ReadMessage(state_);
            break;
          }
          case 50: {
            if (conscript_ == null) {
              conscript_ = new global::Cspb.FConscript();
            }
            input.ReadMessage(conscript_);
            break;
          }
          case 56: {
            HeroId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 描述部队在土地上面的行动, 可以进行多次相同种类的行动
  /// </summary>
  public sealed partial class TileAction : pb::IMessage<TileAction> {
    private static readonly pb::MessageParser<TileAction> _parser = new pb::MessageParser<TileAction>(() => new TileAction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TileAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileAction(TileAction other) : this() {
      actionType_ = other.actionType_;
      startPos_ = other.startPos_;
      destPos_ = other.destPos_;
      curActionFinishAt_ = other.curActionFinishAt_;
      maxActionCnt_ = other.maxActionCnt_;
      surActionCnt_ = other.surActionCnt_;
      startAt_ = other.startAt_;
      marchId_ = other.marchId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileAction Clone() {
      return new TileAction(this);
    }

    /// <summary>Field number for the "action_type" field.</summary>
    public const int ActionTypeFieldNumber = 1;
    private global::Cspb.TILE_ACTION_TYPE actionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.TILE_ACTION_TYPE ActionType {
      get { return actionType_; }
      set {
        actionType_ = value;
      }
    }

    /// <summary>Field number for the "start_pos" field.</summary>
    public const int StartPosFieldNumber = 2;
    private int startPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartPos {
      get { return startPos_; }
      set {
        startPos_ = value;
      }
    }

    /// <summary>Field number for the "dest_pos" field.</summary>
    public const int DestPosFieldNumber = 3;
    private int destPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DestPos {
      get { return destPos_; }
      set {
        destPos_ = value;
      }
    }

    /// <summary>Field number for the "cur_action_finish_at" field.</summary>
    public const int CurActionFinishAtFieldNumber = 4;
    private long curActionFinishAt_;
    /// <summary>
    /// 部队当前行动结束时间(这一次, 不是所有行动), 平局结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurActionFinishAt {
      get { return curActionFinishAt_; }
      set {
        curActionFinishAt_ = value;
      }
    }

    /// <summary>Field number for the "max_action_cnt" field.</summary>
    public const int MaxActionCntFieldNumber = 5;
    private int maxActionCnt_;
    /// <summary>
    /// 部队最大行动次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxActionCnt {
      get { return maxActionCnt_; }
      set {
        maxActionCnt_ = value;
      }
    }

    /// <summary>Field number for the "sur_action_cnt" field.</summary>
    public const int SurActionCntFieldNumber = 6;
    private int surActionCnt_;
    /// <summary>
    /// 部队当前剩余行动次数, 本次行动次数是剩余次数+1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SurActionCnt {
      get { return surActionCnt_; }
      set {
        surActionCnt_ = value;
      }
    }

    /// <summary>Field number for the "start_at" field.</summary>
    public const int StartAtFieldNumber = 7;
    private long startAt_;
    /// <summary>
    /// 部队出发时间, 不是行动开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartAt {
      get { return startAt_; }
      set {
        startAt_ = value;
      }
    }

    /// <summary>Field number for the "march_id" field.</summary>
    public const int MarchIdFieldNumber = 8;
    private long marchId_;
    /// <summary>
    /// 行军的march_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MarchId {
      get { return marchId_; }
      set {
        marchId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TileAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TileAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActionType != other.ActionType) return false;
      if (StartPos != other.StartPos) return false;
      if (DestPos != other.DestPos) return false;
      if (CurActionFinishAt != other.CurActionFinishAt) return false;
      if (MaxActionCnt != other.MaxActionCnt) return false;
      if (SurActionCnt != other.SurActionCnt) return false;
      if (StartAt != other.StartAt) return false;
      if (MarchId != other.MarchId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActionType != 0) hash ^= ActionType.GetHashCode();
      if (StartPos != 0) hash ^= StartPos.GetHashCode();
      if (DestPos != 0) hash ^= DestPos.GetHashCode();
      if (CurActionFinishAt != 0L) hash ^= CurActionFinishAt.GetHashCode();
      if (MaxActionCnt != 0) hash ^= MaxActionCnt.GetHashCode();
      if (SurActionCnt != 0) hash ^= SurActionCnt.GetHashCode();
      if (StartAt != 0L) hash ^= StartAt.GetHashCode();
      if (MarchId != 0L) hash ^= MarchId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActionType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ActionType);
      }
      if (StartPos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StartPos);
      }
      if (DestPos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DestPos);
      }
      if (CurActionFinishAt != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CurActionFinishAt);
      }
      if (MaxActionCnt != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxActionCnt);
      }
      if (SurActionCnt != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SurActionCnt);
      }
      if (StartAt != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(StartAt);
      }
      if (MarchId != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(MarchId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActionType);
      }
      if (StartPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartPos);
      }
      if (DestPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DestPos);
      }
      if (CurActionFinishAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurActionFinishAt);
      }
      if (MaxActionCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxActionCnt);
      }
      if (SurActionCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SurActionCnt);
      }
      if (StartAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartAt);
      }
      if (MarchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MarchId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TileAction other) {
      if (other == null) {
        return;
      }
      if (other.ActionType != 0) {
        ActionType = other.ActionType;
      }
      if (other.StartPos != 0) {
        StartPos = other.StartPos;
      }
      if (other.DestPos != 0) {
        DestPos = other.DestPos;
      }
      if (other.CurActionFinishAt != 0L) {
        CurActionFinishAt = other.CurActionFinishAt;
      }
      if (other.MaxActionCnt != 0) {
        MaxActionCnt = other.MaxActionCnt;
      }
      if (other.SurActionCnt != 0) {
        SurActionCnt = other.SurActionCnt;
      }
      if (other.StartAt != 0L) {
        StartAt = other.StartAt;
      }
      if (other.MarchId != 0L) {
        MarchId = other.MarchId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            actionType_ = (global::Cspb.TILE_ACTION_TYPE) input.ReadEnum();
            break;
          }
          case 16: {
            StartPos = input.ReadInt32();
            break;
          }
          case 24: {
            DestPos = input.ReadInt32();
            break;
          }
          case 32: {
            CurActionFinishAt = input.ReadInt64();
            break;
          }
          case 40: {
            MaxActionCnt = input.ReadInt32();
            break;
          }
          case 48: {
            SurActionCnt = input.ReadInt32();
            break;
          }
          case 56: {
            StartAt = input.ReadInt64();
            break;
          }
          case 64: {
            MarchId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TroopNtf : pb::IMessage<TroopNtf> {
    private static readonly pb::MessageParser<TroopNtf> _parser = new pb::MessageParser<TroopNtf>(() => new TroopNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TroopNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroopNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroopNtf(TroopNtf other) : this() {
      troopId_ = other.troopId_;
      fighters_ = other.fighters_.Clone();
      state_ = other.state_;
      Action = other.action_ != null ? other.Action.Clone() : null;
      localCityPos_ = other.localCityPos_;
      belongCityPos_ = other.belongCityPos_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroopNtf Clone() {
      return new TroopNtf(this);
    }

    /// <summary>Field number for the "troop_id" field.</summary>
    public const int TroopIdFieldNumber = 1;
    private long troopId_;
    /// <summary>
    /// 部队唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TroopId {
      get { return troopId_; }
      set {
        troopId_ = value;
      }
    }

    /// <summary>Field number for the "fighters" field.</summary>
    public const int FightersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cspb.Fighter> _repeated_fighters_codec
        = pb::FieldCodec.ForMessage(18, global::Cspb.Fighter.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Fighter> fighters_ = new pbc::RepeatedField<global::Cspb.Fighter>();
    /// <summary>
    /// 部队成员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Fighter> Fighters {
      get { return fighters_; }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private global::Cspb.TROOP_STATE state_ = 0;
    /// <summary>
    /// 部队状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.TROOP_STATE State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 7;
    private global::Cspb.TileAction action_;
    /// <summary>
    /// 部队行动时的信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.TileAction Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "local_city_pos" field.</summary>
    public const int LocalCityPosFieldNumber = 9;
    private int localCityPos_;
    /// <summary>
    /// 部队目前所在城池位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LocalCityPos {
      get { return localCityPos_; }
      set {
        localCityPos_ = value;
      }
    }

    /// <summary>Field number for the "belong_city_pos" field.</summary>
    public const int BelongCityPosFieldNumber = 10;
    private int belongCityPos_;
    /// <summary>
    /// 部队所属城池位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BelongCityPos {
      get { return belongCityPos_; }
      set {
        belongCityPos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TroopNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TroopNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TroopId != other.TroopId) return false;
      if(!fighters_.Equals(other.fighters_)) return false;
      if (State != other.State) return false;
      if (!object.Equals(Action, other.Action)) return false;
      if (LocalCityPos != other.LocalCityPos) return false;
      if (BelongCityPos != other.BelongCityPos) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TroopId != 0L) hash ^= TroopId.GetHashCode();
      hash ^= fighters_.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (action_ != null) hash ^= Action.GetHashCode();
      if (LocalCityPos != 0) hash ^= LocalCityPos.GetHashCode();
      if (BelongCityPos != 0) hash ^= BelongCityPos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TroopId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TroopId);
      }
      fighters_.WriteTo(output, _repeated_fighters_codec);
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) State);
      }
      if (action_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Action);
      }
      if (LocalCityPos != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(LocalCityPos);
      }
      if (BelongCityPos != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(BelongCityPos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TroopId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TroopId);
      }
      size += fighters_.CalculateSize(_repeated_fighters_codec);
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (action_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Action);
      }
      if (LocalCityPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LocalCityPos);
      }
      if (BelongCityPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BelongCityPos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TroopNtf other) {
      if (other == null) {
        return;
      }
      if (other.TroopId != 0L) {
        TroopId = other.TroopId;
      }
      fighters_.Add(other.fighters_);
      if (other.State != 0) {
        State = other.State;
      }
      if (other.action_ != null) {
        if (action_ == null) {
          action_ = new global::Cspb.TileAction();
        }
        Action.MergeFrom(other.Action);
      }
      if (other.LocalCityPos != 0) {
        LocalCityPos = other.LocalCityPos;
      }
      if (other.BelongCityPos != 0) {
        BelongCityPos = other.BelongCityPos;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TroopId = input.ReadInt64();
            break;
          }
          case 18: {
            fighters_.AddEntriesFrom(input, _repeated_fighters_codec);
            break;
          }
          case 24: {
            state_ = (global::Cspb.TROOP_STATE) input.ReadEnum();
            break;
          }
          case 58: {
            if (action_ == null) {
              action_ = new global::Cspb.TileAction();
            }
            input.ReadMessage(action_);
            break;
          }
          case 72: {
            LocalCityPos = input.ReadInt32();
            break;
          }
          case 80: {
            BelongCityPos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DelTroopNtf : pb::IMessage<DelTroopNtf> {
    private static readonly pb::MessageParser<DelTroopNtf> _parser = new pb::MessageParser<DelTroopNtf>(() => new DelTroopNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DelTroopNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelTroopNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelTroopNtf(DelTroopNtf other) : this() {
      troopId_ = other.troopId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelTroopNtf Clone() {
      return new DelTroopNtf(this);
    }

    /// <summary>Field number for the "troop_id" field.</summary>
    public const int TroopIdFieldNumber = 1;
    private long troopId_;
    /// <summary>
    /// 部队唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TroopId {
      get { return troopId_; }
      set {
        troopId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DelTroopNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DelTroopNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TroopId != other.TroopId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TroopId != 0L) hash ^= TroopId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TroopId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TroopId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TroopId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TroopId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DelTroopNtf other) {
      if (other == null) {
        return;
      }
      if (other.TroopId != 0L) {
        TroopId = other.TroopId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TroopId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///技能
  /// </summary>
  public sealed partial class Skill : pb::IMessage<Skill> {
    private static readonly pb::MessageParser<Skill> _parser = new pb::MessageParser<Skill>(() => new Skill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Skill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skill(Skill other) : this() {
      skillId_ = other.skillId_;
      rprogress_ = other.rprogress_;
      heros_ = other.heros_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Skill Clone() {
      return new Skill(this);
    }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private int skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "rprogress" field.</summary>
    public const int RprogressFieldNumber = 2;
    private int rprogress_;
    /// <summary>
    ///研究进度(可能大于100,为了以后技能进阶保留)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rprogress {
      get { return rprogress_; }
      set {
        rprogress_ = value;
      }
    }

    /// <summary>Field number for the "heros" field.</summary>
    public const int HerosFieldNumber = 3;
    private static readonly pb::FieldCodec<long> _repeated_heros_codec
        = pb::FieldCodec.ForInt64(26);
    private readonly pbc::RepeatedField<long> heros_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///已学英雄
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Heros {
      get { return heros_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Skill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Skill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkillId != other.SkillId) return false;
      if (Rprogress != other.Rprogress) return false;
      if(!heros_.Equals(other.heros_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (Rprogress != 0) hash ^= Rprogress.GetHashCode();
      hash ^= heros_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillId);
      }
      if (Rprogress != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Rprogress);
      }
      heros_.WriteTo(output, _repeated_heros_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (Rprogress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rprogress);
      }
      size += heros_.CalculateSize(_repeated_heros_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Skill other) {
      if (other == null) {
        return;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      if (other.Rprogress != 0) {
        Rprogress = other.Rprogress;
      }
      heros_.Add(other.heros_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SkillId = input.ReadInt32();
            break;
          }
          case 16: {
            Rprogress = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            heros_.AddEntriesFrom(input, _repeated_heros_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 技能部分更新
  /// </summary>
  public sealed partial class SkillsNtf : pb::IMessage<SkillsNtf> {
    private static readonly pb::MessageParser<SkillsNtf> _parser = new pb::MessageParser<SkillsNtf>(() => new SkillsNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillsNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillsNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillsNtf(SkillsNtf other) : this() {
      skills_ = other.skills_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillsNtf Clone() {
      return new SkillsNtf(this);
    }

    /// <summary>Field number for the "skills" field.</summary>
    public const int SkillsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.Skill> _repeated_skills_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.Skill.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Skill> skills_ = new pbc::RepeatedField<global::Cspb.Skill>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Skill> Skills {
      get { return skills_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillsNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillsNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!skills_.Equals(other.skills_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= skills_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      skills_.WriteTo(output, _repeated_skills_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += skills_.CalculateSize(_repeated_skills_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillsNtf other) {
      if (other == null) {
        return;
      }
      skills_.Add(other.skills_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战法经验
  /// </summary>
  public sealed partial class SkillExpNtf : pb::IMessage<SkillExpNtf> {
    private static readonly pb::MessageParser<SkillExpNtf> _parser = new pb::MessageParser<SkillExpNtf>(() => new SkillExpNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillExpNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillExpNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillExpNtf(SkillExpNtf other) : this() {
      skillExp_ = other.skillExp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillExpNtf Clone() {
      return new SkillExpNtf(this);
    }

    /// <summary>Field number for the "skill_exp" field.</summary>
    public const int SkillExpFieldNumber = 1;
    private int skillExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillExp {
      get { return skillExp_; }
      set {
        skillExp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillExpNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillExpNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkillExp != other.SkillExp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkillExp != 0) hash ^= SkillExp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillExp != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillExp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillExp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillExpNtf other) {
      if (other == null) {
        return;
      }
      if (other.SkillExp != 0) {
        SkillExp = other.SkillExp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SkillExp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战报里面的fighter
  /// </summary>
  public sealed partial class BRFighterBrief : pb::IMessage<BRFighterBrief> {
    private static readonly pb::MessageParser<BRFighterBrief> _parser = new pb::MessageParser<BRFighterBrief>(() => new BRFighterBrief());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BRFighterBrief> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BRFighterBrief() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BRFighterBrief(BRFighterBrief other) : this() {
      heroId_ = other.heroId_;
      pos_ = other.pos_;
      lv_ = other.lv_;
      curHp_ = other.curHp_;
      maxHp_ = other.maxHp_;
      heroRid_ = other.heroRid_;
      advStar_ = other.advStar_;
      awake_ = other.awake_;
      skills_ = other.skills_.Clone();
      exp_ = other.exp_;
      armType_ = other.armType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BRFighterBrief Clone() {
      return new BRFighterBrief(this);
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private int heroId_;
    /// <summary>
    /// 英雄ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private int pos_;
    /// <summary>
    /// 战场站位: 1 大营， 2 中军， 3 前锋
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "lv" field.</summary>
    public const int LvFieldNumber = 3;
    private int lv_;
    /// <summary>
    /// 战前英雄等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lv {
      get { return lv_; }
      set {
        lv_ = value;
      }
    }

    /// <summary>Field number for the "cur_hp" field.</summary>
    public const int CurHpFieldNumber = 4;
    private int curHp_;
    /// <summary>
    /// 离开战斗后的血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurHp {
      get { return curHp_; }
      set {
        curHp_ = value;
      }
    }

    /// <summary>Field number for the "max_hp" field.</summary>
    public const int MaxHpFieldNumber = 5;
    private int maxHp_;
    /// <summary>
    /// 进入战斗前的血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    /// <summary>Field number for the "hero_rid" field.</summary>
    public const int HeroRidFieldNumber = 6;
    private long heroRid_;
    /// <summary>
    /// 英雄RID, 因为战报是持久性的, 因此英雄的状态不要根据hero_rid索引的英雄判断
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroRid {
      get { return heroRid_; }
      set {
        heroRid_ = value;
      }
    }

    /// <summary>Field number for the "adv_star" field.</summary>
    public const int AdvStarFieldNumber = 7;
    private int advStar_;
    /// <summary>
    /// 进阶次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AdvStar {
      get { return advStar_; }
      set {
        advStar_ = value;
      }
    }

    /// <summary>Field number for the "awake" field.</summary>
    public const int AwakeFieldNumber = 8;
    private bool awake_;
    /// <summary>
    /// 是否觉醒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Awake {
      get { return awake_; }
      set {
        awake_ = value;
      }
    }

    /// <summary>Field number for the "skills" field.</summary>
    public const int SkillsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Cspb.BRSkill> _repeated_skills_codec
        = pb::FieldCodec.ForMessage(74, global::Cspb.BRSkill.Parser);
    private readonly pbc::RepeatedField<global::Cspb.BRSkill> skills_ = new pbc::RepeatedField<global::Cspb.BRSkill>();
    /// <summary>
    /// 英雄所带技能    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.BRSkill> Skills {
      get { return skills_; }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 10;
    private int exp_;
    /// <summary>
    /// 战前英雄经验值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "arm_type" field.</summary>
    public const int ArmTypeFieldNumber = 11;
    private global::Cspb.HERO_ARM_TYPE armType_ = 0;
    /// <summary>
    /// 兵种
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.HERO_ARM_TYPE ArmType {
      get { return armType_; }
      set {
        armType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BRFighterBrief);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BRFighterBrief other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroId != other.HeroId) return false;
      if (Pos != other.Pos) return false;
      if (Lv != other.Lv) return false;
      if (CurHp != other.CurHp) return false;
      if (MaxHp != other.MaxHp) return false;
      if (HeroRid != other.HeroRid) return false;
      if (AdvStar != other.AdvStar) return false;
      if (Awake != other.Awake) return false;
      if(!skills_.Equals(other.skills_)) return false;
      if (Exp != other.Exp) return false;
      if (ArmType != other.ArmType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroId != 0) hash ^= HeroId.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (Lv != 0) hash ^= Lv.GetHashCode();
      if (CurHp != 0) hash ^= CurHp.GetHashCode();
      if (MaxHp != 0) hash ^= MaxHp.GetHashCode();
      if (HeroRid != 0L) hash ^= HeroRid.GetHashCode();
      if (AdvStar != 0) hash ^= AdvStar.GetHashCode();
      if (Awake != false) hash ^= Awake.GetHashCode();
      hash ^= skills_.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (ArmType != 0) hash ^= ArmType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HeroId);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos);
      }
      if (Lv != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Lv);
      }
      if (CurHp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CurHp);
      }
      if (MaxHp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxHp);
      }
      if (HeroRid != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(HeroRid);
      }
      if (AdvStar != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AdvStar);
      }
      if (Awake != false) {
        output.WriteRawTag(64);
        output.WriteBool(Awake);
      }
      skills_.WriteTo(output, _repeated_skills_codec);
      if (Exp != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Exp);
      }
      if (ArmType != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) ArmType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (Lv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lv);
      }
      if (CurHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurHp);
      }
      if (MaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
      }
      if (HeroRid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroRid);
      }
      if (AdvStar != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdvStar);
      }
      if (Awake != false) {
        size += 1 + 1;
      }
      size += skills_.CalculateSize(_repeated_skills_codec);
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (ArmType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ArmType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BRFighterBrief other) {
      if (other == null) {
        return;
      }
      if (other.HeroId != 0) {
        HeroId = other.HeroId;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.Lv != 0) {
        Lv = other.Lv;
      }
      if (other.CurHp != 0) {
        CurHp = other.CurHp;
      }
      if (other.MaxHp != 0) {
        MaxHp = other.MaxHp;
      }
      if (other.HeroRid != 0L) {
        HeroRid = other.HeroRid;
      }
      if (other.AdvStar != 0) {
        AdvStar = other.AdvStar;
      }
      if (other.Awake != false) {
        Awake = other.Awake;
      }
      skills_.Add(other.skills_);
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.ArmType != 0) {
        ArmType = other.ArmType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeroId = input.ReadInt32();
            break;
          }
          case 16: {
            Pos = input.ReadInt32();
            break;
          }
          case 24: {
            Lv = input.ReadInt32();
            break;
          }
          case 32: {
            CurHp = input.ReadInt32();
            break;
          }
          case 40: {
            MaxHp = input.ReadInt32();
            break;
          }
          case 48: {
            HeroRid = input.ReadInt64();
            break;
          }
          case 56: {
            AdvStar = input.ReadInt32();
            break;
          }
          case 64: {
            Awake = input.ReadBool();
            break;
          }
          case 74: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
          case 80: {
            Exp = input.ReadInt32();
            break;
          }
          case 88: {
            armType_ = (global::Cspb.HERO_ARM_TYPE) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BRTroopBrief : pb::IMessage<BRTroopBrief> {
    private static readonly pb::MessageParser<BRTroopBrief> _parser = new pb::MessageParser<BRTroopBrief>(() => new BRTroopBrief());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BRTroopBrief> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BRTroopBrief() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BRTroopBrief(BRTroopBrief other) : this() {
      playerName_ = other.playerName_;
      fighters_ = other.fighters_.Clone();
      isNpc_ = other.isNpc_;
      unionName_ = other.unionName_;
      npcTroop_ = other.npcTroop_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BRTroopBrief Clone() {
      return new BRTroopBrief(this);
    }

    /// <summary>Field number for the "player_name" field.</summary>
    public const int PlayerNameFieldNumber = 1;
    private string playerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fighters" field.</summary>
    public const int FightersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cspb.BRFighterBrief> _repeated_fighters_codec
        = pb::FieldCodec.ForMessage(18, global::Cspb.BRFighterBrief.Parser);
    private readonly pbc::RepeatedField<global::Cspb.BRFighterBrief> fighters_ = new pbc::RepeatedField<global::Cspb.BRFighterBrief>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.BRFighterBrief> Fighters {
      get { return fighters_; }
    }

    /// <summary>Field number for the "is_npc" field.</summary>
    public const int IsNpcFieldNumber = 3;
    private bool isNpc_;
    /// <summary>
    /// 是否是npc ps:玩家也可能由npc部队    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNpc {
      get { return isNpc_; }
      set {
        isNpc_ = value;
      }
    }

    /// <summary>Field number for the "union_name" field.</summary>
    public const int UnionNameFieldNumber = 4;
    private string unionName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnionName {
      get { return unionName_; }
      set {
        unionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "npc_troop" field.</summary>
    public const int NpcTroopFieldNumber = 5;
    private int npcTroop_;
    /// <summary>
    /// npc troop id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NpcTroop {
      get { return npcTroop_; }
      set {
        npcTroop_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BRTroopBrief);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BRTroopBrief other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerName != other.PlayerName) return false;
      if(!fighters_.Equals(other.fighters_)) return false;
      if (IsNpc != other.IsNpc) return false;
      if (UnionName != other.UnionName) return false;
      if (NpcTroop != other.NpcTroop) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      hash ^= fighters_.GetHashCode();
      if (IsNpc != false) hash ^= IsNpc.GetHashCode();
      if (UnionName.Length != 0) hash ^= UnionName.GetHashCode();
      if (NpcTroop != 0) hash ^= NpcTroop.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerName);
      }
      fighters_.WriteTo(output, _repeated_fighters_codec);
      if (IsNpc != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsNpc);
      }
      if (UnionName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UnionName);
      }
      if (NpcTroop != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NpcTroop);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      size += fighters_.CalculateSize(_repeated_fighters_codec);
      if (IsNpc != false) {
        size += 1 + 1;
      }
      if (UnionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnionName);
      }
      if (NpcTroop != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NpcTroop);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BRTroopBrief other) {
      if (other == null) {
        return;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      fighters_.Add(other.fighters_);
      if (other.IsNpc != false) {
        IsNpc = other.IsNpc;
      }
      if (other.UnionName.Length != 0) {
        UnionName = other.UnionName;
      }
      if (other.NpcTroop != 0) {
        NpcTroop = other.NpcTroop;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerName = input.ReadString();
            break;
          }
          case 18: {
            fighters_.AddEntriesFrom(input, _repeated_fighters_codec);
            break;
          }
          case 24: {
            IsNpc = input.ReadBool();
            break;
          }
          case 34: {
            UnionName = input.ReadString();
            break;
          }
          case 40: {
            NpcTroop = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///给客户端的简要战报
  /// </summary>
  public sealed partial class BReportNtf : pb::IMessage<BReportNtf> {
    private static readonly pb::MessageParser<BReportNtf> _parser = new pb::MessageParser<BReportNtf>(() => new BReportNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BReportNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BReportNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BReportNtf(BReportNtf other) : this() {
      reportId_ = other.reportId_;
      pos_ = other.pos_;
      isAttacker_ = other.isAttacker_;
      result_ = other.result_;
      Attacker = other.attacker_ != null ? other.Attacker.Clone() : null;
      Defender = other.defender_ != null ? other.Defender.Clone() : null;
      time_ = other.time_;
      battleId_ = other.battleId_;
      isOccupy_ = other.isOccupy_;
      detailReportId_ = other.detailReportId_;
      dstType_ = other.dstType_;
      expGet_ = other.expGet_;
      awards_ = other.awards_.Clone();
      supply_ = other.supply_.Clone();
      subDurable_ = other.subDurable_;
      leftDurable_ = other.leftDurable_;
      uexpGet_ = other.uexpGet_;
      hasNewEnemy_ = other.hasNewEnemy_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BReportNtf Clone() {
      return new BReportNtf(this);
    }

    /// <summary>Field number for the "report_id" field.</summary>
    public const int ReportIdFieldNumber = 1;
    private long reportId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReportId {
      get { return reportId_; }
      set {
        reportId_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private int pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "is_attacker" field.</summary>
    public const int IsAttackerFieldNumber = 3;
    private bool isAttacker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAttacker {
      get { return isAttacker_; }
      set {
        isAttacker_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 4;
    private global::Cspb.BATTLE_RESULT result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.BATTLE_RESULT Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "attacker" field.</summary>
    public const int AttackerFieldNumber = 5;
    private global::Cspb.BRTroopBrief attacker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.BRTroopBrief Attacker {
      get { return attacker_; }
      set {
        attacker_ = value;
      }
    }

    /// <summary>Field number for the "defender" field.</summary>
    public const int DefenderFieldNumber = 6;
    private global::Cspb.BRTroopBrief defender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.BRTroopBrief Defender {
      get { return defender_; }
      set {
        defender_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 7;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 8;
    private long battleId_;
    /// <summary>
    /// 战斗编号，用于客户端合并连续战斗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "is_occupy" field.</summary>
    public const int IsOccupyFieldNumber = 9;
    private bool isOccupy_;
    /// <summary>
    /// atk是否占领土地
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOccupy {
      get { return isOccupy_; }
      set {
        isOccupy_ = value;
      }
    }

    /// <summary>Field number for the "detail_report_id" field.</summary>
    public const int DetailReportIdFieldNumber = 10;
    private long detailReportId_;
    /// <summary>
    /// 回放战报ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DetailReportId {
      get { return detailReportId_; }
      set {
        detailReportId_ = value;
      }
    }

    /// <summary>Field number for the "dst_type" field.</summary>
    public const int DstTypeFieldNumber = 11;
    private global::Cspb.ENTITY_TYPE dstType_ = 0;
    /// <summary>
    /// 用于显示简要的目的地属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ENTITY_TYPE DstType {
      get { return dstType_; }
      set {
        dstType_ = value;
      }
    }

    /// <summary>Field number for the "exp_get" field.</summary>
    public const int ExpGetFieldNumber = 12;
    private int expGet_;
    /// <summary>
    /// 单个英雄获得经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpGet {
      get { return expGet_; }
      set {
        expGet_ = value;
      }
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Cspb.Item> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(106, global::Cspb.Item.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Item> awards_ = new pbc::RepeatedField<global::Cspb.Item>();
    /// <summary>
    /// 资源奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Item> Awards {
      get { return awards_; }
    }

    /// <summary>Field number for the "supply" field.</summary>
    public const int SupplyFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Cspb.Item> _repeated_supply_codec
        = pb::FieldCodec.ForMessage(114, global::Cspb.Item.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Item> supply_ = new pbc::RepeatedField<global::Cspb.Item>();
    /// <summary>
    /// 战败补偿
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Item> Supply {
      get { return supply_; }
    }

    /// <summary>Field number for the "sub_durable" field.</summary>
    public const int SubDurableFieldNumber = 15;
    private int subDurable_;
    /// <summary>
    /// 拆除的耐久度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubDurable {
      get { return subDurable_; }
      set {
        subDurable_ = value;
      }
    }

    /// <summary>Field number for the "left_durable" field.</summary>
    public const int LeftDurableFieldNumber = 16;
    private int leftDurable_;
    /// <summary>
    /// 剩余耐久度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftDurable {
      get { return leftDurable_; }
      set {
        leftDurable_ = value;
      }
    }

    /// <summary>Field number for the "uexp_get" field.</summary>
    public const int UexpGetFieldNumber = 17;
    private int uexpGet_;
    /// <summary>
    /// 同盟获得经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UexpGet {
      get { return uexpGet_; }
      set {
        uexpGet_ = value;
      }
    }

    /// <summary>Field number for the "has_new_enemy" field.</summary>
    public const int HasNewEnemyFieldNumber = 18;
    private bool hasNewEnemy_;
    /// <summary>
    /// 遭遇新敌军
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNewEnemy {
      get { return hasNewEnemy_; }
      set {
        hasNewEnemy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BReportNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BReportNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReportId != other.ReportId) return false;
      if (Pos != other.Pos) return false;
      if (IsAttacker != other.IsAttacker) return false;
      if (Result != other.Result) return false;
      if (!object.Equals(Attacker, other.Attacker)) return false;
      if (!object.Equals(Defender, other.Defender)) return false;
      if (Time != other.Time) return false;
      if (BattleId != other.BattleId) return false;
      if (IsOccupy != other.IsOccupy) return false;
      if (DetailReportId != other.DetailReportId) return false;
      if (DstType != other.DstType) return false;
      if (ExpGet != other.ExpGet) return false;
      if(!awards_.Equals(other.awards_)) return false;
      if(!supply_.Equals(other.supply_)) return false;
      if (SubDurable != other.SubDurable) return false;
      if (LeftDurable != other.LeftDurable) return false;
      if (UexpGet != other.UexpGet) return false;
      if (HasNewEnemy != other.HasNewEnemy) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReportId != 0L) hash ^= ReportId.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (IsAttacker != false) hash ^= IsAttacker.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (attacker_ != null) hash ^= Attacker.GetHashCode();
      if (defender_ != null) hash ^= Defender.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (BattleId != 0L) hash ^= BattleId.GetHashCode();
      if (IsOccupy != false) hash ^= IsOccupy.GetHashCode();
      if (DetailReportId != 0L) hash ^= DetailReportId.GetHashCode();
      if (DstType != 0) hash ^= DstType.GetHashCode();
      if (ExpGet != 0) hash ^= ExpGet.GetHashCode();
      hash ^= awards_.GetHashCode();
      hash ^= supply_.GetHashCode();
      if (SubDurable != 0) hash ^= SubDurable.GetHashCode();
      if (LeftDurable != 0) hash ^= LeftDurable.GetHashCode();
      if (UexpGet != 0) hash ^= UexpGet.GetHashCode();
      if (HasNewEnemy != false) hash ^= HasNewEnemy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReportId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ReportId);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos);
      }
      if (IsAttacker != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsAttacker);
      }
      if (Result != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Result);
      }
      if (attacker_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Attacker);
      }
      if (defender_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Defender);
      }
      if (Time != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Time);
      }
      if (BattleId != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(BattleId);
      }
      if (IsOccupy != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsOccupy);
      }
      if (DetailReportId != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(DetailReportId);
      }
      if (DstType != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) DstType);
      }
      if (ExpGet != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ExpGet);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
      supply_.WriteTo(output, _repeated_supply_codec);
      if (SubDurable != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(SubDurable);
      }
      if (LeftDurable != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(LeftDurable);
      }
      if (UexpGet != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(UexpGet);
      }
      if (HasNewEnemy != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(HasNewEnemy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReportId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReportId);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (IsAttacker != false) {
        size += 1 + 1;
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (attacker_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attacker);
      }
      if (defender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Defender);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (BattleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BattleId);
      }
      if (IsOccupy != false) {
        size += 1 + 1;
      }
      if (DetailReportId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DetailReportId);
      }
      if (DstType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DstType);
      }
      if (ExpGet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpGet);
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      size += supply_.CalculateSize(_repeated_supply_codec);
      if (SubDurable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubDurable);
      }
      if (LeftDurable != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LeftDurable);
      }
      if (UexpGet != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UexpGet);
      }
      if (HasNewEnemy != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BReportNtf other) {
      if (other == null) {
        return;
      }
      if (other.ReportId != 0L) {
        ReportId = other.ReportId;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.IsAttacker != false) {
        IsAttacker = other.IsAttacker;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.attacker_ != null) {
        if (attacker_ == null) {
          attacker_ = new global::Cspb.BRTroopBrief();
        }
        Attacker.MergeFrom(other.Attacker);
      }
      if (other.defender_ != null) {
        if (defender_ == null) {
          defender_ = new global::Cspb.BRTroopBrief();
        }
        Defender.MergeFrom(other.Defender);
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.BattleId != 0L) {
        BattleId = other.BattleId;
      }
      if (other.IsOccupy != false) {
        IsOccupy = other.IsOccupy;
      }
      if (other.DetailReportId != 0L) {
        DetailReportId = other.DetailReportId;
      }
      if (other.DstType != 0) {
        DstType = other.DstType;
      }
      if (other.ExpGet != 0) {
        ExpGet = other.ExpGet;
      }
      awards_.Add(other.awards_);
      supply_.Add(other.supply_);
      if (other.SubDurable != 0) {
        SubDurable = other.SubDurable;
      }
      if (other.LeftDurable != 0) {
        LeftDurable = other.LeftDurable;
      }
      if (other.UexpGet != 0) {
        UexpGet = other.UexpGet;
      }
      if (other.HasNewEnemy != false) {
        HasNewEnemy = other.HasNewEnemy;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReportId = input.ReadInt64();
            break;
          }
          case 16: {
            Pos = input.ReadInt32();
            break;
          }
          case 24: {
            IsAttacker = input.ReadBool();
            break;
          }
          case 32: {
            result_ = (global::Cspb.BATTLE_RESULT) input.ReadEnum();
            break;
          }
          case 42: {
            if (attacker_ == null) {
              attacker_ = new global::Cspb.BRTroopBrief();
            }
            input.ReadMessage(attacker_);
            break;
          }
          case 50: {
            if (defender_ == null) {
              defender_ = new global::Cspb.BRTroopBrief();
            }
            input.ReadMessage(defender_);
            break;
          }
          case 56: {
            Time = input.ReadInt64();
            break;
          }
          case 64: {
            BattleId = input.ReadInt64();
            break;
          }
          case 72: {
            IsOccupy = input.ReadBool();
            break;
          }
          case 80: {
            DetailReportId = input.ReadInt64();
            break;
          }
          case 88: {
            dstType_ = (global::Cspb.ENTITY_TYPE) input.ReadEnum();
            break;
          }
          case 96: {
            ExpGet = input.ReadInt32();
            break;
          }
          case 106: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
          case 114: {
            supply_.AddEntriesFrom(input, _repeated_supply_codec);
            break;
          }
          case 120: {
            SubDurable = input.ReadInt32();
            break;
          }
          case 128: {
            LeftDurable = input.ReadInt32();
            break;
          }
          case 136: {
            UexpGet = input.ReadInt32();
            break;
          }
          case 144: {
            HasNewEnemy = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家拥有全部土地pos
  /// </summary>
  public sealed partial class Land : pb::IMessage<Land> {
    private static readonly pb::MessageParser<Land> _parser = new pb::MessageParser<Land>(() => new Land());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Land> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Land() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Land(Land other) : this() {
      pos_ = other.pos_;
      eType_ = other.eType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Land Clone() {
      return new Land(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private int pos_;
    /// <summary>
    /// 坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "e_type" field.</summary>
    public const int ETypeFieldNumber = 2;
    private global::Cspb.ENTITY_TYPE eType_ = 0;
    /// <summary>
    /// 土地类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ENTITY_TYPE EType {
      get { return eType_; }
      set {
        eType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Land);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Land other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pos != other.Pos) return false;
      if (EType != other.EType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (EType != 0) hash ^= EType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pos);
      }
      if (EType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (EType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Land other) {
      if (other == null) {
        return;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.EType != 0) {
        EType = other.EType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pos = input.ReadInt32();
            break;
          }
          case 16: {
            eType_ = (global::Cspb.ENTITY_TYPE) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LandListNtf : pb::IMessage<LandListNtf> {
    private static readonly pb::MessageParser<LandListNtf> _parser = new pb::MessageParser<LandListNtf>(() => new LandListNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LandListNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LandListNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LandListNtf(LandListNtf other) : this() {
      lands_ = other.lands_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LandListNtf Clone() {
      return new LandListNtf(this);
    }

    /// <summary>Field number for the "lands" field.</summary>
    public const int LandsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.Land> _repeated_lands_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.Land.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Land> lands_ = new pbc::RepeatedField<global::Cspb.Land>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Land> Lands {
      get { return lands_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LandListNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LandListNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!lands_.Equals(other.lands_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= lands_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      lands_.WriteTo(output, _repeated_lands_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += lands_.CalculateSize(_repeated_lands_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LandListNtf other) {
      if (other == null) {
        return;
      }
      lands_.Add(other.lands_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            lands_.AddEntriesFrom(input, _repeated_lands_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Resource
  /// </summary>
  public sealed partial class Resource : pb::IMessage<Resource> {
    private static readonly pb::MessageParser<Resource> _parser = new pb::MessageParser<Resource>(() => new Resource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Resource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resource(Resource other) : this() {
      id_ = other.id_;
      res_ = other.res_;
      produce_ = other.produce_;
      max_ = other.max_;
      refreshAt_ = other.refreshAt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resource Clone() {
      return new Resource(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::Cspb.RESOURCE_ID id_ = 0;
    /// <summary>
    /// id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.RESOURCE_ID Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "res" field.</summary>
    public const int ResFieldNumber = 2;
    private int res_;
    /// <summary>
    /// 目前的资源情况
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Res {
      get { return res_; }
      set {
        res_ = value;
      }
    }

    /// <summary>Field number for the "produce" field.</summary>
    public const int ProduceFieldNumber = 3;
    private int produce_;
    /// <summary>
    /// 产量, 每小时产量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Produce {
      get { return produce_; }
      set {
        produce_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 4;
    private int max_;
    /// <summary>
    /// 资源上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "refresh_at" field.</summary>
    public const int RefreshAtFieldNumber = 5;
    private long refreshAt_;
    /// <summary>
    /// 上次资源更新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RefreshAt {
      get { return refreshAt_; }
      set {
        refreshAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Resource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Resource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Res != other.Res) return false;
      if (Produce != other.Produce) return false;
      if (Max != other.Max) return false;
      if (RefreshAt != other.RefreshAt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Res != 0) hash ^= Res.GetHashCode();
      if (Produce != 0) hash ^= Produce.GetHashCode();
      if (Max != 0) hash ^= Max.GetHashCode();
      if (RefreshAt != 0L) hash ^= RefreshAt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Id);
      }
      if (Res != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Res);
      }
      if (Produce != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Produce);
      }
      if (Max != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Max);
      }
      if (RefreshAt != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(RefreshAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
      }
      if (Res != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Res);
      }
      if (Produce != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Produce);
      }
      if (Max != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Max);
      }
      if (RefreshAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RefreshAt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Resource other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Res != 0) {
        Res = other.Res;
      }
      if (other.Produce != 0) {
        Produce = other.Produce;
      }
      if (other.Max != 0) {
        Max = other.Max;
      }
      if (other.RefreshAt != 0L) {
        RefreshAt = other.RefreshAt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            id_ = (global::Cspb.RESOURCE_ID) input.ReadEnum();
            break;
          }
          case 16: {
            Res = input.ReadInt32();
            break;
          }
          case 24: {
            Produce = input.ReadInt32();
            break;
          }
          case 32: {
            Max = input.ReadInt32();
            break;
          }
          case 40: {
            RefreshAt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResourceNtf : pb::IMessage<ResourceNtf> {
    private static readonly pb::MessageParser<ResourceNtf> _parser = new pb::MessageParser<ResourceNtf>(() => new ResourceNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResourceNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceNtf(ResourceNtf other) : this() {
      resources_ = other.resources_.Clone();
      diamond_ = other.diamond_;
      coin_ = other.coin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceNtf Clone() {
      return new ResourceNtf(this);
    }

    /// <summary>Field number for the "resources" field.</summary>
    public const int ResourcesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cspb.Resource> _repeated_resources_codec
        = pb::FieldCodec.ForMessage(18, global::Cspb.Resource.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Resource> resources_ = new pbc::RepeatedField<global::Cspb.Resource>();
    /// <summary>
    /// 资源: 木材, 石料, 铁块, 粮草, 名望, 政令
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Resource> Resources {
      get { return resources_; }
    }

    /// <summary>Field number for the "diamond" field.</summary>
    public const int DiamondFieldNumber = 3;
    private int diamond_;
    /// <summary>
    /// 钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    /// <summary>Field number for the "coin" field.</summary>
    public const int CoinFieldNumber = 5;
    private int coin_;
    /// <summary>
    /// 钱币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResourceNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResourceNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!resources_.Equals(other.resources_)) return false;
      if (Diamond != other.Diamond) return false;
      if (Coin != other.Coin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= resources_.GetHashCode();
      if (Diamond != 0) hash ^= Diamond.GetHashCode();
      if (Coin != 0) hash ^= Coin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      resources_.WriteTo(output, _repeated_resources_codec);
      if (Diamond != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Diamond);
      }
      if (Coin != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Coin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += resources_.CalculateSize(_repeated_resources_codec);
      if (Diamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diamond);
      }
      if (Coin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResourceNtf other) {
      if (other == null) {
        return;
      }
      resources_.Add(other.resources_);
      if (other.Diamond != 0) {
        Diamond = other.Diamond;
      }
      if (other.Coin != 0) {
        Coin = other.Coin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            resources_.AddEntriesFrom(input, _repeated_resources_codec);
            break;
          }
          case 24: {
            Diamond = input.ReadInt32();
            break;
          }
          case 40: {
            Coin = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DSkillInfo : pb::IMessage<DSkillInfo> {
    private static readonly pb::MessageParser<DSkillInfo> _parser = new pb::MessageParser<DSkillInfo>(() => new DSkillInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DSkillInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DSkillInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DSkillInfo(DSkillInfo other) : this() {
      id_ = other.id_;
      lv_ = other.lv_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DSkillInfo Clone() {
      return new DSkillInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "lv" field.</summary>
    public const int LvFieldNumber = 2;
    private int lv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lv {
      get { return lv_; }
      set {
        lv_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DSkillInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DSkillInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Lv != other.Lv) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Lv != 0) hash ^= Lv.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Lv != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Lv);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Lv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lv);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DSkillInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Lv != 0) {
        Lv = other.Lv;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Lv = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 守军信息里面的fighter
  /// </summary>
  public sealed partial class DFighterInfo : pb::IMessage<DFighterInfo> {
    private static readonly pb::MessageParser<DFighterInfo> _parser = new pb::MessageParser<DFighterInfo>(() => new DFighterInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DFighterInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DFighterInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DFighterInfo(DFighterInfo other) : this() {
      heroId_ = other.heroId_;
      pos_ = other.pos_;
      curHp_ = other.curHp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DFighterInfo Clone() {
      return new DFighterInfo(this);
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private int heroId_;
    /// <summary>
    /// Fighter英雄ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private int pos_;
    /// <summary>
    /// Fighter在战场站位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "cur_hp" field.</summary>
    public const int CurHpFieldNumber = 3;
    private int curHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurHp {
      get { return curHp_; }
      set {
        curHp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DFighterInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DFighterInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroId != other.HeroId) return false;
      if (Pos != other.Pos) return false;
      if (CurHp != other.CurHp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroId != 0) hash ^= HeroId.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (CurHp != 0) hash ^= CurHp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HeroId);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos);
      }
      if (CurHp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurHp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (CurHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurHp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DFighterInfo other) {
      if (other == null) {
        return;
      }
      if (other.HeroId != 0) {
        HeroId = other.HeroId;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.CurHp != 0) {
        CurHp = other.CurHp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeroId = input.ReadInt32();
            break;
          }
          case 16: {
            Pos = input.ReadInt32();
            break;
          }
          case 24: {
            CurHp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BRSkill : pb::IMessage<BRSkill> {
    private static readonly pb::MessageParser<BRSkill> _parser = new pb::MessageParser<BRSkill>(() => new BRSkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BRSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BRSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BRSkill(BRSkill other) : this() {
      id_ = other.id_;
      lv_ = other.lv_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BRSkill Clone() {
      return new BRSkill(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "lv" field.</summary>
    public const int LvFieldNumber = 2;
    private int lv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lv {
      get { return lv_; }
      set {
        lv_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BRSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BRSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Lv != other.Lv) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Lv != 0) hash ^= Lv.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Lv != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Lv);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Lv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lv);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BRSkill other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Lv != 0) {
        Lv = other.Lv;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Lv = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战报中的Fighter
  /// </summary>
  public sealed partial class BRFighter : pb::IMessage<BRFighter> {
    private static readonly pb::MessageParser<BRFighter> _parser = new pb::MessageParser<BRFighter>(() => new BRFighter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BRFighter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BRFighter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BRFighter(BRFighter other) : this() {
      id_ = other.id_;
      heroId_ = other.heroId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BRFighter Clone() {
      return new BRFighter(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 1 攻方大营; 2 攻方中锋; 3 攻方前锋; 4 防守大营; 5 防守中锋; 6 防守前锋
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 2;
    private int heroId_;
    /// <summary>
    /// Fighter英雄ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BRFighter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BRFighter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (HeroId != other.HeroId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (HeroId != 0) hash ^= HeroId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (HeroId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HeroId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BRFighter other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.HeroId != 0) {
        HeroId = other.HeroId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            HeroId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleReport : pb::IMessage<BattleReport> {
    private static readonly pb::MessageParser<BattleReport> _parser = new pb::MessageParser<BattleReport>(() => new BattleReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleReport(BattleReport other) : this() {
      occurTime_ = other.occurTime_;
      fighters_ = other.fighters_.Clone();
      txtReport_ = other.txtReport_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleReport Clone() {
      return new BattleReport(this);
    }

    /// <summary>Field number for the "occur_time" field.</summary>
    public const int OccurTimeFieldNumber = 1;
    private long occurTime_;
    /// <summary>
    /// 战斗发生时间  单位秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OccurTime {
      get { return occurTime_; }
      set {
        occurTime_ = value;
      }
    }

    /// <summary>Field number for the "fighters" field.</summary>
    public const int FightersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cspb.BRFighter> _repeated_fighters_codec
        = pb::FieldCodec.ForMessage(18, global::Cspb.BRFighter.Parser);
    private readonly pbc::RepeatedField<global::Cspb.BRFighter> fighters_ = new pbc::RepeatedField<global::Cspb.BRFighter>();
    /// <summary>
    /// 战斗参与者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.BRFighter> Fighters {
      get { return fighters_; }
    }

    /// <summary>Field number for the "txt_report" field.</summary>
    public const int TxtReportFieldNumber = 4;
    private string txtReport_ = "";
    /// <summary>
    /// 文字战报
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TxtReport {
      get { return txtReport_; }
      set {
        txtReport_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OccurTime != other.OccurTime) return false;
      if(!fighters_.Equals(other.fighters_)) return false;
      if (TxtReport != other.TxtReport) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OccurTime != 0L) hash ^= OccurTime.GetHashCode();
      hash ^= fighters_.GetHashCode();
      if (TxtReport.Length != 0) hash ^= TxtReport.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OccurTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(OccurTime);
      }
      fighters_.WriteTo(output, _repeated_fighters_codec);
      if (TxtReport.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TxtReport);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OccurTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OccurTime);
      }
      size += fighters_.CalculateSize(_repeated_fighters_codec);
      if (TxtReport.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TxtReport);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleReport other) {
      if (other == null) {
        return;
      }
      if (other.OccurTime != 0L) {
        OccurTime = other.OccurTime;
      }
      fighters_.Add(other.fighters_);
      if (other.TxtReport.Length != 0) {
        TxtReport = other.TxtReport;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OccurTime = input.ReadInt64();
            break;
          }
          case 18: {
            fighters_.AddEntriesFrom(input, _repeated_fighters_codec);
            break;
          }
          case 34: {
            TxtReport = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BReportDetailNtf : pb::IMessage<BReportDetailNtf> {
    private static readonly pb::MessageParser<BReportDetailNtf> _parser = new pb::MessageParser<BReportDetailNtf>(() => new BReportDetailNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BReportDetailNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BReportDetailNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BReportDetailNtf(BReportDetailNtf other) : this() {
      reportId_ = other.reportId_;
      Report = other.report_ != null ? other.Report.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BReportDetailNtf Clone() {
      return new BReportDetailNtf(this);
    }

    /// <summary>Field number for the "report_id" field.</summary>
    public const int ReportIdFieldNumber = 1;
    private long reportId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReportId {
      get { return reportId_; }
      set {
        reportId_ = value;
      }
    }

    /// <summary>Field number for the "report" field.</summary>
    public const int ReportFieldNumber = 2;
    private global::Cspb.BattleReport report_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.BattleReport Report {
      get { return report_; }
      set {
        report_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BReportDetailNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BReportDetailNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReportId != other.ReportId) return false;
      if (!object.Equals(Report, other.Report)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReportId != 0L) hash ^= ReportId.GetHashCode();
      if (report_ != null) hash ^= Report.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReportId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ReportId);
      }
      if (report_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Report);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReportId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReportId);
      }
      if (report_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Report);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BReportDetailNtf other) {
      if (other == null) {
        return;
      }
      if (other.ReportId != 0L) {
        ReportId = other.ReportId;
      }
      if (other.report_ != null) {
        if (report_ == null) {
          report_ = new global::Cspb.BattleReport();
        }
        Report.MergeFrom(other.Report);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReportId = input.ReadInt64();
            break;
          }
          case 18: {
            if (report_ == null) {
              report_ = new global::Cspb.BattleReport();
            }
            input.ReadMessage(report_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PowerRankItem : pb::IMessage<PowerRankItem> {
    private static readonly pb::MessageParser<PowerRankItem> _parser = new pb::MessageParser<PowerRankItem>(() => new PowerRankItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PowerRankItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerRankItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerRankItem(PowerRankItem other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      power_ = other.power_;
      place_ = other.place_;
      area_ = other.area_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerRankItem Clone() {
      return new PowerRankItem(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 3;
    private int power_;
    /// <summary>
    /// 势力值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "place" field.</summary>
    public const int PlaceFieldNumber = 4;
    private int place_;
    /// <summary>
    /// 排名,从1开始
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Place {
      get { return place_; }
      set {
        place_ = value;
      }
    }

    /// <summary>Field number for the "area" field.</summary>
    public const int AreaFieldNumber = 5;
    private string area_ = "";
    /// <summary>
    /// 大陆
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Area {
      get { return area_; }
      set {
        area_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PowerRankItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PowerRankItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Power != other.Power) return false;
      if (Place != other.Place) return false;
      if (Area != other.Area) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      if (Place != 0) hash ^= Place.GetHashCode();
      if (Area.Length != 0) hash ^= Area.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Power != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Power);
      }
      if (Place != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Place);
      }
      if (Area.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Area);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (Place != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Place);
      }
      if (Area.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Area);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PowerRankItem other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.Place != 0) {
        Place = other.Place;
      }
      if (other.Area.Length != 0) {
        Area = other.Area;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Power = input.ReadInt32();
            break;
          }
          case 32: {
            Place = input.ReadInt32();
            break;
          }
          case 42: {
            Area = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MailAddr : pb::IMessage<MailAddr> {
    private static readonly pb::MessageParser<MailAddr> _parser = new pb::MessageParser<MailAddr>(() => new MailAddr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MailAddr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailAddr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailAddr(MailAddr other) : this() {
      name_ = other.name_;
      addrType_ = other.addrType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailAddr Clone() {
      return new MailAddr(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "addr_type" field.</summary>
    public const int AddrTypeFieldNumber = 2;
    private int addrType_;
    /// <summary>
    /// 1:玩家 2:工会 3:服务器 4:系统
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddrType {
      get { return addrType_; }
      set {
        addrType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MailAddr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MailAddr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (AddrType != other.AddrType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (AddrType != 0) hash ^= AddrType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (AddrType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AddrType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (AddrType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddrType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MailAddr other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.AddrType != 0) {
        AddrType = other.AddrType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            AddrType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 
  /// </summary>
  public sealed partial class MailContent : pb::IMessage<MailContent> {
    private static readonly pb::MessageParser<MailContent> _parser = new pb::MessageParser<MailContent>(() => new MailContent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MailContent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailContent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailContent(MailContent other) : this() {
      senderId_ = other.senderId_;
      senderName_ = other.senderName_;
      senderTitle_ = other.senderTitle_;
      contentType_ = other.contentType_;
      contentVal_ = other.contentVal_;
      titleId_ = other.titleId_;
      contentId_ = other.contentId_;
      replaces_ = other.replaces_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailContent Clone() {
      return new MailContent(this);
    }

    /// <summary>Field number for the "sender_id" field.</summary>
    public const int SenderIdFieldNumber = 1;
    private long senderId_;
    /// <summary>
    /// 发送者id -- 非系统邮件使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SenderId {
      get { return senderId_; }
      set {
        senderId_ = value;
      }
    }

    /// <summary>Field number for the "sender_name" field.</summary>
    public const int SenderNameFieldNumber = 2;
    private string senderName_ = "";
    /// <summary>
    /// 发送者名字 -- 非系统邮件使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SenderName {
      get { return senderName_; }
      set {
        senderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sender_title" field.</summary>
    public const int SenderTitleFieldNumber = 3;
    private int senderTitle_;
    /// <summary>
    /// 发送者职位 -- 非系统邮件, 联盟邮件/分组邮件使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SenderTitle {
      get { return senderTitle_; }
      set {
        senderTitle_ = value;
      }
    }

    /// <summary>Field number for the "content_type" field.</summary>
    public const int ContentTypeFieldNumber = 4;
    private int contentType_;
    /// <summary>
    /// 内容格式: 0-纯文本;1-标题&amp;内容需格式化;其他待定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContentType {
      get { return contentType_; }
      set {
        contentType_ = value;
      }
    }

    /// <summary>Field number for the "content_val" field.</summary>
    public const int ContentValFieldNumber = 5;
    private string contentVal_ = "";
    /// <summary>
    /// 邮件内容: content_type=0时生效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContentVal {
      get { return contentVal_; }
      set {
        contentVal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title_id" field.</summary>
    public const int TitleIdFieldNumber = 10;
    private string titleId_ = "";
    /// <summary>
    /// 以下内容, content_type=1时生效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TitleId {
      get { return titleId_; }
      set {
        titleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content_id" field.</summary>
    public const int ContentIdFieldNumber = 11;
    private string contentId_ = "";
    /// <summary>
    /// 内容id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContentId {
      get { return contentId_; }
      set {
        contentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "replaces" field.</summary>
    public const int ReplacesFieldNumber = 12;
    private static readonly pbc::MapField<string, string>.Codec _map_replaces_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 98);
    private readonly pbc::MapField<string, string> replaces_ = new pbc::MapField<string, string>();
    /// <summary>
    /// 替换内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Replaces {
      get { return replaces_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MailContent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MailContent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SenderId != other.SenderId) return false;
      if (SenderName != other.SenderName) return false;
      if (SenderTitle != other.SenderTitle) return false;
      if (ContentType != other.ContentType) return false;
      if (ContentVal != other.ContentVal) return false;
      if (TitleId != other.TitleId) return false;
      if (ContentId != other.ContentId) return false;
      if (!Replaces.Equals(other.Replaces)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SenderId != 0L) hash ^= SenderId.GetHashCode();
      if (SenderName.Length != 0) hash ^= SenderName.GetHashCode();
      if (SenderTitle != 0) hash ^= SenderTitle.GetHashCode();
      if (ContentType != 0) hash ^= ContentType.GetHashCode();
      if (ContentVal.Length != 0) hash ^= ContentVal.GetHashCode();
      if (TitleId.Length != 0) hash ^= TitleId.GetHashCode();
      if (ContentId.Length != 0) hash ^= ContentId.GetHashCode();
      hash ^= Replaces.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SenderId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SenderId);
      }
      if (SenderName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SenderName);
      }
      if (SenderTitle != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SenderTitle);
      }
      if (ContentType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ContentType);
      }
      if (ContentVal.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ContentVal);
      }
      if (TitleId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(TitleId);
      }
      if (ContentId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ContentId);
      }
      replaces_.WriteTo(output, _map_replaces_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SenderId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SenderId);
      }
      if (SenderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderName);
      }
      if (SenderTitle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SenderTitle);
      }
      if (ContentType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContentType);
      }
      if (ContentVal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentVal);
      }
      if (TitleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TitleId);
      }
      if (ContentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentId);
      }
      size += replaces_.CalculateSize(_map_replaces_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MailContent other) {
      if (other == null) {
        return;
      }
      if (other.SenderId != 0L) {
        SenderId = other.SenderId;
      }
      if (other.SenderName.Length != 0) {
        SenderName = other.SenderName;
      }
      if (other.SenderTitle != 0) {
        SenderTitle = other.SenderTitle;
      }
      if (other.ContentType != 0) {
        ContentType = other.ContentType;
      }
      if (other.ContentVal.Length != 0) {
        ContentVal = other.ContentVal;
      }
      if (other.TitleId.Length != 0) {
        TitleId = other.TitleId;
      }
      if (other.ContentId.Length != 0) {
        ContentId = other.ContentId;
      }
      replaces_.Add(other.replaces_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SenderId = input.ReadInt64();
            break;
          }
          case 18: {
            SenderName = input.ReadString();
            break;
          }
          case 24: {
            SenderTitle = input.ReadInt32();
            break;
          }
          case 32: {
            ContentType = input.ReadInt32();
            break;
          }
          case 42: {
            ContentVal = input.ReadString();
            break;
          }
          case 82: {
            TitleId = input.ReadString();
            break;
          }
          case 90: {
            ContentId = input.ReadString();
            break;
          }
          case 98: {
            replaces_.AddEntriesFrom(input, _map_replaces_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MailDetail : pb::IMessage<MailDetail> {
    private static readonly pb::MessageParser<MailDetail> _parser = new pb::MessageParser<MailDetail>(() => new MailDetail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MailDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailDetail(MailDetail other) : this() {
      mailId_ = other.mailId_;
      From = other.from_ != null ? other.From.Clone() : null;
      To = other.to_ != null ? other.To.Clone() : null;
      mailType_ = other.mailType_;
      createdAt_ = other.createdAt_;
      title_ = other.title_;
      content_ = other.content_;
      attachments_ = other.attachments_.Clone();
      status_ = other.status_;
      boxId_ = other.boxId_;
      relationId_ = other.relationId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailDetail Clone() {
      return new MailDetail(this);
    }

    /// <summary>Field number for the "mail_id" field.</summary>
    public const int MailIdFieldNumber = 1;
    private long mailId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MailId {
      get { return mailId_; }
      set {
        mailId_ = value;
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 2;
    private global::Cspb.MailAddr from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.MailAddr From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 3;
    private global::Cspb.MailAddr to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.MailAddr To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "mail_type" field.</summary>
    public const int MailTypeFieldNumber = 4;
    private int mailType_;
    /// <summary>
    /// 1:玩家 2:工会 3:服务器 4:系统邮件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MailType {
      get { return mailType_; }
      set {
        mailType_ = value;
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 5;
    private long createdAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 6;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 7;
    private string content_ = "";
    /// <summary>
    /// MailContent类型的json串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attachments" field.</summary>
    public const int AttachmentsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Cspb.Item> _repeated_attachments_codec
        = pb::FieldCodec.ForMessage(66, global::Cspb.Item.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Item> attachments_ = new pbc::RepeatedField<global::Cspb.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Item> Attachments {
      get { return attachments_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 9;
    private int status_;
    /// <summary>
    ///1:已读,2:加星标,4:已分享,8:附件已领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "box_id" field.</summary>
    public const int BoxIdFieldNumber = 10;
    private int boxId_;
    /// <summary>
    /// 0:收信箱, 13:收藏夹
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoxId {
      get { return boxId_; }
      set {
        boxId_ = value;
      }
    }

    /// <summary>Field number for the "relation_id" field.</summary>
    public const int RelationIdFieldNumber = 11;
    private long relationId_;
    /// <summary>
    /// 关联邮件id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RelationId {
      get { return relationId_; }
      set {
        relationId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MailDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MailDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MailId != other.MailId) return false;
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      if (MailType != other.MailType) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (Title != other.Title) return false;
      if (Content != other.Content) return false;
      if(!attachments_.Equals(other.attachments_)) return false;
      if (Status != other.Status) return false;
      if (BoxId != other.BoxId) return false;
      if (RelationId != other.RelationId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MailId != 0L) hash ^= MailId.GetHashCode();
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (MailType != 0) hash ^= MailType.GetHashCode();
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      hash ^= attachments_.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (BoxId != 0) hash ^= BoxId.GetHashCode();
      if (RelationId != 0L) hash ^= RelationId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MailId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MailId);
      }
      if (from_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(To);
      }
      if (MailType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MailType);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CreatedAt);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Title);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Content);
      }
      attachments_.WriteTo(output, _repeated_attachments_codec);
      if (Status != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Status);
      }
      if (BoxId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(BoxId);
      }
      if (RelationId != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(RelationId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MailId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MailId);
      }
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (MailType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MailType);
      }
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      size += attachments_.CalculateSize(_repeated_attachments_codec);
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (BoxId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoxId);
      }
      if (RelationId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RelationId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MailDetail other) {
      if (other == null) {
        return;
      }
      if (other.MailId != 0L) {
        MailId = other.MailId;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          from_ = new global::Cspb.MailAddr();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          to_ = new global::Cspb.MailAddr();
        }
        To.MergeFrom(other.To);
      }
      if (other.MailType != 0) {
        MailType = other.MailType;
      }
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      attachments_.Add(other.attachments_);
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.BoxId != 0) {
        BoxId = other.BoxId;
      }
      if (other.RelationId != 0L) {
        RelationId = other.RelationId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MailId = input.ReadInt64();
            break;
          }
          case 18: {
            if (from_ == null) {
              from_ = new global::Cspb.MailAddr();
            }
            input.ReadMessage(from_);
            break;
          }
          case 26: {
            if (to_ == null) {
              to_ = new global::Cspb.MailAddr();
            }
            input.ReadMessage(to_);
            break;
          }
          case 32: {
            MailType = input.ReadInt32();
            break;
          }
          case 40: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 50: {
            Title = input.ReadString();
            break;
          }
          case 58: {
            Content = input.ReadString();
            break;
          }
          case 66: {
            attachments_.AddEntriesFrom(input, _repeated_attachments_codec);
            break;
          }
          case 72: {
            Status = input.ReadInt32();
            break;
          }
          case 80: {
            BoxId = input.ReadInt32();
            break;
          }
          case 88: {
            RelationId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MailListNtf : pb::IMessage<MailListNtf> {
    private static readonly pb::MessageParser<MailListNtf> _parser = new pb::MessageParser<MailListNtf>(() => new MailListNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MailListNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailListNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailListNtf(MailListNtf other) : this() {
      refreshType_ = other.refreshType_;
      mails_ = other.mails_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailListNtf Clone() {
      return new MailListNtf(this);
    }

    /// <summary>Field number for the "refresh_type" field.</summary>
    public const int RefreshTypeFieldNumber = 1;
    private int refreshType_;
    /// <summary>
    /// 1:全量刷新，2:增量刷新
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefreshType {
      get { return refreshType_; }
      set {
        refreshType_ = value;
      }
    }

    /// <summary>Field number for the "mails" field.</summary>
    public const int MailsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cspb.MailDetail> _repeated_mails_codec
        = pb::FieldCodec.ForMessage(18, global::Cspb.MailDetail.Parser);
    private readonly pbc::RepeatedField<global::Cspb.MailDetail> mails_ = new pbc::RepeatedField<global::Cspb.MailDetail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.MailDetail> Mails {
      get { return mails_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MailListNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MailListNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RefreshType != other.RefreshType) return false;
      if(!mails_.Equals(other.mails_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RefreshType != 0) hash ^= RefreshType.GetHashCode();
      hash ^= mails_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RefreshType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RefreshType);
      }
      mails_.WriteTo(output, _repeated_mails_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RefreshType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefreshType);
      }
      size += mails_.CalculateSize(_repeated_mails_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MailListNtf other) {
      if (other == null) {
        return;
      }
      if (other.RefreshType != 0) {
        RefreshType = other.RefreshType;
      }
      mails_.Add(other.mails_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RefreshType = input.ReadInt32();
            break;
          }
          case 18: {
            mails_.AddEntriesFrom(input, _repeated_mails_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MailAwardsNtf : pb::IMessage<MailAwardsNtf> {
    private static readonly pb::MessageParser<MailAwardsNtf> _parser = new pb::MessageParser<MailAwardsNtf>(() => new MailAwardsNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MailAwardsNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailAwardsNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailAwardsNtf(MailAwardsNtf other) : this() {
      mailId_ = other.mailId_;
      awards_ = other.awards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailAwardsNtf Clone() {
      return new MailAwardsNtf(this);
    }

    /// <summary>Field number for the "mail_id" field.</summary>
    public const int MailIdFieldNumber = 1;
    private long mailId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MailId {
      get { return mailId_; }
      set {
        mailId_ = value;
      }
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cspb.Item> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(18, global::Cspb.Item.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Item> awards_ = new pbc::RepeatedField<global::Cspb.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Item> Awards {
      get { return awards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MailAwardsNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MailAwardsNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MailId != other.MailId) return false;
      if(!awards_.Equals(other.awards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MailId != 0L) hash ^= MailId.GetHashCode();
      hash ^= awards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MailId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MailId);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MailId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MailId);
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MailAwardsNtf other) {
      if (other == null) {
        return;
      }
      if (other.MailId != 0L) {
        MailId = other.MailId;
      }
      awards_.Add(other.awards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MailId = input.ReadInt64();
            break;
          }
          case 18: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MailBoxInfo : pb::IMessage<MailBoxInfo> {
    private static readonly pb::MessageParser<MailBoxInfo> _parser = new pb::MessageParser<MailBoxInfo>(() => new MailBoxInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MailBoxInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailBoxInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailBoxInfo(MailBoxInfo other) : this() {
      boxId_ = other.boxId_;
      unread_ = other.unread_;
      total_ = other.total_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailBoxInfo Clone() {
      return new MailBoxInfo(this);
    }

    /// <summary>Field number for the "box_id" field.</summary>
    public const int BoxIdFieldNumber = 1;
    private int boxId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoxId {
      get { return boxId_; }
      set {
        boxId_ = value;
      }
    }

    /// <summary>Field number for the "Unread" field.</summary>
    public const int UnreadFieldNumber = 2;
    private int unread_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Unread {
      get { return unread_; }
      set {
        unread_ = value;
      }
    }

    /// <summary>Field number for the "Total" field.</summary>
    public const int TotalFieldNumber = 3;
    private int total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MailBoxInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MailBoxInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BoxId != other.BoxId) return false;
      if (Unread != other.Unread) return false;
      if (Total != other.Total) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BoxId != 0) hash ^= BoxId.GetHashCode();
      if (Unread != 0) hash ^= Unread.GetHashCode();
      if (Total != 0) hash ^= Total.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BoxId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BoxId);
      }
      if (Unread != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Unread);
      }
      if (Total != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Total);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BoxId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoxId);
      }
      if (Unread != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unread);
      }
      if (Total != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Total);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MailBoxInfo other) {
      if (other == null) {
        return;
      }
      if (other.BoxId != 0) {
        BoxId = other.BoxId;
      }
      if (other.Unread != 0) {
        Unread = other.Unread;
      }
      if (other.Total != 0) {
        Total = other.Total;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BoxId = input.ReadInt32();
            break;
          }
          case 16: {
            Unread = input.ReadInt32();
            break;
          }
          case 24: {
            Total = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MailBoxNtf : pb::IMessage<MailBoxNtf> {
    private static readonly pb::MessageParser<MailBoxNtf> _parser = new pb::MessageParser<MailBoxNtf>(() => new MailBoxNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MailBoxNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailBoxNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailBoxNtf(MailBoxNtf other) : this() {
      boxes_ = other.boxes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailBoxNtf Clone() {
      return new MailBoxNtf(this);
    }

    /// <summary>Field number for the "boxes" field.</summary>
    public const int BoxesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.MailBoxInfo> _repeated_boxes_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.MailBoxInfo.Parser);
    private readonly pbc::RepeatedField<global::Cspb.MailBoxInfo> boxes_ = new pbc::RepeatedField<global::Cspb.MailBoxInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.MailBoxInfo> Boxes {
      get { return boxes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MailBoxNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MailBoxNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!boxes_.Equals(other.boxes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= boxes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      boxes_.WriteTo(output, _repeated_boxes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += boxes_.CalculateSize(_repeated_boxes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MailBoxNtf other) {
      if (other == null) {
        return;
      }
      boxes_.Add(other.boxes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            boxes_.AddEntriesFrom(input, _repeated_boxes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChatMessage : pb::IMessage<ChatMessage> {
    private static readonly pb::MessageParser<ChatMessage> _parser = new pb::MessageParser<ChatMessage>(() => new ChatMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessage(ChatMessage other) : this() {
      channel_ = other.channel_;
      from_ = other.from_;
      message_ = other.message_;
      attachment_ = other.attachment_;
      createdAt_ = other.createdAt_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatMessage Clone() {
      return new ChatMessage(this);
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 1;
    private global::Cspb.MC_TYPE channel_ = 0;
    /// <summary>
    /// 聊天频道
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.MC_TYPE Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 2;
    private string from_ = "";
    /// <summary>
    /// 发送者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private string message_ = "";
    /// <summary>
    /// 消息文本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attachment" field.</summary>
    public const int AttachmentFieldNumber = 4;
    private string attachment_ = "";
    /// <summary>
    /// 附件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Attachment {
      get { return attachment_; }
      set {
        attachment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 5;
    private long createdAt_;
    /// <summary>
    /// 发送时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 6;
    private global::Cspb.CHAT_STATUS status_ = 0;
    /// <summary>
    /// 状态：已读，未读
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.CHAT_STATUS Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Channel != other.Channel) return false;
      if (From != other.From) return false;
      if (Message != other.Message) return false;
      if (Attachment != other.Attachment) return false;
      if (CreatedAt != other.CreatedAt) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Channel != 0) hash ^= Channel.GetHashCode();
      if (From.Length != 0) hash ^= From.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Attachment.Length != 0) hash ^= Attachment.GetHashCode();
      if (CreatedAt != 0L) hash ^= CreatedAt.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Channel != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Channel);
      }
      if (From.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(From);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (Attachment.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Attachment);
      }
      if (CreatedAt != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CreatedAt);
      }
      if (Status != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Channel);
      }
      if (From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Attachment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Attachment);
      }
      if (CreatedAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedAt);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatMessage other) {
      if (other == null) {
        return;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
      if (other.From.Length != 0) {
        From = other.From;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Attachment.Length != 0) {
        Attachment = other.Attachment;
      }
      if (other.CreatedAt != 0L) {
        CreatedAt = other.CreatedAt;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            channel_ = (global::Cspb.MC_TYPE) input.ReadEnum();
            break;
          }
          case 18: {
            From = input.ReadString();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            Attachment = input.ReadString();
            break;
          }
          case 40: {
            CreatedAt = input.ReadInt64();
            break;
          }
          case 48: {
            status_ = (global::Cspb.CHAT_STATUS) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChatNtf : pb::IMessage<ChatNtf> {
    private static readonly pb::MessageParser<ChatNtf> _parser = new pb::MessageParser<ChatNtf>(() => new ChatNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatNtf(ChatNtf other) : this() {
      refreshType_ = other.refreshType_;
      msg_ = other.msg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatNtf Clone() {
      return new ChatNtf(this);
    }

    /// <summary>Field number for the "refresh_type" field.</summary>
    public const int RefreshTypeFieldNumber = 1;
    private global::Cspb.REFRESH_TYPE refreshType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.REFRESH_TYPE RefreshType {
      get { return refreshType_; }
      set {
        refreshType_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cspb.ChatMessage> _repeated_msg_codec
        = pb::FieldCodec.ForMessage(18, global::Cspb.ChatMessage.Parser);
    private readonly pbc::RepeatedField<global::Cspb.ChatMessage> msg_ = new pbc::RepeatedField<global::Cspb.ChatMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.ChatMessage> Msg {
      get { return msg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RefreshType != other.RefreshType) return false;
      if(!msg_.Equals(other.msg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RefreshType != 0) hash ^= RefreshType.GetHashCode();
      hash ^= msg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RefreshType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RefreshType);
      }
      msg_.WriteTo(output, _repeated_msg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RefreshType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RefreshType);
      }
      size += msg_.CalculateSize(_repeated_msg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatNtf other) {
      if (other == null) {
        return;
      }
      if (other.RefreshType != 0) {
        RefreshType = other.RefreshType;
      }
      msg_.Add(other.msg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            refreshType_ = (global::Cspb.REFRESH_TYPE) input.ReadEnum();
            break;
          }
          case 18: {
            msg_.AddEntriesFrom(input, _repeated_msg_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家收藏的土地
  /// </summary>
  public sealed partial class CollectLandsNtf : pb::IMessage<CollectLandsNtf> {
    private static readonly pb::MessageParser<CollectLandsNtf> _parser = new pb::MessageParser<CollectLandsNtf>(() => new CollectLandsNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CollectLandsNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectLandsNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectLandsNtf(CollectLandsNtf other) : this() {
      lands_ = other.lands_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollectLandsNtf Clone() {
      return new CollectLandsNtf(this);
    }

    /// <summary>Field number for the "lands" field.</summary>
    public const int LandsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_lands_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> lands_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Lands {
      get { return lands_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CollectLandsNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CollectLandsNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!lands_.Equals(other.lands_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= lands_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      lands_.WriteTo(output, _repeated_lands_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += lands_.CalculateSize(_repeated_lands_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CollectLandsNtf other) {
      if (other == null) {
        return;
      }
      lands_.Add(other.lands_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            lands_.AddEntriesFrom(input, _repeated_lands_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家获得的物品
  /// </summary>
  public sealed partial class Item : pb::IMessage<Item> {
    private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Item> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Item() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Item(Item other) : this() {
      typ_ = other.typ_;
      id_ = other.id_;
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Item Clone() {
      return new Item(this);
    }

    /// <summary>Field number for the "typ" field.</summary>
    public const int TypFieldNumber = 1;
    private global::Cspb.ITEM_TYPE typ_ = 0;
    /// <summary>
    /// 物品类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ITEM_TYPE Typ {
      get { return typ_; }
      set {
        typ_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    /// <summary>
    /// 物品类型下子id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 3;
    private int num_;
    /// <summary>
    /// 物品数量, 英雄/技能数量应该为1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Item);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Item other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Typ != other.Typ) return false;
      if (Id != other.Id) return false;
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Typ != 0) hash ^= Typ.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Typ != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Typ);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (Num != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Typ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Typ);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Item other) {
      if (other == null) {
        return;
      }
      if (other.Typ != 0) {
        Typ = other.Typ;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            typ_ = (global::Cspb.ITEM_TYPE) input.ReadEnum();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 抽奖的奖励
  /// </summary>
  public sealed partial class GachaAward : pb::IMessage<GachaAward> {
    private static readonly pb::MessageParser<GachaAward> _parser = new pb::MessageParser<GachaAward>(() => new GachaAward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GachaAward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GachaAward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GachaAward(GachaAward other) : this() {
      ExpectAward = other.expectAward_ != null ? other.ExpectAward.Clone() : null;
      rid_ = other.rid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GachaAward Clone() {
      return new GachaAward(this);
    }

    /// <summary>Field number for the "expect_award" field.</summary>
    public const int ExpectAwardFieldNumber = 1;
    private global::Cspb.Item expectAward_;
    /// <summary>
    /// 抽到的物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.Item ExpectAward {
      get { return expectAward_; }
      set {
        expectAward_ = value;
      }
    }

    /// <summary>Field number for the "rid" field.</summary>
    public const int RidFieldNumber = 2;
    private long rid_;
    /// <summary>
    /// ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Rid {
      get { return rid_; }
      set {
        rid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GachaAward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GachaAward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ExpectAward, other.ExpectAward)) return false;
      if (Rid != other.Rid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (expectAward_ != null) hash ^= ExpectAward.GetHashCode();
      if (Rid != 0L) hash ^= Rid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (expectAward_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ExpectAward);
      }
      if (Rid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Rid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (expectAward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpectAward);
      }
      if (Rid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Rid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GachaAward other) {
      if (other == null) {
        return;
      }
      if (other.expectAward_ != null) {
        if (expectAward_ == null) {
          expectAward_ = new global::Cspb.Item();
        }
        ExpectAward.MergeFrom(other.ExpectAward);
      }
      if (other.Rid != 0L) {
        Rid = other.Rid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (expectAward_ == null) {
              expectAward_ = new global::Cspb.Item();
            }
            input.ReadMessage(expectAward_);
            break;
          }
          case 16: {
            Rid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// </summary>
  public sealed partial class GachaPrice : pb::IMessage<GachaPrice> {
    private static readonly pb::MessageParser<GachaPrice> _parser = new pb::MessageParser<GachaPrice>(() => new GachaPrice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GachaPrice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GachaPrice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GachaPrice(GachaPrice other) : this() {
      id_ = other.id_;
      Price = other.price_ != null ? other.Price.Clone() : null;
      NextPrice = other.nextPrice_ != null ? other.NextPrice.Clone() : null;
      freeCount_ = other.freeCount_;
      gachaCount_ = other.gachaCount_;
      nextFreeTime_ = other.nextFreeTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GachaPrice Clone() {
      return new GachaPrice(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 2;
    private global::Cspb.Item price_;
    /// <summary>
    /// 价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.Item Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "next_price" field.</summary>
    public const int NextPriceFieldNumber = 3;
    private global::Cspb.Item nextPrice_;
    /// <summary>
    /// 下次价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.Item NextPrice {
      get { return nextPrice_; }
      set {
        nextPrice_ = value;
      }
    }

    /// <summary>Field number for the "free_count" field.</summary>
    public const int FreeCountFieldNumber = 4;
    private int freeCount_;
    /// <summary>
    /// 剩余免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeCount {
      get { return freeCount_; }
      set {
        freeCount_ = value;
      }
    }

    /// <summary>Field number for the "gacha_count" field.</summary>
    public const int GachaCountFieldNumber = 5;
    private int gachaCount_;
    /// <summary>
    /// 次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GachaCount {
      get { return gachaCount_; }
      set {
        gachaCount_ = value;
      }
    }

    /// <summary>Field number for the "next_free_time" field.</summary>
    public const int NextFreeTimeFieldNumber = 6;
    private long nextFreeTime_;
    /// <summary>
    /// 下次免费时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NextFreeTime {
      get { return nextFreeTime_; }
      set {
        nextFreeTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GachaPrice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GachaPrice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Price, other.Price)) return false;
      if (!object.Equals(NextPrice, other.NextPrice)) return false;
      if (FreeCount != other.FreeCount) return false;
      if (GachaCount != other.GachaCount) return false;
      if (NextFreeTime != other.NextFreeTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (price_ != null) hash ^= Price.GetHashCode();
      if (nextPrice_ != null) hash ^= NextPrice.GetHashCode();
      if (FreeCount != 0) hash ^= FreeCount.GetHashCode();
      if (GachaCount != 0) hash ^= GachaCount.GetHashCode();
      if (NextFreeTime != 0L) hash ^= NextFreeTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (price_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Price);
      }
      if (nextPrice_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(NextPrice);
      }
      if (FreeCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FreeCount);
      }
      if (GachaCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GachaCount);
      }
      if (NextFreeTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(NextFreeTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (price_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Price);
      }
      if (nextPrice_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NextPrice);
      }
      if (FreeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeCount);
      }
      if (GachaCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GachaCount);
      }
      if (NextFreeTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NextFreeTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GachaPrice other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.price_ != null) {
        if (price_ == null) {
          price_ = new global::Cspb.Item();
        }
        Price.MergeFrom(other.Price);
      }
      if (other.nextPrice_ != null) {
        if (nextPrice_ == null) {
          nextPrice_ = new global::Cspb.Item();
        }
        NextPrice.MergeFrom(other.NextPrice);
      }
      if (other.FreeCount != 0) {
        FreeCount = other.FreeCount;
      }
      if (other.GachaCount != 0) {
        GachaCount = other.GachaCount;
      }
      if (other.NextFreeTime != 0L) {
        NextFreeTime = other.NextFreeTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (price_ == null) {
              price_ = new global::Cspb.Item();
            }
            input.ReadMessage(price_);
            break;
          }
          case 26: {
            if (nextPrice_ == null) {
              nextPrice_ = new global::Cspb.Item();
            }
            input.ReadMessage(nextPrice_);
            break;
          }
          case 32: {
            FreeCount = input.ReadInt32();
            break;
          }
          case 40: {
            GachaCount = input.ReadInt32();
            break;
          }
          case 48: {
            NextFreeTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// </summary>
  public sealed partial class GachaBag : pb::IMessage<GachaBag> {
    private static readonly pb::MessageParser<GachaBag> _parser = new pb::MessageParser<GachaBag>(() => new GachaBag());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GachaBag> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GachaBag() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GachaBag(GachaBag other) : this() {
      id_ = other.id_;
      packageId_ = other.packageId_;
      count_ = other.count_;
      disappearTime_ = other.disappearTime_;
      prices_ = other.prices_.Clone();
      awards_ = other.awards_.Clone();
      active_ = other.active_;
      level_ = other.level_;
      totalCount_ = other.totalCount_;
      daily_ = other.daily_;
      nextSurprise_ = other.nextSurprise_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GachaBag Clone() {
      return new GachaBag(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    /// <summary>
    /// ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "package_id" field.</summary>
    public const int PackageIdFieldNumber = 2;
    private int packageId_;
    /// <summary>
    /// 卡包ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackageId {
      get { return packageId_; }
      set {
        packageId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private int count_;
    /// <summary>
    /// 剩余次数 -1 无限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "disappear_time" field.</summary>
    public const int DisappearTimeFieldNumber = 4;
    private long disappearTime_;
    /// <summary>
    /// 消失时间  0 不消失
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DisappearTime {
      get { return disappearTime_; }
      set {
        disappearTime_ = value;
      }
    }

    /// <summary>Field number for the "prices" field.</summary>
    public const int PricesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Cspb.GachaPrice> _repeated_prices_codec
        = pb::FieldCodec.ForMessage(42, global::Cspb.GachaPrice.Parser);
    private readonly pbc::RepeatedField<global::Cspb.GachaPrice> prices_ = new pbc::RepeatedField<global::Cspb.GachaPrice>();
    /// <summary>
    /// 价格列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.GachaPrice> Prices {
      get { return prices_; }
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Cspb.Item> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(50, global::Cspb.Item.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Item> awards_ = new pbc::RepeatedField<global::Cspb.Item>();
    /// <summary>
    /// 奖励列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Item> Awards {
      get { return awards_; }
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 7;
    private int active_;
    /// <summary>
    /// 未激活原因，0， 激活
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 8;
    private int level_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "total_count" field.</summary>
    public const int TotalCountFieldNumber = 9;
    private int totalCount_;
    /// <summary>
    /// 总次数 -1 无限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalCount {
      get { return totalCount_; }
      set {
        totalCount_ = value;
      }
    }

    /// <summary>Field number for the "daily" field.</summary>
    public const int DailyFieldNumber = 10;
    private bool daily_;
    /// <summary>
    /// 日常卡包
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Daily {
      get { return daily_; }
      set {
        daily_ = value;
      }
    }

    /// <summary>Field number for the "next_surprise" field.</summary>
    public const int NextSurpriseFieldNumber = 11;
    private int nextSurprise_;
    /// <summary>
    /// 下次四/五星剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextSurprise {
      get { return nextSurprise_; }
      set {
        nextSurprise_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GachaBag);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GachaBag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (PackageId != other.PackageId) return false;
      if (Count != other.Count) return false;
      if (DisappearTime != other.DisappearTime) return false;
      if(!prices_.Equals(other.prices_)) return false;
      if(!awards_.Equals(other.awards_)) return false;
      if (Active != other.Active) return false;
      if (Level != other.Level) return false;
      if (TotalCount != other.TotalCount) return false;
      if (Daily != other.Daily) return false;
      if (NextSurprise != other.NextSurprise) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (PackageId != 0) hash ^= PackageId.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (DisappearTime != 0L) hash ^= DisappearTime.GetHashCode();
      hash ^= prices_.GetHashCode();
      hash ^= awards_.GetHashCode();
      if (Active != 0) hash ^= Active.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (TotalCount != 0) hash ^= TotalCount.GetHashCode();
      if (Daily != false) hash ^= Daily.GetHashCode();
      if (NextSurprise != 0) hash ^= NextSurprise.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (PackageId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PackageId);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
      if (DisappearTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(DisappearTime);
      }
      prices_.WriteTo(output, _repeated_prices_codec);
      awards_.WriteTo(output, _repeated_awards_codec);
      if (Active != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Active);
      }
      if (Level != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Level);
      }
      if (TotalCount != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(TotalCount);
      }
      if (Daily != false) {
        output.WriteRawTag(80);
        output.WriteBool(Daily);
      }
      if (NextSurprise != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(NextSurprise);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (PackageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackageId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (DisappearTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DisappearTime);
      }
      size += prices_.CalculateSize(_repeated_prices_codec);
      size += awards_.CalculateSize(_repeated_awards_codec);
      if (Active != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Active);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (TotalCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalCount);
      }
      if (Daily != false) {
        size += 1 + 1;
      }
      if (NextSurprise != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextSurprise);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GachaBag other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.PackageId != 0) {
        PackageId = other.PackageId;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.DisappearTime != 0L) {
        DisappearTime = other.DisappearTime;
      }
      prices_.Add(other.prices_);
      awards_.Add(other.awards_);
      if (other.Active != 0) {
        Active = other.Active;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.TotalCount != 0) {
        TotalCount = other.TotalCount;
      }
      if (other.Daily != false) {
        Daily = other.Daily;
      }
      if (other.NextSurprise != 0) {
        NextSurprise = other.NextSurprise;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            PackageId = input.ReadInt32();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
          case 32: {
            DisappearTime = input.ReadInt64();
            break;
          }
          case 42: {
            prices_.AddEntriesFrom(input, _repeated_prices_codec);
            break;
          }
          case 50: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
          case 56: {
            Active = input.ReadInt32();
            break;
          }
          case 64: {
            Level = input.ReadInt32();
            break;
          }
          case 72: {
            TotalCount = input.ReadInt32();
            break;
          }
          case 80: {
            Daily = input.ReadBool();
            break;
          }
          case 88: {
            NextSurprise = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///任务信息
  /// </summary>
  public sealed partial class Task : pb::IMessage<Task> {
    private static readonly pb::MessageParser<Task> _parser = new pb::MessageParser<Task>(() => new Task());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Task> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task(Task other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      finid_ = other.finid_.Clone();
      fintype_ = other.fintype_;
      fincnt_ = other.fincnt_.Clone();
      count_ = other.count_.Clone();
      award_ = other.award_.Clone();
      state_ = other.state_;
      chapterid_ = other.chapterid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task Clone() {
      return new Task(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    /// 任务类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "finid" field.</summary>
    public const int FinidFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_finid_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> finid_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 完成属性id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Finid {
      get { return finid_; }
    }

    /// <summary>Field number for the "fintype" field.</summary>
    public const int FintypeFieldNumber = 4;
    private int fintype_;
    /// <summary>
    /// 完成类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Fintype {
      get { return fintype_; }
      set {
        fintype_ = value;
      }
    }

    /// <summary>Field number for the "fincnt" field.</summary>
    public const int FincntFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_fincnt_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> fincnt_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 完成数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Fincnt {
      get { return fincnt_; }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_count_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> count_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 当前计数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Count {
      get { return count_; }
    }

    /// <summary>Field number for the "award" field.</summary>
    public const int AwardFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Cspb.Item> _repeated_award_codec
        = pb::FieldCodec.ForMessage(58, global::Cspb.Item.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Item> award_ = new pbc::RepeatedField<global::Cspb.Item>();
    /// <summary>
    /// 奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Item> Award {
      get { return award_; }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 8;
    private int state_;
    /// <summary>
    /// 任务状态, 1:未暴露, 2:进行中, 3:已完成, 4:已领奖
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "chapterid" field.</summary>
    public const int ChapteridFieldNumber = 9;
    private int chapterid_;
    /// <summary>
    /// 序列id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chapterid {
      get { return chapterid_; }
      set {
        chapterid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Task);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Task other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if(!finid_.Equals(other.finid_)) return false;
      if (Fintype != other.Fintype) return false;
      if(!fincnt_.Equals(other.fincnt_)) return false;
      if(!count_.Equals(other.count_)) return false;
      if(!award_.Equals(other.award_)) return false;
      if (State != other.State) return false;
      if (Chapterid != other.Chapterid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= finid_.GetHashCode();
      if (Fintype != 0) hash ^= Fintype.GetHashCode();
      hash ^= fincnt_.GetHashCode();
      hash ^= count_.GetHashCode();
      hash ^= award_.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (Chapterid != 0) hash ^= Chapterid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      finid_.WriteTo(output, _repeated_finid_codec);
      if (Fintype != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Fintype);
      }
      fincnt_.WriteTo(output, _repeated_fincnt_codec);
      count_.WriteTo(output, _repeated_count_codec);
      award_.WriteTo(output, _repeated_award_codec);
      if (State != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(State);
      }
      if (Chapterid != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Chapterid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      size += finid_.CalculateSize(_repeated_finid_codec);
      if (Fintype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Fintype);
      }
      size += fincnt_.CalculateSize(_repeated_fincnt_codec);
      size += count_.CalculateSize(_repeated_count_codec);
      size += award_.CalculateSize(_repeated_award_codec);
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (Chapterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chapterid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Task other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      finid_.Add(other.finid_);
      if (other.Fintype != 0) {
        Fintype = other.Fintype;
      }
      fincnt_.Add(other.fincnt_);
      count_.Add(other.count_);
      award_.Add(other.award_);
      if (other.State != 0) {
        State = other.State;
      }
      if (other.Chapterid != 0) {
        Chapterid = other.Chapterid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            finid_.AddEntriesFrom(input, _repeated_finid_codec);
            break;
          }
          case 32: {
            Fintype = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            fincnt_.AddEntriesFrom(input, _repeated_fincnt_codec);
            break;
          }
          case 50:
          case 48: {
            count_.AddEntriesFrom(input, _repeated_count_codec);
            break;
          }
          case 58: {
            award_.AddEntriesFrom(input, _repeated_award_codec);
            break;
          }
          case 64: {
            State = input.ReadInt32();
            break;
          }
          case 72: {
            Chapterid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///增加，更新单个或多个task
  /// </summary>
  public sealed partial class TasksNtf : pb::IMessage<TasksNtf> {
    private static readonly pb::MessageParser<TasksNtf> _parser = new pb::MessageParser<TasksNtf>(() => new TasksNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TasksNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TasksNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TasksNtf(TasksNtf other) : this() {
      addTasks_ = other.addTasks_.Clone();
      subTasks_ = other.subTasks_.Clone();
      refTasks_ = other.refTasks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TasksNtf Clone() {
      return new TasksNtf(this);
    }

    /// <summary>Field number for the "add_tasks" field.</summary>
    public const int AddTasksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.Task> _repeated_addTasks_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.Task.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Task> addTasks_ = new pbc::RepeatedField<global::Cspb.Task>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Task> AddTasks {
      get { return addTasks_; }
    }

    /// <summary>Field number for the "sub_tasks" field.</summary>
    public const int SubTasksFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cspb.Task> _repeated_subTasks_codec
        = pb::FieldCodec.ForMessage(18, global::Cspb.Task.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Task> subTasks_ = new pbc::RepeatedField<global::Cspb.Task>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Task> SubTasks {
      get { return subTasks_; }
    }

    /// <summary>Field number for the "ref_tasks" field.</summary>
    public const int RefTasksFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cspb.Task> _repeated_refTasks_codec
        = pb::FieldCodec.ForMessage(26, global::Cspb.Task.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Task> refTasks_ = new pbc::RepeatedField<global::Cspb.Task>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Task> RefTasks {
      get { return refTasks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TasksNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TasksNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!addTasks_.Equals(other.addTasks_)) return false;
      if(!subTasks_.Equals(other.subTasks_)) return false;
      if(!refTasks_.Equals(other.refTasks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= addTasks_.GetHashCode();
      hash ^= subTasks_.GetHashCode();
      hash ^= refTasks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      addTasks_.WriteTo(output, _repeated_addTasks_codec);
      subTasks_.WriteTo(output, _repeated_subTasks_codec);
      refTasks_.WriteTo(output, _repeated_refTasks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += addTasks_.CalculateSize(_repeated_addTasks_codec);
      size += subTasks_.CalculateSize(_repeated_subTasks_codec);
      size += refTasks_.CalculateSize(_repeated_refTasks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TasksNtf other) {
      if (other == null) {
        return;
      }
      addTasks_.Add(other.addTasks_);
      subTasks_.Add(other.subTasks_);
      refTasks_.Add(other.refTasks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            addTasks_.AddEntriesFrom(input, _repeated_addTasks_codec);
            break;
          }
          case 18: {
            subTasks_.AddEntriesFrom(input, _repeated_subTasks_codec);
            break;
          }
          case 26: {
            refTasks_.AddEntriesFrom(input, _repeated_refTasks_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 市场
  /// </summary>
  public sealed partial class MarketItem : pb::IMessage<MarketItem> {
    private static readonly pb::MessageParser<MarketItem> _parser = new pb::MessageParser<MarketItem>(() => new MarketItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketItem(MarketItem other) : this() {
      id_ = other.id_;
      goods_ = other.goods_.Clone();
      price_ = other.price_.Clone();
      discount_ = other.discount_;
      sold_ = other.sold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketItem Clone() {
      return new MarketItem(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 商品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "goods" field.</summary>
    public const int GoodsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cspb.Item> _repeated_goods_codec
        = pb::FieldCodec.ForMessage(18, global::Cspb.Item.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Item> goods_ = new pbc::RepeatedField<global::Cspb.Item>();
    /// <summary>
    /// 商店提供
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Item> Goods {
      get { return goods_; }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cspb.Item> _repeated_price_codec
        = pb::FieldCodec.ForMessage(26, global::Cspb.Item.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Item> price_ = new pbc::RepeatedField<global::Cspb.Item>();
    /// <summary>
    /// 玩家提供(折扣后价格)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Item> Price {
      get { return price_; }
    }

    /// <summary>Field number for the "discount" field.</summary>
    public const int DiscountFieldNumber = 4;
    private int discount_;
    /// <summary>
    /// 折扣(显示用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Discount {
      get { return discount_; }
      set {
        discount_ = value;
      }
    }

    /// <summary>Field number for the "sold" field.</summary>
    public const int SoldFieldNumber = 5;
    private bool sold_;
    /// <summary>
    /// 是否售出
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Sold {
      get { return sold_; }
      set {
        sold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!goods_.Equals(other.goods_)) return false;
      if(!price_.Equals(other.price_)) return false;
      if (Discount != other.Discount) return false;
      if (Sold != other.Sold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= goods_.GetHashCode();
      hash ^= price_.GetHashCode();
      if (Discount != 0) hash ^= Discount.GetHashCode();
      if (Sold != false) hash ^= Sold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      goods_.WriteTo(output, _repeated_goods_codec);
      price_.WriteTo(output, _repeated_price_codec);
      if (Discount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Discount);
      }
      if (Sold != false) {
        output.WriteRawTag(40);
        output.WriteBool(Sold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += goods_.CalculateSize(_repeated_goods_codec);
      size += price_.CalculateSize(_repeated_price_codec);
      if (Discount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Discount);
      }
      if (Sold != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketItem other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      goods_.Add(other.goods_);
      price_.Add(other.price_);
      if (other.Discount != 0) {
        Discount = other.Discount;
      }
      if (other.Sold != false) {
        Sold = other.Sold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            goods_.AddEntriesFrom(input, _repeated_goods_codec);
            break;
          }
          case 26: {
            price_.AddEntriesFrom(input, _repeated_price_codec);
            break;
          }
          case 32: {
            Discount = input.ReadInt32();
            break;
          }
          case 40: {
            Sold = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Market : pb::IMessage<Market> {
    private static readonly pb::MessageParser<Market> _parser = new pb::MessageParser<Market>(() => new Market());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Market> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Market() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Market(Market other) : this() {
      id_ = other.id_;
      freshCost_ = other.freshCost_;
      market_ = other.market_.Clone();
      lasttime_ = other.lasttime_;
      cd_ = other.cd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Market Clone() {
      return new Market(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "freshCost" field.</summary>
    public const int FreshCostFieldNumber = 2;
    private int freshCost_;
    /// <summary>
    /// 刷新 整个市场花费 -1 表示不可再刷新
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreshCost {
      get { return freshCost_; }
      set {
        freshCost_ = value;
      }
    }

    /// <summary>Field number for the "market" field.</summary>
    public const int Market_FieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cspb.MarketItem> _repeated_market_codec
        = pb::FieldCodec.ForMessage(26, global::Cspb.MarketItem.Parser);
    private readonly pbc::RepeatedField<global::Cspb.MarketItem> market_ = new pbc::RepeatedField<global::Cspb.MarketItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.MarketItem> Market_ {
      get { return market_; }
    }

    /// <summary>Field number for the "lasttime" field.</summary>
    public const int LasttimeFieldNumber = 4;
    private long lasttime_;
    /// <summary>
    /// 上次刷新的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Lasttime {
      get { return lasttime_; }
      set {
        lasttime_ = value;
      }
    }

    /// <summary>Field number for the "cd" field.</summary>
    public const int CdFieldNumber = 5;
    private long cd_;
    /// <summary>
    /// 到下次更新时间倒计时(秒)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Cd {
      get { return cd_; }
      set {
        cd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Market);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Market other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (FreshCost != other.FreshCost) return false;
      if(!market_.Equals(other.market_)) return false;
      if (Lasttime != other.Lasttime) return false;
      if (Cd != other.Cd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (FreshCost != 0) hash ^= FreshCost.GetHashCode();
      hash ^= market_.GetHashCode();
      if (Lasttime != 0L) hash ^= Lasttime.GetHashCode();
      if (Cd != 0L) hash ^= Cd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (FreshCost != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FreshCost);
      }
      market_.WriteTo(output, _repeated_market_codec);
      if (Lasttime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Lasttime);
      }
      if (Cd != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Cd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (FreshCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreshCost);
      }
      size += market_.CalculateSize(_repeated_market_codec);
      if (Lasttime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Lasttime);
      }
      if (Cd != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Cd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Market other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.FreshCost != 0) {
        FreshCost = other.FreshCost;
      }
      market_.Add(other.market_);
      if (other.Lasttime != 0L) {
        Lasttime = other.Lasttime;
      }
      if (other.Cd != 0L) {
        Cd = other.Cd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            FreshCost = input.ReadInt32();
            break;
          }
          case 26: {
            market_.AddEntriesFrom(input, _repeated_market_codec);
            break;
          }
          case 32: {
            Lasttime = input.ReadInt64();
            break;
          }
          case 40: {
            Cd = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// </summary>
  public sealed partial class MarketsNtf : pb::IMessage<MarketsNtf> {
    private static readonly pb::MessageParser<MarketsNtf> _parser = new pb::MessageParser<MarketsNtf>(() => new MarketsNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarketsNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketsNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketsNtf(MarketsNtf other) : this() {
      markets_ = other.markets_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarketsNtf Clone() {
      return new MarketsNtf(this);
    }

    /// <summary>Field number for the "markets" field.</summary>
    public const int MarketsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.Market> _repeated_markets_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.Market.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Market> markets_ = new pbc::RepeatedField<global::Cspb.Market>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Market> Markets {
      get { return markets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarketsNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarketsNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!markets_.Equals(other.markets_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= markets_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      markets_.WriteTo(output, _repeated_markets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += markets_.CalculateSize(_repeated_markets_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarketsNtf other) {
      if (other == null) {
        return;
      }
      markets_.Add(other.markets_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            markets_.AddEntriesFrom(input, _repeated_markets_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 税收
  /// </summary>
  public sealed partial class TaxNtf : pb::IMessage<TaxNtf> {
    private static readonly pb::MessageParser<TaxNtf> _parser = new pb::MessageParser<TaxNtf>(() => new TaxNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaxNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxNtf(TaxNtf other) : this() {
      tax_ = other.tax_;
      npcTax_ = other.npcTax_;
      taxValue_ = other.taxValue_.Clone();
      taxTime_ = other.taxTime_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxNtf Clone() {
      return new TaxNtf(this);
    }

    /// <summary>Field number for the "tax" field.</summary>
    public const int TaxFieldNumber = 1;
    private int tax_;
    /// <summary>
    /// 当前税收能获得的 钱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tax {
      get { return tax_; }
      set {
        tax_ = value;
      }
    }

    /// <summary>Field number for the "npcTax" field.</summary>
    public const int NpcTaxFieldNumber = 2;
    private int npcTax_;
    /// <summary>
    /// NPC城皮税收加成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NpcTax {
      get { return npcTax_; }
      set {
        npcTax_ = value;
      }
    }

    /// <summary>Field number for the "taxValue" field.</summary>
    public const int TaxValueFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_taxValue_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> taxValue_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 一天税收值的记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TaxValue {
      get { return taxValue_; }
    }

    /// <summary>Field number for the "taxTime" field.</summary>
    public const int TaxTimeFieldNumber = 4;
    private static readonly pb::FieldCodec<long> _repeated_taxTime_codec
        = pb::FieldCodec.ForInt64(34);
    private readonly pbc::RepeatedField<long> taxTime_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// 一天税收时间的记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> TaxTime {
      get { return taxTime_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaxNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaxNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tax != other.Tax) return false;
      if (NpcTax != other.NpcTax) return false;
      if(!taxValue_.Equals(other.taxValue_)) return false;
      if(!taxTime_.Equals(other.taxTime_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tax != 0) hash ^= Tax.GetHashCode();
      if (NpcTax != 0) hash ^= NpcTax.GetHashCode();
      hash ^= taxValue_.GetHashCode();
      hash ^= taxTime_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tax != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Tax);
      }
      if (NpcTax != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NpcTax);
      }
      taxValue_.WriteTo(output, _repeated_taxValue_codec);
      taxTime_.WriteTo(output, _repeated_taxTime_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tax);
      }
      if (NpcTax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NpcTax);
      }
      size += taxValue_.CalculateSize(_repeated_taxValue_codec);
      size += taxTime_.CalculateSize(_repeated_taxTime_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaxNtf other) {
      if (other == null) {
        return;
      }
      if (other.Tax != 0) {
        Tax = other.Tax;
      }
      if (other.NpcTax != 0) {
        NpcTax = other.NpcTax;
      }
      taxValue_.Add(other.taxValue_);
      taxTime_.Add(other.taxTime_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Tax = input.ReadInt32();
            break;
          }
          case 16: {
            NpcTax = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            taxValue_.AddEntriesFrom(input, _repeated_taxValue_codec);
            break;
          }
          case 34:
          case 32: {
            taxTime_.AddEntriesFrom(input, _repeated_taxTime_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GuardianTroopNtf : pb::IMessage<GuardianTroopNtf> {
    private static readonly pb::MessageParser<GuardianTroopNtf> _parser = new pb::MessageParser<GuardianTroopNtf>(() => new GuardianTroopNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GuardianTroopNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuardianTroopNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuardianTroopNtf(GuardianTroopNtf other) : this() {
      fighters_ = other.fighters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuardianTroopNtf Clone() {
      return new GuardianTroopNtf(this);
    }

    /// <summary>Field number for the "fighters" field.</summary>
    public const int FightersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.Fighter> _repeated_fighters_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.Fighter.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Fighter> fighters_ = new pbc::RepeatedField<global::Cspb.Fighter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Fighter> Fighters {
      get { return fighters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GuardianTroopNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GuardianTroopNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fighters_.Equals(other.fighters_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fighters_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fighters_.WriteTo(output, _repeated_fighters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fighters_.CalculateSize(_repeated_fighters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GuardianTroopNtf other) {
      if (other == null) {
        return;
      }
      fighters_.Add(other.fighters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            fighters_.AddEntriesFrom(input, _repeated_fighters_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 通用奖励Ntf
  /// </summary>
  public sealed partial class AwardNtf : pb::IMessage<AwardNtf> {
    private static readonly pb::MessageParser<AwardNtf> _parser = new pb::MessageParser<AwardNtf>(() => new AwardNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AwardNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AwardNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AwardNtf(AwardNtf other) : this() {
      awards_ = other.awards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AwardNtf Clone() {
      return new AwardNtf(this);
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.Item> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.Item.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Item> awards_ = new pbc::RepeatedField<global::Cspb.Item>();
    /// <summary>
    /// 奖励物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Item> Awards {
      get { return awards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AwardNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AwardNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!awards_.Equals(other.awards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= awards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      awards_.WriteTo(output, _repeated_awards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += awards_.CalculateSize(_repeated_awards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AwardNtf other) {
      if (other == null) {
        return;
      }
      awards_.Add(other.awards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战斗奖励Ntf
  /// </summary>
  public sealed partial class BattleAwardNtf : pb::IMessage<BattleAwardNtf> {
    private static readonly pb::MessageParser<BattleAwardNtf> _parser = new pb::MessageParser<BattleAwardNtf>(() => new BattleAwardNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleAwardNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleAwardNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleAwardNtf(BattleAwardNtf other) : this() {
      awards_ = other.awards_.Clone();
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleAwardNtf Clone() {
      return new BattleAwardNtf(this);
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.Item> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.Item.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Item> awards_ = new pbc::RepeatedField<global::Cspb.Item>();
    /// <summary>
    /// 奖励物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Item> Awards {
      get { return awards_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Cspb.BATTLE_AWARD_TYPE type_ = 0;
    /// <summary>
    /// 奖励类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.BATTLE_AWARD_TYPE Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleAwardNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleAwardNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!awards_.Equals(other.awards_)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= awards_.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      awards_.WriteTo(output, _repeated_awards_codec);
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += awards_.CalculateSize(_repeated_awards_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleAwardNtf other) {
      if (other == null) {
        return;
      }
      awards_.Add(other.awards_);
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
          case 16: {
            type_ = (global::Cspb.BATTLE_AWARD_TYPE) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 视野数据
  /// </summary>
  public sealed partial class Vision : pb::IMessage<Vision> {
    private static readonly pb::MessageParser<Vision> _parser = new pb::MessageParser<Vision>(() => new Vision());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vision> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vision() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vision(Vision other) : this() {
      center_ = other.center_;
      radius_ = other.radius_;
      op_ = other.op_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vision Clone() {
      return new Vision(this);
    }

    /// <summary>Field number for the "center" field.</summary>
    public const int CenterFieldNumber = 1;
    private int center_;
    /// <summary>
    /// 视野中心点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Center {
      get { return center_; }
      set {
        center_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 2;
    private int radius_;
    /// <summary>
    /// 视野半径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 3;
    private int op_;
    /// <summary>
    /// 1 添加视野，2 删除视野
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vision);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vision other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Center != other.Center) return false;
      if (Radius != other.Radius) return false;
      if (Op != other.Op) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Center != 0) hash ^= Center.GetHashCode();
      if (Radius != 0) hash ^= Radius.GetHashCode();
      if (Op != 0) hash ^= Op.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Center != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Center);
      }
      if (Radius != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Radius);
      }
      if (Op != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Op);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Center != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Center);
      }
      if (Radius != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Radius);
      }
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Op);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vision other) {
      if (other == null) {
        return;
      }
      if (other.Center != 0) {
        Center = other.Center;
      }
      if (other.Radius != 0) {
        Radius = other.Radius;
      }
      if (other.Op != 0) {
        Op = other.Op;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Center = input.ReadInt32();
            break;
          }
          case 16: {
            Radius = input.ReadInt32();
            break;
          }
          case 24: {
            Op = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VisionsNtf : pb::IMessage<VisionsNtf> {
    private static readonly pb::MessageParser<VisionsNtf> _parser = new pb::MessageParser<VisionsNtf>(() => new VisionsNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VisionsNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisionsNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisionsNtf(VisionsNtf other) : this() {
      visions_ = other.visions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisionsNtf Clone() {
      return new VisionsNtf(this);
    }

    /// <summary>Field number for the "visions" field.</summary>
    public const int VisionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.Vision> _repeated_visions_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.Vision.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Vision> visions_ = new pbc::RepeatedField<global::Cspb.Vision>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Vision> Visions {
      get { return visions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VisionsNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VisionsNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!visions_.Equals(other.visions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= visions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      visions_.WriteTo(output, _repeated_visions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += visions_.CalculateSize(_repeated_visions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VisionsNtf other) {
      if (other == null) {
        return;
      }
      visions_.Add(other.visions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            visions_.AddEntriesFrom(input, _repeated_visions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家联盟申请
  /// </summary>
  public sealed partial class ApplyUnion : pb::IMessage<ApplyUnion> {
    private static readonly pb::MessageParser<ApplyUnion> _parser = new pb::MessageParser<ApplyUnion>(() => new ApplyUnion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplyUnion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyUnion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyUnion(ApplyUnion other) : this() {
      unionId_ = other.unionId_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyUnion Clone() {
      return new ApplyUnion(this);
    }

    /// <summary>Field number for the "union_id" field.</summary>
    public const int UnionIdFieldNumber = 1;
    private long unionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private long time_;
    /// <summary>
    /// 申请时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplyUnion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplyUnion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnionId != other.UnionId) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnionId != 0L) hash ^= UnionId.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnionId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnionId);
      }
      if (Time != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnionId);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplyUnion other) {
      if (other == null) {
        return;
      }
      if (other.UnionId != 0L) {
        UnionId = other.UnionId;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnionId = input.ReadInt64();
            break;
          }
          case 16: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家收到的联盟邀请
  /// </summary>
  public sealed partial class UnionInvite : pb::IMessage<UnionInvite> {
    private static readonly pb::MessageParser<UnionInvite> _parser = new pb::MessageParser<UnionInvite>(() => new UnionInvite());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnionInvite> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionInvite() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionInvite(UnionInvite other) : this() {
      unionId_ = other.unionId_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionInvite Clone() {
      return new UnionInvite(this);
    }

    /// <summary>Field number for the "union_id" field.</summary>
    public const int UnionIdFieldNumber = 1;
    private long unionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private long time_;
    /// <summary>
    /// 邀请时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnionInvite);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnionInvite other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnionId != other.UnionId) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnionId != 0L) hash ^= UnionId.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnionId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnionId);
      }
      if (Time != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnionId);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnionInvite other) {
      if (other == null) {
        return;
      }
      if (other.UnionId != 0L) {
        UnionId = other.UnionId;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnionId = input.ReadInt64();
            break;
          }
          case 16: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家联盟 Player.PlayerUnion
  /// </summary>
  public sealed partial class PlayerUnion : pb::IMessage<PlayerUnion> {
    private static readonly pb::MessageParser<PlayerUnion> _parser = new pb::MessageParser<PlayerUnion>(() => new PlayerUnion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerUnion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerUnion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerUnion(PlayerUnion other) : this() {
      unionId_ = other.unionId_;
      titleId_ = other.titleId_;
      lastQuitAt_ = other.lastQuitAt_;
      applies_ = other.applies_.Clone();
      invites_ = other.invites_.Clone();
      relations_ = other.relations_.Clone();
      marks_ = other.marks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerUnion Clone() {
      return new PlayerUnion(this);
    }

    /// <summary>Field number for the "union_id" field.</summary>
    public const int UnionIdFieldNumber = 1;
    private long unionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    /// <summary>Field number for the "title_id" field.</summary>
    public const int TitleIdFieldNumber = 2;
    private int titleId_;
    /// <summary>
    /// 职位id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TitleId {
      get { return titleId_; }
      set {
        titleId_ = value;
      }
    }

    /// <summary>Field number for the "last_quit_at" field.</summary>
    public const int LastQuitAtFieldNumber = 3;
    private long lastQuitAt_;
    /// <summary>
    /// 玩家上一次退出联盟时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastQuitAt {
      get { return lastQuitAt_; }
      set {
        lastQuitAt_ = value;
      }
    }

    /// <summary>Field number for the "applies" field.</summary>
    public const int AppliesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Cspb.ApplyUnion> _repeated_applies_codec
        = pb::FieldCodec.ForMessage(34, global::Cspb.ApplyUnion.Parser);
    private readonly pbc::RepeatedField<global::Cspb.ApplyUnion> applies_ = new pbc::RepeatedField<global::Cspb.ApplyUnion>();
    /// <summary>
    /// 玩家全部的有效申请
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.ApplyUnion> Applies {
      get { return applies_; }
    }

    /// <summary>Field number for the "invites" field.</summary>
    public const int InvitesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Cspb.UnionInvite> _repeated_invites_codec
        = pb::FieldCodec.ForMessage(42, global::Cspb.UnionInvite.Parser);
    private readonly pbc::RepeatedField<global::Cspb.UnionInvite> invites_ = new pbc::RepeatedField<global::Cspb.UnionInvite>();
    /// <summary>
    /// 玩家全部的有效邀请
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.UnionInvite> Invites {
      get { return invites_; }
    }

    /// <summary>Field number for the "relations" field.</summary>
    public const int RelationsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Cspb.UnionRelation> _repeated_relations_codec
        = pb::FieldCodec.ForMessage(50, global::Cspb.UnionRelation.Parser);
    private readonly pbc::RepeatedField<global::Cspb.UnionRelation> relations_ = new pbc::RepeatedField<global::Cspb.UnionRelation>();
    /// <summary>
    /// 联盟关系
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.UnionRelation> Relations {
      get { return relations_; }
    }

    /// <summary>Field number for the "marks" field.</summary>
    public const int MarksFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Cspb.UnionMark> _repeated_marks_codec
        = pb::FieldCodec.ForMessage(58, global::Cspb.UnionMark.Parser);
    private readonly pbc::RepeatedField<global::Cspb.UnionMark> marks_ = new pbc::RepeatedField<global::Cspb.UnionMark>();
    /// <summary>
    /// 联盟标记
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.UnionMark> Marks {
      get { return marks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerUnion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerUnion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnionId != other.UnionId) return false;
      if (TitleId != other.TitleId) return false;
      if (LastQuitAt != other.LastQuitAt) return false;
      if(!applies_.Equals(other.applies_)) return false;
      if(!invites_.Equals(other.invites_)) return false;
      if(!relations_.Equals(other.relations_)) return false;
      if(!marks_.Equals(other.marks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnionId != 0L) hash ^= UnionId.GetHashCode();
      if (TitleId != 0) hash ^= TitleId.GetHashCode();
      if (LastQuitAt != 0L) hash ^= LastQuitAt.GetHashCode();
      hash ^= applies_.GetHashCode();
      hash ^= invites_.GetHashCode();
      hash ^= relations_.GetHashCode();
      hash ^= marks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnionId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnionId);
      }
      if (TitleId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TitleId);
      }
      if (LastQuitAt != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(LastQuitAt);
      }
      applies_.WriteTo(output, _repeated_applies_codec);
      invites_.WriteTo(output, _repeated_invites_codec);
      relations_.WriteTo(output, _repeated_relations_codec);
      marks_.WriteTo(output, _repeated_marks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnionId);
      }
      if (TitleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TitleId);
      }
      if (LastQuitAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastQuitAt);
      }
      size += applies_.CalculateSize(_repeated_applies_codec);
      size += invites_.CalculateSize(_repeated_invites_codec);
      size += relations_.CalculateSize(_repeated_relations_codec);
      size += marks_.CalculateSize(_repeated_marks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerUnion other) {
      if (other == null) {
        return;
      }
      if (other.UnionId != 0L) {
        UnionId = other.UnionId;
      }
      if (other.TitleId != 0) {
        TitleId = other.TitleId;
      }
      if (other.LastQuitAt != 0L) {
        LastQuitAt = other.LastQuitAt;
      }
      applies_.Add(other.applies_);
      invites_.Add(other.invites_);
      relations_.Add(other.relations_);
      marks_.Add(other.marks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnionId = input.ReadInt64();
            break;
          }
          case 16: {
            TitleId = input.ReadInt32();
            break;
          }
          case 24: {
            LastQuitAt = input.ReadInt64();
            break;
          }
          case 34: {
            applies_.AddEntriesFrom(input, _repeated_applies_codec);
            break;
          }
          case 42: {
            invites_.AddEntriesFrom(input, _repeated_invites_codec);
            break;
          }
          case 50: {
            relations_.AddEntriesFrom(input, _repeated_relations_codec);
            break;
          }
          case 58: {
            marks_.AddEntriesFrom(input, _repeated_marks_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家联盟 Player.PlayerUnion
  /// </summary>
  public sealed partial class PlayerUnionNtf : pb::IMessage<PlayerUnionNtf> {
    private static readonly pb::MessageParser<PlayerUnionNtf> _parser = new pb::MessageParser<PlayerUnionNtf>(() => new PlayerUnionNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerUnionNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerUnionNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerUnionNtf(PlayerUnionNtf other) : this() {
      Union = other.union_ != null ? other.Union.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerUnionNtf Clone() {
      return new PlayerUnionNtf(this);
    }

    /// <summary>Field number for the "union" field.</summary>
    public const int UnionFieldNumber = 1;
    private global::Cspb.PlayerUnion union_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.PlayerUnion Union {
      get { return union_; }
      set {
        union_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerUnionNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerUnionNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Union, other.Union)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (union_ != null) hash ^= Union.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (union_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Union);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (union_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Union);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerUnionNtf other) {
      if (other == null) {
        return;
      }
      if (other.union_ != null) {
        if (union_ == null) {
          union_ = new global::Cspb.PlayerUnion();
        }
        Union.MergeFrom(other.Union);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (union_ == null) {
              union_ = new global::Cspb.PlayerUnion();
            }
            input.ReadMessage(union_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家沦陷
  /// </summary>
  public sealed partial class FallenInfo : pb::IMessage<FallenInfo> {
    private static readonly pb::MessageParser<FallenInfo> _parser = new pb::MessageParser<FallenInfo>(() => new FallenInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FallenInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FallenInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FallenInfo(FallenInfo other) : this() {
      unionId_ = other.unionId_;
      time_ = other.time_;
      revoltRes_ = other.revoltRes_;
      revoltResMax_ = other.revoltResMax_;
      fallenId_ = other.fallenId_;
      fallenName_ = other.fallenName_;
      fallenUnion_ = other.fallenUnion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FallenInfo Clone() {
      return new FallenInfo(this);
    }

    /// <summary>Field number for the "union_id" field.</summary>
    public const int UnionIdFieldNumber = 1;
    private long unionId_;
    /// <summary>
    /// 被联盟沦陷
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private long time_;
    /// <summary>
    /// 被沦陷时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "revolt_res" field.</summary>
    public const int RevoltResFieldNumber = 3;
    private int revoltRes_;
    /// <summary>
    /// 反叛剩余需要缴纳的资源量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RevoltRes {
      get { return revoltRes_; }
      set {
        revoltRes_ = value;
      }
    }

    /// <summary>Field number for the "revolt_res_max" field.</summary>
    public const int RevoltResMaxFieldNumber = 4;
    private int revoltResMax_;
    /// <summary>
    /// 反叛全部资源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RevoltResMax {
      get { return revoltResMax_; }
      set {
        revoltResMax_ = value;
      }
    }

    /// <summary>Field number for the "FallenId" field.</summary>
    public const int FallenIdFieldNumber = 5;
    private long fallenId_;
    /// <summary>
    /// 沦陷玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FallenId {
      get { return fallenId_; }
      set {
        fallenId_ = value;
      }
    }

    /// <summary>Field number for the "FallenName" field.</summary>
    public const int FallenNameFieldNumber = 6;
    private string fallenName_ = "";
    /// <summary>
    /// 沦陷玩家名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FallenName {
      get { return fallenName_; }
      set {
        fallenName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FallenUnion" field.</summary>
    public const int FallenUnionFieldNumber = 7;
    private string fallenUnion_ = "";
    /// <summary>
    /// 沦陷联盟名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FallenUnion {
      get { return fallenUnion_; }
      set {
        fallenUnion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FallenInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FallenInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnionId != other.UnionId) return false;
      if (Time != other.Time) return false;
      if (RevoltRes != other.RevoltRes) return false;
      if (RevoltResMax != other.RevoltResMax) return false;
      if (FallenId != other.FallenId) return false;
      if (FallenName != other.FallenName) return false;
      if (FallenUnion != other.FallenUnion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnionId != 0L) hash ^= UnionId.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (RevoltRes != 0) hash ^= RevoltRes.GetHashCode();
      if (RevoltResMax != 0) hash ^= RevoltResMax.GetHashCode();
      if (FallenId != 0L) hash ^= FallenId.GetHashCode();
      if (FallenName.Length != 0) hash ^= FallenName.GetHashCode();
      if (FallenUnion.Length != 0) hash ^= FallenUnion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnionId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnionId);
      }
      if (Time != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Time);
      }
      if (RevoltRes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RevoltRes);
      }
      if (RevoltResMax != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RevoltResMax);
      }
      if (FallenId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(FallenId);
      }
      if (FallenName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FallenName);
      }
      if (FallenUnion.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FallenUnion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnionId);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (RevoltRes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RevoltRes);
      }
      if (RevoltResMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RevoltResMax);
      }
      if (FallenId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FallenId);
      }
      if (FallenName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FallenName);
      }
      if (FallenUnion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FallenUnion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FallenInfo other) {
      if (other == null) {
        return;
      }
      if (other.UnionId != 0L) {
        UnionId = other.UnionId;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.RevoltRes != 0) {
        RevoltRes = other.RevoltRes;
      }
      if (other.RevoltResMax != 0) {
        RevoltResMax = other.RevoltResMax;
      }
      if (other.FallenId != 0L) {
        FallenId = other.FallenId;
      }
      if (other.FallenName.Length != 0) {
        FallenName = other.FallenName;
      }
      if (other.FallenUnion.Length != 0) {
        FallenUnion = other.FallenUnion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnionId = input.ReadInt64();
            break;
          }
          case 16: {
            Time = input.ReadInt64();
            break;
          }
          case 24: {
            RevoltRes = input.ReadInt32();
            break;
          }
          case 32: {
            RevoltResMax = input.ReadInt32();
            break;
          }
          case 40: {
            FallenId = input.ReadInt64();
            break;
          }
          case 50: {
            FallenName = input.ReadString();
            break;
          }
          case 58: {
            FallenUnion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SlaveInfo : pb::IMessage<SlaveInfo> {
    private static readonly pb::MessageParser<SlaveInfo> _parser = new pb::MessageParser<SlaveInfo>(() => new SlaveInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SlaveInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SlaveInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SlaveInfo(SlaveInfo other) : this() {
      slaveId_ = other.slaveId_;
      slaveName_ = other.slaveName_;
      slaveUnion_ = other.slaveUnion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SlaveInfo Clone() {
      return new SlaveInfo(this);
    }

    /// <summary>Field number for the "slave_id" field.</summary>
    public const int SlaveIdFieldNumber = 1;
    private long slaveId_;
    /// <summary>
    /// 被沦陷的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SlaveId {
      get { return slaveId_; }
      set {
        slaveId_ = value;
      }
    }

    /// <summary>Field number for the "slave_name" field.</summary>
    public const int SlaveNameFieldNumber = 2;
    private string slaveName_ = "";
    /// <summary>
    /// 被沦陷名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SlaveName {
      get { return slaveName_; }
      set {
        slaveName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "slave_union" field.</summary>
    public const int SlaveUnionFieldNumber = 3;
    private string slaveUnion_ = "";
    /// <summary>
    /// 被沦陷的玩家联盟名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SlaveUnion {
      get { return slaveUnion_; }
      set {
        slaveUnion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SlaveInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SlaveInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SlaveId != other.SlaveId) return false;
      if (SlaveName != other.SlaveName) return false;
      if (SlaveUnion != other.SlaveUnion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SlaveId != 0L) hash ^= SlaveId.GetHashCode();
      if (SlaveName.Length != 0) hash ^= SlaveName.GetHashCode();
      if (SlaveUnion.Length != 0) hash ^= SlaveUnion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SlaveId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SlaveId);
      }
      if (SlaveName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SlaveName);
      }
      if (SlaveUnion.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SlaveUnion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SlaveId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SlaveId);
      }
      if (SlaveName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SlaveName);
      }
      if (SlaveUnion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SlaveUnion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SlaveInfo other) {
      if (other == null) {
        return;
      }
      if (other.SlaveId != 0L) {
        SlaveId = other.SlaveId;
      }
      if (other.SlaveName.Length != 0) {
        SlaveName = other.SlaveName;
      }
      if (other.SlaveUnion.Length != 0) {
        SlaveUnion = other.SlaveUnion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SlaveId = input.ReadInt64();
            break;
          }
          case 18: {
            SlaveName = input.ReadString();
            break;
          }
          case 26: {
            SlaveUnion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 联盟盟主禅让 Union.UnionDemise
  /// </summary>
  public sealed partial class UnionDemise : pb::IMessage<UnionDemise> {
    private static readonly pb::MessageParser<UnionDemise> _parser = new pb::MessageParser<UnionDemise>(() => new UnionDemise());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnionDemise> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionDemise() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionDemise(UnionDemise other) : this() {
      targetId_ = other.targetId_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionDemise Clone() {
      return new UnionDemise(this);
    }

    /// <summary>Field number for the "target_id" field.</summary>
    public const int TargetIdFieldNumber = 1;
    private long targetId_;
    /// <summary>
    /// 禅让成员id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private long time_;
    /// <summary>
    /// 发起时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnionDemise);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnionDemise other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetId != other.TargetId) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetId != 0L) hash ^= TargetId.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TargetId);
      }
      if (Time != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetId);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnionDemise other) {
      if (other == null) {
        return;
      }
      if (other.TargetId != 0L) {
        TargetId = other.TargetId;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetId = input.ReadInt64();
            break;
          }
          case 16: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 联盟旗帜 Union.UnionFlag
  /// </summary>
  public sealed partial class UnionFlag : pb::IMessage<UnionFlag> {
    private static readonly pb::MessageParser<UnionFlag> _parser = new pb::MessageParser<UnionFlag>(() => new UnionFlag());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnionFlag> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionFlag() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionFlag(UnionFlag other) : this() {
      color_ = other.color_;
      shape_ = other.shape_;
      pattern_ = other.pattern_;
      horn_ = other.horn_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionFlag Clone() {
      return new UnionFlag(this);
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 1;
    private int color_;
    /// <summary>
    /// 颜色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 2;
    private int shape_;
    /// <summary>
    /// 形状
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    /// <summary>Field number for the "pattern" field.</summary>
    public const int PatternFieldNumber = 3;
    private int pattern_;
    /// <summary>
    /// 图案
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pattern {
      get { return pattern_; }
      set {
        pattern_ = value;
      }
    }

    /// <summary>Field number for the "horn" field.</summary>
    public const int HornFieldNumber = 4;
    private int horn_;
    /// <summary>
    /// 角
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Horn {
      get { return horn_; }
      set {
        horn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnionFlag);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnionFlag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Color != other.Color) return false;
      if (Shape != other.Shape) return false;
      if (Pattern != other.Pattern) return false;
      if (Horn != other.Horn) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Color != 0) hash ^= Color.GetHashCode();
      if (Shape != 0) hash ^= Shape.GetHashCode();
      if (Pattern != 0) hash ^= Pattern.GetHashCode();
      if (Horn != 0) hash ^= Horn.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Color != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Color);
      }
      if (Shape != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Shape);
      }
      if (Pattern != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Pattern);
      }
      if (Horn != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Horn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Color);
      }
      if (Shape != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Shape);
      }
      if (Pattern != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pattern);
      }
      if (Horn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Horn);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnionFlag other) {
      if (other == null) {
        return;
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
      if (other.Shape != 0) {
        Shape = other.Shape;
      }
      if (other.Pattern != 0) {
        Pattern = other.Pattern;
      }
      if (other.Horn != 0) {
        Horn = other.Horn;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Color = input.ReadInt32();
            break;
          }
          case 16: {
            Shape = input.ReadInt32();
            break;
          }
          case 24: {
            Pattern = input.ReadInt32();
            break;
          }
          case 32: {
            Horn = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 联盟玩家 Union.UnionPlayer
  /// </summary>
  public sealed partial class UnionPlayer : pb::IMessage<UnionPlayer> {
    private static readonly pb::MessageParser<UnionPlayer> _parser = new pb::MessageParser<UnionPlayer>(() => new UnionPlayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnionPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionPlayer(UnionPlayer other) : this() {
      playerId_ = other.playerId_;
      avatarId_ = other.avatarId_;
      name_ = other.name_;
      titleId_ = other.titleId_;
      power_ = other.power_;
      area_ = other.area_;
      pos_ = other.pos_;
      contribution_ = other.contribution_;
      glory_ = other.glory_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionPlayer Clone() {
      return new UnionPlayer(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    /// <summary>
    /// 成员id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "avatar_id" field.</summary>
    public const int AvatarIdFieldNumber = 2;
    private int avatarId_;
    /// <summary>
    /// 头像id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvatarId {
      get { return avatarId_; }
      set {
        avatarId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// 成员name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title_id" field.</summary>
    public const int TitleIdFieldNumber = 4;
    private int titleId_;
    /// <summary>
    /// 职位id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TitleId {
      get { return titleId_; }
      set {
        titleId_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 5;
    private int power_;
    /// <summary>
    /// 势力值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "area" field.</summary>
    public const int AreaFieldNumber = 6;
    private string area_ = "";
    /// <summary>
    /// 所在区域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Area {
      get { return area_; }
      set {
        area_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 7;
    private int pos_;
    /// <summary>
    /// 位置坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "contribution" field.</summary>
    public const int ContributionFieldNumber = 8;
    private int contribution_;
    /// <summary>
    /// 贡献值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Contribution {
      get { return contribution_; }
      set {
        contribution_ = value;
      }
    }

    /// <summary>Field number for the "glory" field.</summary>
    public const int GloryFieldNumber = 9;
    private int glory_;
    /// <summary>
    /// 荣誉值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Glory {
      get { return glory_; }
      set {
        glory_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnionPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnionPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (AvatarId != other.AvatarId) return false;
      if (Name != other.Name) return false;
      if (TitleId != other.TitleId) return false;
      if (Power != other.Power) return false;
      if (Area != other.Area) return false;
      if (Pos != other.Pos) return false;
      if (Contribution != other.Contribution) return false;
      if (Glory != other.Glory) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (AvatarId != 0) hash ^= AvatarId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (TitleId != 0) hash ^= TitleId.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      if (Area.Length != 0) hash ^= Area.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (Contribution != 0) hash ^= Contribution.GetHashCode();
      if (Glory != 0) hash ^= Glory.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (AvatarId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AvatarId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (TitleId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TitleId);
      }
      if (Power != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Power);
      }
      if (Area.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Area);
      }
      if (Pos != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Pos);
      }
      if (Contribution != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Contribution);
      }
      if (Glory != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Glory);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (AvatarId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvatarId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (TitleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TitleId);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (Area.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Area);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (Contribution != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Contribution);
      }
      if (Glory != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Glory);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnionPlayer other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.AvatarId != 0) {
        AvatarId = other.AvatarId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.TitleId != 0) {
        TitleId = other.TitleId;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.Area.Length != 0) {
        Area = other.Area;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.Contribution != 0) {
        Contribution = other.Contribution;
      }
      if (other.Glory != 0) {
        Glory = other.Glory;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 16: {
            AvatarId = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            TitleId = input.ReadInt32();
            break;
          }
          case 40: {
            Power = input.ReadInt32();
            break;
          }
          case 50: {
            Area = input.ReadString();
            break;
          }
          case 56: {
            Pos = input.ReadInt32();
            break;
          }
          case 64: {
            Contribution = input.ReadInt32();
            break;
          }
          case 72: {
            Glory = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 联盟申请 Union.ApplyPlayer
  /// </summary>
  public sealed partial class ApplyPlayer : pb::IMessage<ApplyPlayer> {
    private static readonly pb::MessageParser<ApplyPlayer> _parser = new pb::MessageParser<ApplyPlayer>(() => new ApplyPlayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplyPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyPlayer(ApplyPlayer other) : this() {
      playerId_ = other.playerId_;
      name_ = other.name_;
      time_ = other.time_;
      power_ = other.power_;
      pos_ = other.pos_;
      area_ = other.area_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyPlayer Clone() {
      return new ApplyPlayer(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    /// <summary>
    /// 申请玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 玩家名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private long time_;
    /// <summary>
    /// 申请时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 4;
    private int power_;
    /// <summary>
    /// 玩家势力值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 5;
    private int pos_;
    /// <summary>
    /// 玩家位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "area" field.</summary>
    public const int AreaFieldNumber = 6;
    private string area_ = "";
    /// <summary>
    /// 玩家所属区域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Area {
      get { return area_; }
      set {
        area_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplyPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplyPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Name != other.Name) return false;
      if (Time != other.Time) return false;
      if (Power != other.Power) return false;
      if (Pos != other.Pos) return false;
      if (Area != other.Area) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (Area.Length != 0) hash ^= Area.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Time != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Time);
      }
      if (Power != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Power);
      }
      if (Pos != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Pos);
      }
      if (Area.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Area);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (Area.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Area);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplyPlayer other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.Area.Length != 0) {
        Area = other.Area;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Time = input.ReadInt64();
            break;
          }
          case 32: {
            Power = input.ReadInt32();
            break;
          }
          case 40: {
            Pos = input.ReadInt32();
            break;
          }
          case 50: {
            Area = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 联盟关系 Union.UnionRelation
  /// </summary>
  public sealed partial class UnionRelation : pb::IMessage<UnionRelation> {
    private static readonly pb::MessageParser<UnionRelation> _parser = new pb::MessageParser<UnionRelation>(() => new UnionRelation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnionRelation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionRelation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionRelation(UnionRelation other) : this() {
      unionId_ = other.unionId_;
      relationType_ = other.relationType_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionRelation Clone() {
      return new UnionRelation(this);
    }

    /// <summary>Field number for the "union_id" field.</summary>
    public const int UnionIdFieldNumber = 1;
    private long unionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    /// <summary>Field number for the "relation_type" field.</summary>
    public const int RelationTypeFieldNumber = 2;
    private int relationType_;
    /// <summary>
    /// 关系类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RelationType {
      get { return relationType_; }
      set {
        relationType_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private long time_;
    /// <summary>
    /// 关系设置时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnionRelation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnionRelation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnionId != other.UnionId) return false;
      if (RelationType != other.RelationType) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnionId != 0L) hash ^= UnionId.GetHashCode();
      if (RelationType != 0) hash ^= RelationType.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnionId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnionId);
      }
      if (RelationType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RelationType);
      }
      if (Time != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnionId);
      }
      if (RelationType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RelationType);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnionRelation other) {
      if (other == null) {
        return;
      }
      if (other.UnionId != 0L) {
        UnionId = other.UnionId;
      }
      if (other.RelationType != 0) {
        RelationType = other.RelationType;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnionId = input.ReadInt64();
            break;
          }
          case 16: {
            RelationType = input.ReadInt32();
            break;
          }
          case 24: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 联盟标记 Union.UnionMark
  /// </summary>
  public sealed partial class UnionMark : pb::IMessage<UnionMark> {
    private static readonly pb::MessageParser<UnionMark> _parser = new pb::MessageParser<UnionMark>(() => new UnionMark());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnionMark> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionMark() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionMark(UnionMark other) : this() {
      pos_ = other.pos_;
      name_ = other.name_;
      content_ = other.content_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionMark Clone() {
      return new UnionMark(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private int pos_;
    /// <summary>
    /// 标记位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 标记名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 3;
    private string content_ = "";
    /// <summary>
    /// 标记内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnionMark);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnionMark other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pos != other.Pos) return false;
      if (Name != other.Name) return false;
      if (Content != other.Content) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pos);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnionMark other) {
      if (other == null) {
        return;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pos = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 联盟城池 Union.UnionCity
  /// </summary>
  public sealed partial class UnionCity : pb::IMessage<UnionCity> {
    private static readonly pb::MessageParser<UnionCity> _parser = new pb::MessageParser<UnionCity>(() => new UnionCity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnionCity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionCity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionCity(UnionCity other) : this() {
      pos_ = other.pos_;
      name_ = other.name_;
      level_ = other.level_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionCity Clone() {
      return new UnionCity(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private int pos_;
    /// <summary>
    /// 城池位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 城池名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    /// 城池等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 4;
    private long time_;
    /// <summary>
    /// 占领时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnionCity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnionCity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pos != other.Pos) return false;
      if (Name != other.Name) return false;
      if (Level != other.Level) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pos);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (Time != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnionCity other) {
      if (other == null) {
        return;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pos = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 联盟日志 Union.UnionLog
  /// </summary>
  public sealed partial class UnionLog : pb::IMessage<UnionLog> {
    private static readonly pb::MessageParser<UnionLog> _parser = new pb::MessageParser<UnionLog>(() => new UnionLog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnionLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionLog(UnionLog other) : this() {
      type_ = other.type_;
      subType_ = other.subType_;
      time_ = other.time_;
      subject_ = other.subject_;
      object1_ = other.object1_;
      object2_ = other.object2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionLog Clone() {
      return new UnionLog(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    /// 日志类型：事件、人员、战斗、关系
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "sub_type" field.</summary>
    public const int SubTypeFieldNumber = 2;
    private int subType_;
    /// <summary>
    /// 每个类型下对应的子类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubType {
      get { return subType_; }
      set {
        subType_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private long time_;
    /// <summary>
    /// 发生时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "subject" field.</summary>
    public const int SubjectFieldNumber = 4;
    private string subject_ = "";
    /// <summary>
    /// 事件主语
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Subject {
      get { return subject_; }
      set {
        subject_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "object1" field.</summary>
    public const int Object1FieldNumber = 5;
    private string object1_ = "";
    /// <summary>
    /// 事件宾语1（可以没有）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Object1 {
      get { return object1_; }
      set {
        object1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "object2" field.</summary>
    public const int Object2FieldNumber = 6;
    private string object2_ = "";
    /// <summary>
    /// 事件宾语2（可以没有）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Object2 {
      get { return object2_; }
      set {
        object2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnionLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnionLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (SubType != other.SubType) return false;
      if (Time != other.Time) return false;
      if (Subject != other.Subject) return false;
      if (Object1 != other.Object1) return false;
      if (Object2 != other.Object2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (SubType != 0) hash ^= SubType.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (Subject.Length != 0) hash ^= Subject.GetHashCode();
      if (Object1.Length != 0) hash ^= Object1.GetHashCode();
      if (Object2.Length != 0) hash ^= Object2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (SubType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SubType);
      }
      if (Time != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Time);
      }
      if (Subject.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Subject);
      }
      if (Object1.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Object1);
      }
      if (Object2.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Object2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (SubType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubType);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (Subject.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Subject);
      }
      if (Object1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Object1);
      }
      if (Object2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Object2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnionLog other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.SubType != 0) {
        SubType = other.SubType;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.Subject.Length != 0) {
        Subject = other.Subject;
      }
      if (other.Object1.Length != 0) {
        Object1 = other.Object1;
      }
      if (other.Object2.Length != 0) {
        Object2 = other.Object2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            SubType = input.ReadInt32();
            break;
          }
          case 24: {
            Time = input.ReadInt64();
            break;
          }
          case 34: {
            Subject = input.ReadString();
            break;
          }
          case 42: {
            Object1 = input.ReadString();
            break;
          }
          case 50: {
            Object2 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 联盟成员：每小时资源加成abs值（粮食、石料、木材、铁矿）
  /// </summary>
  public sealed partial class UnionResProAbs : pb::IMessage<UnionResProAbs> {
    private static readonly pb::MessageParser<UnionResProAbs> _parser = new pb::MessageParser<UnionResProAbs>(() => new UnionResProAbs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnionResProAbs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionResProAbs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionResProAbs(UnionResProAbs other) : this() {
      resId_ = other.resId_;
      absValue_ = other.absValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionResProAbs Clone() {
      return new UnionResProAbs(this);
    }

    /// <summary>Field number for the "res_id" field.</summary>
    public const int ResIdFieldNumber = 1;
    private int resId_;
    /// <summary>
    /// 资源类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResId {
      get { return resId_; }
      set {
        resId_ = value;
      }
    }

    /// <summary>Field number for the "abs_value" field.</summary>
    public const int AbsValueFieldNumber = 2;
    private int absValue_;
    /// <summary>
    /// 每小时产量加成值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbsValue {
      get { return absValue_; }
      set {
        absValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnionResProAbs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnionResProAbs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResId != other.ResId) return false;
      if (AbsValue != other.AbsValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResId != 0) hash ^= ResId.GetHashCode();
      if (AbsValue != 0) hash ^= AbsValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ResId);
      }
      if (AbsValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AbsValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResId);
      }
      if (AbsValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbsValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnionResProAbs other) {
      if (other == null) {
        return;
      }
      if (other.ResId != 0) {
        ResId = other.ResId;
      }
      if (other.AbsValue != 0) {
        AbsValue = other.AbsValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ResId = input.ReadInt32();
            break;
          }
          case 16: {
            AbsValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 联盟成员：每小时资源加成pct值（粮食、石料、木材、铁矿）
  /// </summary>
  public sealed partial class UnionResProPct : pb::IMessage<UnionResProPct> {
    private static readonly pb::MessageParser<UnionResProPct> _parser = new pb::MessageParser<UnionResProPct>(() => new UnionResProPct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnionResProPct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[101]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionResProPct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionResProPct(UnionResProPct other) : this() {
      resId_ = other.resId_;
      pctValue_ = other.pctValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionResProPct Clone() {
      return new UnionResProPct(this);
    }

    /// <summary>Field number for the "res_id" field.</summary>
    public const int ResIdFieldNumber = 1;
    private int resId_;
    /// <summary>
    /// 资源类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResId {
      get { return resId_; }
      set {
        resId_ = value;
      }
    }

    /// <summary>Field number for the "pct_value" field.</summary>
    public const int PctValueFieldNumber = 2;
    private int pctValue_;
    /// <summary>
    /// 每小时产量加成值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PctValue {
      get { return pctValue_; }
      set {
        pctValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnionResProPct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnionResProPct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResId != other.ResId) return false;
      if (PctValue != other.PctValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResId != 0) hash ^= ResId.GetHashCode();
      if (PctValue != 0) hash ^= PctValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ResId);
      }
      if (PctValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PctValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResId);
      }
      if (PctValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PctValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnionResProPct other) {
      if (other == null) {
        return;
      }
      if (other.ResId != 0) {
        ResId = other.ResId;
      }
      if (other.PctValue != 0) {
        PctValue = other.PctValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ResId = input.ReadInt32();
            break;
          }
          case 16: {
            PctValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 联盟
  /// </summary>
  public sealed partial class Union : pb::IMessage<Union> {
    private static readonly pb::MessageParser<Union> _parser = new pb::MessageParser<Union>(() => new Union());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Union> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[102]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Union() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Union(Union other) : this() {
      unionId_ = other.unionId_;
      unionName_ = other.unionName_;
      nickName_ = other.nickName_;
      area_ = other.area_;
      pos_ = other.pos_;
      level_ = other.level_;
      exp_ = other.exp_;
      power_ = other.power_;
      cityNum_ = other.cityNum_;
      num_ = other.num_;
      maxNum_ = other.maxNum_;
      resAbs_ = other.resAbs_.Clone();
      resPct_ = other.resPct_.Clone();
      applyLimit_ = other.applyLimit_;
      language_ = other.language_;
      desc_ = other.desc_;
      Flag = other.flag_ != null ? other.Flag.Clone() : null;
      Demise = other.demise_ != null ? other.Demise.Clone() : null;
      Leader = other.leader_ != null ? other.Leader.Clone() : null;
      hasDetail_ = other.hasDetail_;
      applies_ = other.applies_.Clone();
      members_ = other.members_.Clone();
      relations_ = other.relations_.Clone();
      marks_ = other.marks_.Clone();
      cities_ = other.cities_.Clone();
      logs_ = other.logs_.Clone();
      dissolveAt_ = other.dissolveAt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Union Clone() {
      return new Union(this);
    }

    /// <summary>Field number for the "union_id" field.</summary>
    public const int UnionIdFieldNumber = 1;
    private long unionId_;
    /// <summary>
    /// 联盟id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    /// <summary>Field number for the "union_name" field.</summary>
    public const int UnionNameFieldNumber = 2;
    private string unionName_ = "";
    /// <summary>
    /// 联盟name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnionName {
      get { return unionName_; }
      set {
        unionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nick_name" field.</summary>
    public const int NickNameFieldNumber = 3;
    private string nickName_ = "";
    /// <summary>
    /// 简称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "area" field.</summary>
    public const int AreaFieldNumber = 4;
    private string area_ = "";
    /// <summary>
    /// 所在区域
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Area {
      get { return area_; }
      set {
        area_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 5;
    private int pos_;
    /// <summary>
    /// 位置坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 6;
    private int level_;
    /// <summary>
    /// 联盟等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 7;
    private int exp_;
    /// <summary>
    /// 经验值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 8;
    private int power_;
    /// <summary>
    /// 势力值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "city_num" field.</summary>
    public const int CityNumFieldNumber = 9;
    private int cityNum_;
    /// <summary>
    /// 城池数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CityNum {
      get { return cityNum_; }
      set {
        cityNum_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 10;
    private int num_;
    /// <summary>
    /// 联盟成员数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "max_num" field.</summary>
    public const int MaxNumFieldNumber = 11;
    private int maxNum_;
    /// <summary>
    /// 最大成员数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxNum {
      get { return maxNum_; }
      set {
        maxNum_ = value;
      }
    }

    /// <summary>Field number for the "res_abs" field.</summary>
    public const int ResAbsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Cspb.UnionResProAbs> _repeated_resAbs_codec
        = pb::FieldCodec.ForMessage(98, global::Cspb.UnionResProAbs.Parser);
    private readonly pbc::RepeatedField<global::Cspb.UnionResProAbs> resAbs_ = new pbc::RepeatedField<global::Cspb.UnionResProAbs>();
    /// <summary>
    /// 每小时资源加成值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.UnionResProAbs> ResAbs {
      get { return resAbs_; }
    }

    /// <summary>Field number for the "res_pct" field.</summary>
    public const int ResPctFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Cspb.UnionResProPct> _repeated_resPct_codec
        = pb::FieldCodec.ForMessage(106, global::Cspb.UnionResProPct.Parser);
    private readonly pbc::RepeatedField<global::Cspb.UnionResProPct> resPct_ = new pbc::RepeatedField<global::Cspb.UnionResProPct>();
    /// <summary>
    /// 每小时资源加成百分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.UnionResProPct> ResPct {
      get { return resPct_; }
    }

    /// <summary>Field number for the "apply_limit" field.</summary>
    public const int ApplyLimitFieldNumber = 14;
    private int applyLimit_;
    /// <summary>
    /// 申请条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplyLimit {
      get { return applyLimit_; }
      set {
        applyLimit_ = value;
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 15;
    private int language_;
    /// <summary>
    /// 联盟语言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Language {
      get { return language_; }
      set {
        language_ = value;
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 16;
    private string desc_ = "";
    /// <summary>
    /// 联盟公告
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 17;
    private global::Cspb.UnionFlag flag_;
    /// <summary>
    /// 联盟旗帜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.UnionFlag Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    /// <summary>Field number for the "demise" field.</summary>
    public const int DemiseFieldNumber = 18;
    private global::Cspb.UnionDemise demise_;
    /// <summary>
    /// 联盟盟主禅让
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.UnionDemise Demise {
      get { return demise_; }
      set {
        demise_ = value;
      }
    }

    /// <summary>Field number for the "leader" field.</summary>
    public const int LeaderFieldNumber = 19;
    private global::Cspb.UnionPlayer leader_;
    /// <summary>
    /// 盟主信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.UnionPlayer Leader {
      get { return leader_; }
      set {
        leader_ = value;
      }
    }

    /// <summary>Field number for the "has_detail" field.</summary>
    public const int HasDetailFieldNumber = 20;
    private bool hasDetail_;
    /// <summary>
    /// applies，memebers，relations，marks，cities，logs字段是否有意义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDetail {
      get { return hasDetail_; }
      set {
        hasDetail_ = value;
      }
    }

    /// <summary>Field number for the "applies" field.</summary>
    public const int AppliesFieldNumber = 21;
    private static readonly pb::FieldCodec<global::Cspb.ApplyPlayer> _repeated_applies_codec
        = pb::FieldCodec.ForMessage(170, global::Cspb.ApplyPlayer.Parser);
    private readonly pbc::RepeatedField<global::Cspb.ApplyPlayer> applies_ = new pbc::RepeatedField<global::Cspb.ApplyPlayer>();
    /// <summary>
    /// 玩家申请
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.ApplyPlayer> Applies {
      get { return applies_; }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 22;
    private static readonly pb::FieldCodec<global::Cspb.UnionPlayer> _repeated_members_codec
        = pb::FieldCodec.ForMessage(178, global::Cspb.UnionPlayer.Parser);
    private readonly pbc::RepeatedField<global::Cspb.UnionPlayer> members_ = new pbc::RepeatedField<global::Cspb.UnionPlayer>();
    /// <summary>
    /// 成员信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.UnionPlayer> Members {
      get { return members_; }
    }

    /// <summary>Field number for the "relations" field.</summary>
    public const int RelationsFieldNumber = 23;
    private static readonly pb::FieldCodec<global::Cspb.UnionRelation> _repeated_relations_codec
        = pb::FieldCodec.ForMessage(186, global::Cspb.UnionRelation.Parser);
    private readonly pbc::RepeatedField<global::Cspb.UnionRelation> relations_ = new pbc::RepeatedField<global::Cspb.UnionRelation>();
    /// <summary>
    /// 联盟关系
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.UnionRelation> Relations {
      get { return relations_; }
    }

    /// <summary>Field number for the "marks" field.</summary>
    public const int MarksFieldNumber = 24;
    private static readonly pb::FieldCodec<global::Cspb.UnionMark> _repeated_marks_codec
        = pb::FieldCodec.ForMessage(194, global::Cspb.UnionMark.Parser);
    private readonly pbc::RepeatedField<global::Cspb.UnionMark> marks_ = new pbc::RepeatedField<global::Cspb.UnionMark>();
    /// <summary>
    /// 联盟标记
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.UnionMark> Marks {
      get { return marks_; }
    }

    /// <summary>Field number for the "cities" field.</summary>
    public const int CitiesFieldNumber = 25;
    private static readonly pb::FieldCodec<global::Cspb.UnionCity> _repeated_cities_codec
        = pb::FieldCodec.ForMessage(202, global::Cspb.UnionCity.Parser);
    private readonly pbc::RepeatedField<global::Cspb.UnionCity> cities_ = new pbc::RepeatedField<global::Cspb.UnionCity>();
    /// <summary>
    /// 联盟城市
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.UnionCity> Cities {
      get { return cities_; }
    }

    /// <summary>Field number for the "logs" field.</summary>
    public const int LogsFieldNumber = 26;
    private static readonly pb::FieldCodec<global::Cspb.UnionLog> _repeated_logs_codec
        = pb::FieldCodec.ForMessage(210, global::Cspb.UnionLog.Parser);
    private readonly pbc::RepeatedField<global::Cspb.UnionLog> logs_ = new pbc::RepeatedField<global::Cspb.UnionLog>();
    /// <summary>
    /// 联盟日志
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.UnionLog> Logs {
      get { return logs_; }
    }

    /// <summary>Field number for the "dissolve_at" field.</summary>
    public const int DissolveAtFieldNumber = 27;
    private long dissolveAt_;
    /// <summary>
    /// 联盟解散时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DissolveAt {
      get { return dissolveAt_; }
      set {
        dissolveAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Union);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Union other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnionId != other.UnionId) return false;
      if (UnionName != other.UnionName) return false;
      if (NickName != other.NickName) return false;
      if (Area != other.Area) return false;
      if (Pos != other.Pos) return false;
      if (Level != other.Level) return false;
      if (Exp != other.Exp) return false;
      if (Power != other.Power) return false;
      if (CityNum != other.CityNum) return false;
      if (Num != other.Num) return false;
      if (MaxNum != other.MaxNum) return false;
      if(!resAbs_.Equals(other.resAbs_)) return false;
      if(!resPct_.Equals(other.resPct_)) return false;
      if (ApplyLimit != other.ApplyLimit) return false;
      if (Language != other.Language) return false;
      if (Desc != other.Desc) return false;
      if (!object.Equals(Flag, other.Flag)) return false;
      if (!object.Equals(Demise, other.Demise)) return false;
      if (!object.Equals(Leader, other.Leader)) return false;
      if (HasDetail != other.HasDetail) return false;
      if(!applies_.Equals(other.applies_)) return false;
      if(!members_.Equals(other.members_)) return false;
      if(!relations_.Equals(other.relations_)) return false;
      if(!marks_.Equals(other.marks_)) return false;
      if(!cities_.Equals(other.cities_)) return false;
      if(!logs_.Equals(other.logs_)) return false;
      if (DissolveAt != other.DissolveAt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnionId != 0L) hash ^= UnionId.GetHashCode();
      if (UnionName.Length != 0) hash ^= UnionName.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (Area.Length != 0) hash ^= Area.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      if (CityNum != 0) hash ^= CityNum.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (MaxNum != 0) hash ^= MaxNum.GetHashCode();
      hash ^= resAbs_.GetHashCode();
      hash ^= resPct_.GetHashCode();
      if (ApplyLimit != 0) hash ^= ApplyLimit.GetHashCode();
      if (Language != 0) hash ^= Language.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (flag_ != null) hash ^= Flag.GetHashCode();
      if (demise_ != null) hash ^= Demise.GetHashCode();
      if (leader_ != null) hash ^= Leader.GetHashCode();
      if (HasDetail != false) hash ^= HasDetail.GetHashCode();
      hash ^= applies_.GetHashCode();
      hash ^= members_.GetHashCode();
      hash ^= relations_.GetHashCode();
      hash ^= marks_.GetHashCode();
      hash ^= cities_.GetHashCode();
      hash ^= logs_.GetHashCode();
      if (DissolveAt != 0L) hash ^= DissolveAt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnionId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnionId);
      }
      if (UnionName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UnionName);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NickName);
      }
      if (Area.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Area);
      }
      if (Pos != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Pos);
      }
      if (Level != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Exp);
      }
      if (Power != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Power);
      }
      if (CityNum != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CityNum);
      }
      if (Num != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Num);
      }
      if (MaxNum != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MaxNum);
      }
      resAbs_.WriteTo(output, _repeated_resAbs_codec);
      resPct_.WriteTo(output, _repeated_resPct_codec);
      if (ApplyLimit != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ApplyLimit);
      }
      if (Language != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Language);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Desc);
      }
      if (flag_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Flag);
      }
      if (demise_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Demise);
      }
      if (leader_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Leader);
      }
      if (HasDetail != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(HasDetail);
      }
      applies_.WriteTo(output, _repeated_applies_codec);
      members_.WriteTo(output, _repeated_members_codec);
      relations_.WriteTo(output, _repeated_relations_codec);
      marks_.WriteTo(output, _repeated_marks_codec);
      cities_.WriteTo(output, _repeated_cities_codec);
      logs_.WriteTo(output, _repeated_logs_codec);
      if (DissolveAt != 0L) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(DissolveAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnionId);
      }
      if (UnionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnionName);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (Area.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Area);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (CityNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CityNum);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (MaxNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxNum);
      }
      size += resAbs_.CalculateSize(_repeated_resAbs_codec);
      size += resPct_.CalculateSize(_repeated_resPct_codec);
      if (ApplyLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplyLimit);
      }
      if (Language != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Language);
      }
      if (Desc.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (flag_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Flag);
      }
      if (demise_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Demise);
      }
      if (leader_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Leader);
      }
      if (HasDetail != false) {
        size += 2 + 1;
      }
      size += applies_.CalculateSize(_repeated_applies_codec);
      size += members_.CalculateSize(_repeated_members_codec);
      size += relations_.CalculateSize(_repeated_relations_codec);
      size += marks_.CalculateSize(_repeated_marks_codec);
      size += cities_.CalculateSize(_repeated_cities_codec);
      size += logs_.CalculateSize(_repeated_logs_codec);
      if (DissolveAt != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(DissolveAt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Union other) {
      if (other == null) {
        return;
      }
      if (other.UnionId != 0L) {
        UnionId = other.UnionId;
      }
      if (other.UnionName.Length != 0) {
        UnionName = other.UnionName;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      if (other.Area.Length != 0) {
        Area = other.Area;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.CityNum != 0) {
        CityNum = other.CityNum;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.MaxNum != 0) {
        MaxNum = other.MaxNum;
      }
      resAbs_.Add(other.resAbs_);
      resPct_.Add(other.resPct_);
      if (other.ApplyLimit != 0) {
        ApplyLimit = other.ApplyLimit;
      }
      if (other.Language != 0) {
        Language = other.Language;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      if (other.flag_ != null) {
        if (flag_ == null) {
          flag_ = new global::Cspb.UnionFlag();
        }
        Flag.MergeFrom(other.Flag);
      }
      if (other.demise_ != null) {
        if (demise_ == null) {
          demise_ = new global::Cspb.UnionDemise();
        }
        Demise.MergeFrom(other.Demise);
      }
      if (other.leader_ != null) {
        if (leader_ == null) {
          leader_ = new global::Cspb.UnionPlayer();
        }
        Leader.MergeFrom(other.Leader);
      }
      if (other.HasDetail != false) {
        HasDetail = other.HasDetail;
      }
      applies_.Add(other.applies_);
      members_.Add(other.members_);
      relations_.Add(other.relations_);
      marks_.Add(other.marks_);
      cities_.Add(other.cities_);
      logs_.Add(other.logs_);
      if (other.DissolveAt != 0L) {
        DissolveAt = other.DissolveAt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnionId = input.ReadInt64();
            break;
          }
          case 18: {
            UnionName = input.ReadString();
            break;
          }
          case 26: {
            NickName = input.ReadString();
            break;
          }
          case 34: {
            Area = input.ReadString();
            break;
          }
          case 40: {
            Pos = input.ReadInt32();
            break;
          }
          case 48: {
            Level = input.ReadInt32();
            break;
          }
          case 56: {
            Exp = input.ReadInt32();
            break;
          }
          case 64: {
            Power = input.ReadInt32();
            break;
          }
          case 72: {
            CityNum = input.ReadInt32();
            break;
          }
          case 80: {
            Num = input.ReadInt32();
            break;
          }
          case 88: {
            MaxNum = input.ReadInt32();
            break;
          }
          case 98: {
            resAbs_.AddEntriesFrom(input, _repeated_resAbs_codec);
            break;
          }
          case 106: {
            resPct_.AddEntriesFrom(input, _repeated_resPct_codec);
            break;
          }
          case 112: {
            ApplyLimit = input.ReadInt32();
            break;
          }
          case 120: {
            Language = input.ReadInt32();
            break;
          }
          case 130: {
            Desc = input.ReadString();
            break;
          }
          case 138: {
            if (flag_ == null) {
              flag_ = new global::Cspb.UnionFlag();
            }
            input.ReadMessage(flag_);
            break;
          }
          case 146: {
            if (demise_ == null) {
              demise_ = new global::Cspb.UnionDemise();
            }
            input.ReadMessage(demise_);
            break;
          }
          case 154: {
            if (leader_ == null) {
              leader_ = new global::Cspb.UnionPlayer();
            }
            input.ReadMessage(leader_);
            break;
          }
          case 160: {
            HasDetail = input.ReadBool();
            break;
          }
          case 170: {
            applies_.AddEntriesFrom(input, _repeated_applies_codec);
            break;
          }
          case 178: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 186: {
            relations_.AddEntriesFrom(input, _repeated_relations_codec);
            break;
          }
          case 194: {
            marks_.AddEntriesFrom(input, _repeated_marks_codec);
            break;
          }
          case 202: {
            cities_.AddEntriesFrom(input, _repeated_cities_codec);
            break;
          }
          case 210: {
            logs_.AddEntriesFrom(input, _repeated_logs_codec);
            break;
          }
          case 216: {
            DissolveAt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 联盟信息，包含距离信息
  /// </summary>
  public sealed partial class UnionInfo : pb::IMessage<UnionInfo> {
    private static readonly pb::MessageParser<UnionInfo> _parser = new pb::MessageParser<UnionInfo>(() => new UnionInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[103]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionInfo(UnionInfo other) : this() {
      Union = other.union_ != null ? other.Union.Clone() : null;
      distance_ = other.distance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionInfo Clone() {
      return new UnionInfo(this);
    }

    /// <summary>Field number for the "union" field.</summary>
    public const int UnionFieldNumber = 1;
    private global::Cspb.Union union_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.Union Union {
      get { return union_; }
      set {
        union_ = value;
      }
    }

    /// <summary>Field number for the "distance" field.</summary>
    public const int DistanceFieldNumber = 2;
    private int distance_;
    /// <summary>
    /// 距离类型，0-近，1-中，2-远
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Distance {
      get { return distance_; }
      set {
        distance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Union, other.Union)) return false;
      if (Distance != other.Distance) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (union_ != null) hash ^= Union.GetHashCode();
      if (Distance != 0) hash ^= Distance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (union_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Union);
      }
      if (Distance != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Distance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (union_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Union);
      }
      if (Distance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Distance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnionInfo other) {
      if (other == null) {
        return;
      }
      if (other.union_ != null) {
        if (union_ == null) {
          union_ = new global::Cspb.Union();
        }
        Union.MergeFrom(other.Union);
      }
      if (other.Distance != 0) {
        Distance = other.Distance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (union_ == null) {
              union_ = new global::Cspb.Union();
            }
            input.ReadMessage(union_);
            break;
          }
          case 16: {
            Distance = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 联盟信息列表
  /// </summary>
  public sealed partial class UnionNtf : pb::IMessage<UnionNtf> {
    private static readonly pb::MessageParser<UnionNtf> _parser = new pb::MessageParser<UnionNtf>(() => new UnionNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnionNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[104]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionNtf(UnionNtf other) : this() {
      unions_ = other.unions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionNtf Clone() {
      return new UnionNtf(this);
    }

    /// <summary>Field number for the "unions" field.</summary>
    public const int UnionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.UnionInfo> _repeated_unions_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.UnionInfo.Parser);
    private readonly pbc::RepeatedField<global::Cspb.UnionInfo> unions_ = new pbc::RepeatedField<global::Cspb.UnionInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.UnionInfo> Unions {
      get { return unions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnionNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnionNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!unions_.Equals(other.unions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= unions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      unions_.WriteTo(output, _repeated_unions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += unions_.CalculateSize(_repeated_unions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnionNtf other) {
      if (other == null) {
        return;
      }
      unions_.Add(other.unions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            unions_.AddEntriesFrom(input, _repeated_unions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 联盟将某个联盟设置为敌对、友好、或无关系，广播给联盟在线成员的ntf
  /// </summary>
  public sealed partial class UnionRelationBroadcastNtf : pb::IMessage<UnionRelationBroadcastNtf> {
    private static readonly pb::MessageParser<UnionRelationBroadcastNtf> _parser = new pb::MessageParser<UnionRelationBroadcastNtf>(() => new UnionRelationBroadcastNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnionRelationBroadcastNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[105]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionRelationBroadcastNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionRelationBroadcastNtf(UnionRelationBroadcastNtf other) : this() {
      unionId_ = other.unionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionRelationBroadcastNtf Clone() {
      return new UnionRelationBroadcastNtf(this);
    }

    /// <summary>Field number for the "union_id" field.</summary>
    public const int UnionIdFieldNumber = 1;
    private long unionId_;
    /// <summary>
    /// 被设置关系的联盟id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnionRelationBroadcastNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnionRelationBroadcastNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnionId != other.UnionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnionId != 0L) hash ^= UnionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnionId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnionRelationBroadcastNtf other) {
      if (other == null) {
        return;
      }
      if (other.UnionId != 0L) {
        UnionId = other.UnionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnionId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家进入、离开出联盟、玩家被沦陷（非全盟沦陷），脱离沦陷时，
  /// 广播给（前）联盟在线盟友、将自己所在（前）联盟设置为友盟、敌盟的联盟在线成员，将自己沦陷的（前）联盟在线成员的ntf
  /// </summary>
  public sealed partial class UnionPlayerBroadcastNtf : pb::IMessage<UnionPlayerBroadcastNtf> {
    private static readonly pb::MessageParser<UnionPlayerBroadcastNtf> _parser = new pb::MessageParser<UnionPlayerBroadcastNtf>(() => new UnionPlayerBroadcastNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnionPlayerBroadcastNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[106]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionPlayerBroadcastNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionPlayerBroadcastNtf(UnionPlayerBroadcastNtf other) : this() {
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionPlayerBroadcastNtf Clone() {
      return new UnionPlayerBroadcastNtf(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnionPlayerBroadcastNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnionPlayerBroadcastNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnionPlayerBroadcastNtf other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 全盟沦陷时，广播给联盟在线盟友、将自己联盟设置为友盟、敌盟的联盟在线成员，将自己沦陷的联盟在线成员的ntf
  /// </summary>
  public sealed partial class UnionFallenBroadcastNtf : pb::IMessage<UnionFallenBroadcastNtf> {
    private static readonly pb::MessageParser<UnionFallenBroadcastNtf> _parser = new pb::MessageParser<UnionFallenBroadcastNtf>(() => new UnionFallenBroadcastNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnionFallenBroadcastNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[107]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionFallenBroadcastNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionFallenBroadcastNtf(UnionFallenBroadcastNtf other) : this() {
      unionId_ = other.unionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionFallenBroadcastNtf Clone() {
      return new UnionFallenBroadcastNtf(this);
    }

    /// <summary>Field number for the "union_id" field.</summary>
    public const int UnionIdFieldNumber = 1;
    private long unionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnionFallenBroadcastNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnionFallenBroadcastNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnionId != other.UnionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnionId != 0L) hash ^= UnionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnionId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnionFallenBroadcastNtf other) {
      if (other == null) {
        return;
      }
      if (other.UnionId != 0L) {
        UnionId = other.UnionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnionId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LandBasic : pb::IMessage<LandBasic> {
    private static readonly pb::MessageParser<LandBasic> _parser = new pb::MessageParser<LandBasic>(() => new LandBasic());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LandBasic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[108]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LandBasic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LandBasic(LandBasic other) : this() {
      pos_ = other.pos_;
      entityType_ = other.entityType_;
      durable_ = other.durable_;
      giveupEndat_ = other.giveupEndat_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LandBasic Clone() {
      return new LandBasic(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private int pos_;
    /// <summary>
    /// 坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "entity_type" field.</summary>
    public const int EntityTypeFieldNumber = 2;
    private global::Cspb.ENTITY_TYPE entityType_ = 0;
    /// <summary>
    /// 类型 主城城区 分城 要塞...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ENTITY_TYPE EntityType {
      get { return entityType_; }
      set {
        entityType_ = value;
      }
    }

    /// <summary>Field number for the "durable" field.</summary>
    public const int DurableFieldNumber = 3;
    private int durable_;
    /// <summary>
    /// 耐久度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Durable {
      get { return durable_; }
      set {
        durable_ = value;
      }
    }

    /// <summary>Field number for the "giveup_endat" field.</summary>
    public const int GiveupEndatFieldNumber = 4;
    private long giveupEndat_;
    /// <summary>
    /// 放弃开始的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GiveupEndat {
      get { return giveupEndat_; }
      set {
        giveupEndat_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    /// <summary>
    /// 要塞、分城会有，单独获取 名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LandBasic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LandBasic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pos != other.Pos) return false;
      if (EntityType != other.EntityType) return false;
      if (Durable != other.Durable) return false;
      if (GiveupEndat != other.GiveupEndat) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (EntityType != 0) hash ^= EntityType.GetHashCode();
      if (Durable != 0) hash ^= Durable.GetHashCode();
      if (GiveupEndat != 0L) hash ^= GiveupEndat.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pos);
      }
      if (EntityType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EntityType);
      }
      if (Durable != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Durable);
      }
      if (GiveupEndat != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(GiveupEndat);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (EntityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntityType);
      }
      if (Durable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Durable);
      }
      if (GiveupEndat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GiveupEndat);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LandBasic other) {
      if (other == null) {
        return;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.EntityType != 0) {
        EntityType = other.EntityType;
      }
      if (other.Durable != 0) {
        Durable = other.Durable;
      }
      if (other.GiveupEndat != 0L) {
        GiveupEndat = other.GiveupEndat;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pos = input.ReadInt32();
            break;
          }
          case 16: {
            entityType_ = (global::Cspb.ENTITY_TYPE) input.ReadEnum();
            break;
          }
          case 24: {
            Durable = input.ReadInt32();
            break;
          }
          case 32: {
            GiveupEndat = input.ReadInt64();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家个人土地 信息
  /// </summary>
  public sealed partial class LandsBasicNtf : pb::IMessage<LandsBasicNtf> {
    private static readonly pb::MessageParser<LandsBasicNtf> _parser = new pb::MessageParser<LandsBasicNtf>(() => new LandsBasicNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LandsBasicNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[109]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LandsBasicNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LandsBasicNtf(LandsBasicNtf other) : this() {
      landBasic_ = other.landBasic_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LandsBasicNtf Clone() {
      return new LandsBasicNtf(this);
    }

    /// <summary>Field number for the "land_basic" field.</summary>
    public const int LandBasicFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.LandBasic> _repeated_landBasic_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.LandBasic.Parser);
    private readonly pbc::RepeatedField<global::Cspb.LandBasic> landBasic_ = new pbc::RepeatedField<global::Cspb.LandBasic>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.LandBasic> LandBasic {
      get { return landBasic_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LandsBasicNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LandsBasicNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!landBasic_.Equals(other.landBasic_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= landBasic_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      landBasic_.WriteTo(output, _repeated_landBasic_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += landBasic_.CalculateSize(_repeated_landBasic_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LandsBasicNtf other) {
      if (other == null) {
        return;
      }
      landBasic_.Add(other.landBasic_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            landBasic_.AddEntriesFrom(input, _repeated_landBasic_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战役
  /// </summary>
  public sealed partial class Conflict : pb::IMessage<Conflict> {
    private static readonly pb::MessageParser<Conflict> _parser = new pb::MessageParser<Conflict>(() => new Conflict());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Conflict> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[110]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Conflict() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Conflict(Conflict other) : this() {
      typ_ = other.typ_;
      dmg_ = other.dmg_;
      pos_ = other.pos_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Conflict Clone() {
      return new Conflict(this);
    }

    /// <summary>Field number for the "typ" field.</summary>
    public const int TypFieldNumber = 1;
    private global::Cspb.CONFLICT_TYPE typ_ = 0;
    /// <summary>
    /// 类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.CONFLICT_TYPE Typ {
      get { return typ_; }
      set {
        typ_ = value;
      }
    }

    /// <summary>Field number for the "dmg" field.</summary>
    public const int DmgFieldNumber = 2;
    private int dmg_;
    /// <summary>
    /// 造成的伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dmg {
      get { return dmg_; }
      set {
        dmg_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private int pos_;
    /// <summary>
    /// 产生战役的位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Conflict);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Conflict other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Typ != other.Typ) return false;
      if (Dmg != other.Dmg) return false;
      if (Pos != other.Pos) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Typ != 0) hash ^= Typ.GetHashCode();
      if (Dmg != 0) hash ^= Dmg.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Typ != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Typ);
      }
      if (Dmg != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Dmg);
      }
      if (Pos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Typ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Typ);
      }
      if (Dmg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dmg);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Conflict other) {
      if (other == null) {
        return;
      }
      if (other.Typ != 0) {
        Typ = other.Typ;
      }
      if (other.Dmg != 0) {
        Dmg = other.Dmg;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            typ_ = (global::Cspb.CONFLICT_TYPE) input.ReadEnum();
            break;
          }
          case 16: {
            Dmg = input.ReadInt32();
            break;
          }
          case 24: {
            Pos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 在缩略图显示
  /// </summary>
  public sealed partial class NpcCityBrief : pb::IMessage<NpcCityBrief> {
    private static readonly pb::MessageParser<NpcCityBrief> _parser = new pb::MessageParser<NpcCityBrief>(() => new NpcCityBrief());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NpcCityBrief> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[111]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcCityBrief() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcCityBrief(NpcCityBrief other) : this() {
      pos_ = other.pos_;
      unionId_ = other.unionId_;
      curDurable_ = other.curDurable_;
      maxDurable_ = other.maxDurable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcCityBrief Clone() {
      return new NpcCityBrief(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private int pos_;
    /// <summary>
    /// 城池显示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "union_id" field.</summary>
    public const int UnionIdFieldNumber = 2;
    private long unionId_;
    /// <summary>
    /// 被占领的联盟id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    /// <summary>Field number for the "cur_durable" field.</summary>
    public const int CurDurableFieldNumber = 3;
    private int curDurable_;
    /// <summary>
    /// 当前耐久度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurDurable {
      get { return curDurable_; }
      set {
        curDurable_ = value;
      }
    }

    /// <summary>Field number for the "max_durable" field.</summary>
    public const int MaxDurableFieldNumber = 4;
    private int maxDurable_;
    /// <summary>
    /// 最大耐久度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxDurable {
      get { return maxDurable_; }
      set {
        maxDurable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NpcCityBrief);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NpcCityBrief other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pos != other.Pos) return false;
      if (UnionId != other.UnionId) return false;
      if (CurDurable != other.CurDurable) return false;
      if (MaxDurable != other.MaxDurable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (UnionId != 0L) hash ^= UnionId.GetHashCode();
      if (CurDurable != 0) hash ^= CurDurable.GetHashCode();
      if (MaxDurable != 0) hash ^= MaxDurable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pos);
      }
      if (UnionId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UnionId);
      }
      if (CurDurable != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurDurable);
      }
      if (MaxDurable != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxDurable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (UnionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnionId);
      }
      if (CurDurable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurDurable);
      }
      if (MaxDurable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxDurable);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NpcCityBrief other) {
      if (other == null) {
        return;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.UnionId != 0L) {
        UnionId = other.UnionId;
      }
      if (other.CurDurable != 0) {
        CurDurable = other.CurDurable;
      }
      if (other.MaxDurable != 0) {
        MaxDurable = other.MaxDurable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pos = input.ReadInt32();
            break;
          }
          case 16: {
            UnionId = input.ReadInt64();
            break;
          }
          case 24: {
            CurDurable = input.ReadInt32();
            break;
          }
          case 32: {
            MaxDurable = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FallenNoticeNtf : pb::IMessage<FallenNoticeNtf> {
    private static readonly pb::MessageParser<FallenNoticeNtf> _parser = new pb::MessageParser<FallenNoticeNtf>(() => new FallenNoticeNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FallenNoticeNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[112]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FallenNoticeNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FallenNoticeNtf(FallenNoticeNtf other) : this() {
      fallenId_ = other.fallenId_;
      fallenName_ = other.fallenName_;
      fallenUnion_ = other.fallenUnion_;
      fallenbyId_ = other.fallenbyId_;
      fallenbyName_ = other.fallenbyName_;
      fallenbyUnion_ = other.fallenbyUnion_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FallenNoticeNtf Clone() {
      return new FallenNoticeNtf(this);
    }

    /// <summary>Field number for the "fallen_id" field.</summary>
    public const int FallenIdFieldNumber = 1;
    private long fallenId_;
    /// <summary>
    ///被沦陷方
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FallenId {
      get { return fallenId_; }
      set {
        fallenId_ = value;
      }
    }

    /// <summary>Field number for the "fallen_name" field.</summary>
    public const int FallenNameFieldNumber = 2;
    private string fallenName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FallenName {
      get { return fallenName_; }
      set {
        fallenName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fallen_union" field.</summary>
    public const int FallenUnionFieldNumber = 3;
    private string fallenUnion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FallenUnion {
      get { return fallenUnion_; }
      set {
        fallenUnion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fallenby_id" field.</summary>
    public const int FallenbyIdFieldNumber = 4;
    private long fallenbyId_;
    /// <summary>
    ///沦陷方
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FallenbyId {
      get { return fallenbyId_; }
      set {
        fallenbyId_ = value;
      }
    }

    /// <summary>Field number for the "fallenby_name" field.</summary>
    public const int FallenbyNameFieldNumber = 5;
    private string fallenbyName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FallenbyName {
      get { return fallenbyName_; }
      set {
        fallenbyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fallenby_union" field.</summary>
    public const int FallenbyUnionFieldNumber = 6;
    private string fallenbyUnion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FallenbyUnion {
      get { return fallenbyUnion_; }
      set {
        fallenbyUnion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 7;
    private long time_;
    /// <summary>
    ///沦陷时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FallenNoticeNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FallenNoticeNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FallenId != other.FallenId) return false;
      if (FallenName != other.FallenName) return false;
      if (FallenUnion != other.FallenUnion) return false;
      if (FallenbyId != other.FallenbyId) return false;
      if (FallenbyName != other.FallenbyName) return false;
      if (FallenbyUnion != other.FallenbyUnion) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FallenId != 0L) hash ^= FallenId.GetHashCode();
      if (FallenName.Length != 0) hash ^= FallenName.GetHashCode();
      if (FallenUnion.Length != 0) hash ^= FallenUnion.GetHashCode();
      if (FallenbyId != 0L) hash ^= FallenbyId.GetHashCode();
      if (FallenbyName.Length != 0) hash ^= FallenbyName.GetHashCode();
      if (FallenbyUnion.Length != 0) hash ^= FallenbyUnion.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FallenId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(FallenId);
      }
      if (FallenName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FallenName);
      }
      if (FallenUnion.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FallenUnion);
      }
      if (FallenbyId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FallenbyId);
      }
      if (FallenbyName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FallenbyName);
      }
      if (FallenbyUnion.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FallenbyUnion);
      }
      if (Time != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FallenId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FallenId);
      }
      if (FallenName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FallenName);
      }
      if (FallenUnion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FallenUnion);
      }
      if (FallenbyId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FallenbyId);
      }
      if (FallenbyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FallenbyName);
      }
      if (FallenbyUnion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FallenbyUnion);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FallenNoticeNtf other) {
      if (other == null) {
        return;
      }
      if (other.FallenId != 0L) {
        FallenId = other.FallenId;
      }
      if (other.FallenName.Length != 0) {
        FallenName = other.FallenName;
      }
      if (other.FallenUnion.Length != 0) {
        FallenUnion = other.FallenUnion;
      }
      if (other.FallenbyId != 0L) {
        FallenbyId = other.FallenbyId;
      }
      if (other.FallenbyName.Length != 0) {
        FallenbyName = other.FallenbyName;
      }
      if (other.FallenbyUnion.Length != 0) {
        FallenbyUnion = other.FallenbyUnion;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FallenId = input.ReadInt64();
            break;
          }
          case 18: {
            FallenName = input.ReadString();
            break;
          }
          case 26: {
            FallenUnion = input.ReadString();
            break;
          }
          case 32: {
            FallenbyId = input.ReadInt64();
            break;
          }
          case 42: {
            FallenbyName = input.ReadString();
            break;
          }
          case 50: {
            FallenbyUnion = input.ReadString();
            break;
          }
          case 56: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FallenInfoNtf : pb::IMessage<FallenInfoNtf> {
    private static readonly pb::MessageParser<FallenInfoNtf> _parser = new pb::MessageParser<FallenInfoNtf>(() => new FallenInfoNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FallenInfoNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[113]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FallenInfoNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FallenInfoNtf(FallenInfoNtf other) : this() {
      unionId_ = other.unionId_;
      time_ = other.time_;
      revoltRes_ = other.revoltRes_;
      revoltMaxRes_ = other.revoltMaxRes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FallenInfoNtf Clone() {
      return new FallenInfoNtf(this);
    }

    /// <summary>Field number for the "union_id" field.</summary>
    public const int UnionIdFieldNumber = 1;
    private long unionId_;
    /// <summary>
    /// 被联盟沦陷
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private long time_;
    /// <summary>
    /// 被沦陷时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "revolt_res" field.</summary>
    public const int RevoltResFieldNumber = 3;
    private int revoltRes_;
    /// <summary>
    /// 反叛已缴纳的资源量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RevoltRes {
      get { return revoltRes_; }
      set {
        revoltRes_ = value;
      }
    }

    /// <summary>Field number for the "revolt_max_res" field.</summary>
    public const int RevoltMaxResFieldNumber = 4;
    private int revoltMaxRes_;
    /// <summary>
    /// 反叛需要的总资源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RevoltMaxRes {
      get { return revoltMaxRes_; }
      set {
        revoltMaxRes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FallenInfoNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FallenInfoNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnionId != other.UnionId) return false;
      if (Time != other.Time) return false;
      if (RevoltRes != other.RevoltRes) return false;
      if (RevoltMaxRes != other.RevoltMaxRes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnionId != 0L) hash ^= UnionId.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (RevoltRes != 0) hash ^= RevoltRes.GetHashCode();
      if (RevoltMaxRes != 0) hash ^= RevoltMaxRes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnionId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnionId);
      }
      if (Time != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Time);
      }
      if (RevoltRes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RevoltRes);
      }
      if (RevoltMaxRes != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RevoltMaxRes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnionId);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (RevoltRes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RevoltRes);
      }
      if (RevoltMaxRes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RevoltMaxRes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FallenInfoNtf other) {
      if (other == null) {
        return;
      }
      if (other.UnionId != 0L) {
        UnionId = other.UnionId;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.RevoltRes != 0) {
        RevoltRes = other.RevoltRes;
      }
      if (other.RevoltMaxRes != 0) {
        RevoltMaxRes = other.RevoltMaxRes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnionId = input.ReadInt64();
            break;
          }
          case 16: {
            Time = input.ReadInt64();
            break;
          }
          case 24: {
            RevoltRes = input.ReadInt32();
            break;
          }
          case 32: {
            RevoltMaxRes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 演武地块信息
  /// </summary>
  public sealed partial class DrillTile : pb::IMessage<DrillTile> {
    private static readonly pb::MessageParser<DrillTile> _parser = new pb::MessageParser<DrillTile>(() => new DrillTile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrillTile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[114]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrillTile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrillTile(DrillTile other) : this() {
      pos_ = other.pos_;
      atkCost_ = other.atkCost_;
      atkNumber_ = other.atkNumber_;
      atkHp_ = other.atkHp_;
      durable_ = other.durable_;
      maxDurable_ = other.maxDurable_;
      isEnd_ = other.isEnd_;
      isFortress_ = other.isFortress_;
      defTroops_ = other.defTroops_.Clone();
      awards_ = other.awards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrillTile Clone() {
      return new DrillTile(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private int pos_;
    /// <summary>
    /// 坐标  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "atk_cost" field.</summary>
    public const int AtkCostFieldNumber = 2;
    private float atkCost_;
    /// <summary>
    /// 攻击部队cost
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AtkCost {
      get { return atkCost_; }
      set {
        atkCost_ = value;
      }
    }

    /// <summary>Field number for the "atk_number" field.</summary>
    public const int AtkNumberFieldNumber = 3;
    private int atkNumber_;
    /// <summary>
    /// 攻击部队英雄数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AtkNumber {
      get { return atkNumber_; }
      set {
        atkNumber_ = value;
      }
    }

    /// <summary>Field number for the "atk_hp" field.</summary>
    public const int AtkHpFieldNumber = 4;
    private int atkHp_;
    /// <summary>
    /// 攻击部队单人血量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AtkHp {
      get { return atkHp_; }
      set {
        atkHp_ = value;
      }
    }

    /// <summary>Field number for the "durable" field.</summary>
    public const int DurableFieldNumber = 5;
    private int durable_;
    /// <summary>
    /// 土地当前耐久
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Durable {
      get { return durable_; }
      set {
        durable_ = value;
      }
    }

    /// <summary>Field number for the "max_durable" field.</summary>
    public const int MaxDurableFieldNumber = 6;
    private int maxDurable_;
    /// <summary>
    /// 土地初始耐久
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxDurable {
      get { return maxDurable_; }
      set {
        maxDurable_ = value;
      }
    }

    /// <summary>Field number for the "is_end" field.</summary>
    public const int IsEndFieldNumber = 7;
    private bool isEnd_;
    /// <summary>
    /// 是否为最后一块土地
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEnd {
      get { return isEnd_; }
      set {
        isEnd_ = value;
      }
    }

    /// <summary>Field number for the "is_fortress" field.</summary>
    public const int IsFortressFieldNumber = 8;
    private bool isFortress_;
    /// <summary>
    /// 是否为要塞
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFortress {
      get { return isFortress_; }
      set {
        isFortress_ = value;
      }
    }

    /// <summary>Field number for the "def_troops" field.</summary>
    public const int DefTroopsFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_defTroops_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> defTroops_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 土地自带守军
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DefTroops {
      get { return defTroops_; }
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Cspb.Item> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(82, global::Cspb.Item.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Item> awards_ = new pbc::RepeatedField<global::Cspb.Item>();
    /// <summary>
    /// 土地奖励    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Item> Awards {
      get { return awards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrillTile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrillTile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pos != other.Pos) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtkCost, other.AtkCost)) return false;
      if (AtkNumber != other.AtkNumber) return false;
      if (AtkHp != other.AtkHp) return false;
      if (Durable != other.Durable) return false;
      if (MaxDurable != other.MaxDurable) return false;
      if (IsEnd != other.IsEnd) return false;
      if (IsFortress != other.IsFortress) return false;
      if(!defTroops_.Equals(other.defTroops_)) return false;
      if(!awards_.Equals(other.awards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (AtkCost != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtkCost);
      if (AtkNumber != 0) hash ^= AtkNumber.GetHashCode();
      if (AtkHp != 0) hash ^= AtkHp.GetHashCode();
      if (Durable != 0) hash ^= Durable.GetHashCode();
      if (MaxDurable != 0) hash ^= MaxDurable.GetHashCode();
      if (IsEnd != false) hash ^= IsEnd.GetHashCode();
      if (IsFortress != false) hash ^= IsFortress.GetHashCode();
      hash ^= defTroops_.GetHashCode();
      hash ^= awards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pos);
      }
      if (AtkCost != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(AtkCost);
      }
      if (AtkNumber != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AtkNumber);
      }
      if (AtkHp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AtkHp);
      }
      if (Durable != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Durable);
      }
      if (MaxDurable != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxDurable);
      }
      if (IsEnd != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsEnd);
      }
      if (IsFortress != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsFortress);
      }
      defTroops_.WriteTo(output, _repeated_defTroops_codec);
      awards_.WriteTo(output, _repeated_awards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (AtkCost != 0F) {
        size += 1 + 4;
      }
      if (AtkNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AtkNumber);
      }
      if (AtkHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AtkHp);
      }
      if (Durable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Durable);
      }
      if (MaxDurable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxDurable);
      }
      if (IsEnd != false) {
        size += 1 + 1;
      }
      if (IsFortress != false) {
        size += 1 + 1;
      }
      size += defTroops_.CalculateSize(_repeated_defTroops_codec);
      size += awards_.CalculateSize(_repeated_awards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrillTile other) {
      if (other == null) {
        return;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.AtkCost != 0F) {
        AtkCost = other.AtkCost;
      }
      if (other.AtkNumber != 0) {
        AtkNumber = other.AtkNumber;
      }
      if (other.AtkHp != 0) {
        AtkHp = other.AtkHp;
      }
      if (other.Durable != 0) {
        Durable = other.Durable;
      }
      if (other.MaxDurable != 0) {
        MaxDurable = other.MaxDurable;
      }
      if (other.IsEnd != false) {
        IsEnd = other.IsEnd;
      }
      if (other.IsFortress != false) {
        IsFortress = other.IsFortress;
      }
      defTroops_.Add(other.defTroops_);
      awards_.Add(other.awards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pos = input.ReadInt32();
            break;
          }
          case 21: {
            AtkCost = input.ReadFloat();
            break;
          }
          case 24: {
            AtkNumber = input.ReadInt32();
            break;
          }
          case 32: {
            AtkHp = input.ReadInt32();
            break;
          }
          case 40: {
            Durable = input.ReadInt32();
            break;
          }
          case 48: {
            MaxDurable = input.ReadInt32();
            break;
          }
          case 56: {
            IsEnd = input.ReadBool();
            break;
          }
          case 64: {
            IsFortress = input.ReadBool();
            break;
          }
          case 74:
          case 72: {
            defTroops_.AddEntriesFrom(input, _repeated_defTroops_codec);
            break;
          }
          case 82: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 通关记录
  /// </summary>
  public sealed partial class DrillPassCount : pb::IMessage<DrillPassCount> {
    private static readonly pb::MessageParser<DrillPassCount> _parser = new pb::MessageParser<DrillPassCount>(() => new DrillPassCount());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrillPassCount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[115]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrillPassCount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrillPassCount(DrillPassCount other) : this() {
      drillId_ = other.drillId_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrillPassCount Clone() {
      return new DrillPassCount(this);
    }

    /// <summary>Field number for the "drill_id" field.</summary>
    public const int DrillIdFieldNumber = 1;
    private int drillId_;
    /// <summary>
    /// 关卡ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DrillId {
      get { return drillId_; }
      set {
        drillId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    /// 通关次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrillPassCount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrillPassCount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DrillId != other.DrillId) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DrillId != 0) hash ^= DrillId.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DrillId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DrillId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DrillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrillId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrillPassCount other) {
      if (other == null) {
        return;
      }
      if (other.DrillId != 0) {
        DrillId = other.DrillId;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DrillId = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DrillBReportNtf : pb::IMessage<DrillBReportNtf> {
    private static readonly pb::MessageParser<DrillBReportNtf> _parser = new pb::MessageParser<DrillBReportNtf>(() => new DrillBReportNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrillBReportNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[116]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrillBReportNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrillBReportNtf(DrillBReportNtf other) : this() {
      reportId_ = other.reportId_;
      pos_ = other.pos_;
      isAttacker_ = other.isAttacker_;
      result_ = other.result_;
      Attacker = other.attacker_ != null ? other.Attacker.Clone() : null;
      Defender = other.defender_ != null ? other.Defender.Clone() : null;
      time_ = other.time_;
      battleId_ = other.battleId_;
      isOccupy_ = other.isOccupy_;
      detailReportId_ = other.detailReportId_;
      dstType_ = other.dstType_;
      expGet_ = other.expGet_;
      awards_ = other.awards_.Clone();
      supply_ = other.supply_.Clone();
      subDurable_ = other.subDurable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrillBReportNtf Clone() {
      return new DrillBReportNtf(this);
    }

    /// <summary>Field number for the "report_id" field.</summary>
    public const int ReportIdFieldNumber = 1;
    private long reportId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReportId {
      get { return reportId_; }
      set {
        reportId_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private int pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "is_attacker" field.</summary>
    public const int IsAttackerFieldNumber = 3;
    private bool isAttacker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAttacker {
      get { return isAttacker_; }
      set {
        isAttacker_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 4;
    private global::Cspb.BATTLE_RESULT result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.BATTLE_RESULT Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "attacker" field.</summary>
    public const int AttackerFieldNumber = 5;
    private global::Cspb.BRTroopBrief attacker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.BRTroopBrief Attacker {
      get { return attacker_; }
      set {
        attacker_ = value;
      }
    }

    /// <summary>Field number for the "defender" field.</summary>
    public const int DefenderFieldNumber = 6;
    private global::Cspb.BRTroopBrief defender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.BRTroopBrief Defender {
      get { return defender_; }
      set {
        defender_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 7;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 8;
    private long battleId_;
    /// <summary>
    /// 战斗编号，用于客户端合并连续战斗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "is_occupy" field.</summary>
    public const int IsOccupyFieldNumber = 9;
    private bool isOccupy_;
    /// <summary>
    /// atk是否占领土地
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOccupy {
      get { return isOccupy_; }
      set {
        isOccupy_ = value;
      }
    }

    /// <summary>Field number for the "detail_report_id" field.</summary>
    public const int DetailReportIdFieldNumber = 10;
    private long detailReportId_;
    /// <summary>
    /// 回放战报ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DetailReportId {
      get { return detailReportId_; }
      set {
        detailReportId_ = value;
      }
    }

    /// <summary>Field number for the "dst_type" field.</summary>
    public const int DstTypeFieldNumber = 11;
    private global::Cspb.ENTITY_TYPE dstType_ = 0;
    /// <summary>
    /// 用于显示简要的目的地属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ENTITY_TYPE DstType {
      get { return dstType_; }
      set {
        dstType_ = value;
      }
    }

    /// <summary>Field number for the "exp_get" field.</summary>
    public const int ExpGetFieldNumber = 12;
    private int expGet_;
    /// <summary>
    /// 单个英雄获得的经验值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpGet {
      get { return expGet_; }
      set {
        expGet_ = value;
      }
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Cspb.Item> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(106, global::Cspb.Item.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Item> awards_ = new pbc::RepeatedField<global::Cspb.Item>();
    /// <summary>
    /// 获得的奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Item> Awards {
      get { return awards_; }
    }

    /// <summary>Field number for the "supply" field.</summary>
    public const int SupplyFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Cspb.Item> _repeated_supply_codec
        = pb::FieldCodec.ForMessage(114, global::Cspb.Item.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Item> supply_ = new pbc::RepeatedField<global::Cspb.Item>();
    /// <summary>
    /// 获得的奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Item> Supply {
      get { return supply_; }
    }

    /// <summary>Field number for the "sub_durable" field.</summary>
    public const int SubDurableFieldNumber = 15;
    private int subDurable_;
    /// <summary>
    /// 拆除的耐久度   
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubDurable {
      get { return subDurable_; }
      set {
        subDurable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrillBReportNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrillBReportNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReportId != other.ReportId) return false;
      if (Pos != other.Pos) return false;
      if (IsAttacker != other.IsAttacker) return false;
      if (Result != other.Result) return false;
      if (!object.Equals(Attacker, other.Attacker)) return false;
      if (!object.Equals(Defender, other.Defender)) return false;
      if (Time != other.Time) return false;
      if (BattleId != other.BattleId) return false;
      if (IsOccupy != other.IsOccupy) return false;
      if (DetailReportId != other.DetailReportId) return false;
      if (DstType != other.DstType) return false;
      if (ExpGet != other.ExpGet) return false;
      if(!awards_.Equals(other.awards_)) return false;
      if(!supply_.Equals(other.supply_)) return false;
      if (SubDurable != other.SubDurable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReportId != 0L) hash ^= ReportId.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (IsAttacker != false) hash ^= IsAttacker.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (attacker_ != null) hash ^= Attacker.GetHashCode();
      if (defender_ != null) hash ^= Defender.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (BattleId != 0L) hash ^= BattleId.GetHashCode();
      if (IsOccupy != false) hash ^= IsOccupy.GetHashCode();
      if (DetailReportId != 0L) hash ^= DetailReportId.GetHashCode();
      if (DstType != 0) hash ^= DstType.GetHashCode();
      if (ExpGet != 0) hash ^= ExpGet.GetHashCode();
      hash ^= awards_.GetHashCode();
      hash ^= supply_.GetHashCode();
      if (SubDurable != 0) hash ^= SubDurable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReportId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ReportId);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pos);
      }
      if (IsAttacker != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsAttacker);
      }
      if (Result != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Result);
      }
      if (attacker_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Attacker);
      }
      if (defender_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Defender);
      }
      if (Time != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Time);
      }
      if (BattleId != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(BattleId);
      }
      if (IsOccupy != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsOccupy);
      }
      if (DetailReportId != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(DetailReportId);
      }
      if (DstType != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) DstType);
      }
      if (ExpGet != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ExpGet);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
      supply_.WriteTo(output, _repeated_supply_codec);
      if (SubDurable != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(SubDurable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReportId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReportId);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (IsAttacker != false) {
        size += 1 + 1;
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (attacker_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attacker);
      }
      if (defender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Defender);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (BattleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BattleId);
      }
      if (IsOccupy != false) {
        size += 1 + 1;
      }
      if (DetailReportId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DetailReportId);
      }
      if (DstType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DstType);
      }
      if (ExpGet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpGet);
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      size += supply_.CalculateSize(_repeated_supply_codec);
      if (SubDurable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubDurable);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrillBReportNtf other) {
      if (other == null) {
        return;
      }
      if (other.ReportId != 0L) {
        ReportId = other.ReportId;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.IsAttacker != false) {
        IsAttacker = other.IsAttacker;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.attacker_ != null) {
        if (attacker_ == null) {
          attacker_ = new global::Cspb.BRTroopBrief();
        }
        Attacker.MergeFrom(other.Attacker);
      }
      if (other.defender_ != null) {
        if (defender_ == null) {
          defender_ = new global::Cspb.BRTroopBrief();
        }
        Defender.MergeFrom(other.Defender);
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.BattleId != 0L) {
        BattleId = other.BattleId;
      }
      if (other.IsOccupy != false) {
        IsOccupy = other.IsOccupy;
      }
      if (other.DetailReportId != 0L) {
        DetailReportId = other.DetailReportId;
      }
      if (other.DstType != 0) {
        DstType = other.DstType;
      }
      if (other.ExpGet != 0) {
        ExpGet = other.ExpGet;
      }
      awards_.Add(other.awards_);
      supply_.Add(other.supply_);
      if (other.SubDurable != 0) {
        SubDurable = other.SubDurable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReportId = input.ReadInt64();
            break;
          }
          case 16: {
            Pos = input.ReadInt32();
            break;
          }
          case 24: {
            IsAttacker = input.ReadBool();
            break;
          }
          case 32: {
            result_ = (global::Cspb.BATTLE_RESULT) input.ReadEnum();
            break;
          }
          case 42: {
            if (attacker_ == null) {
              attacker_ = new global::Cspb.BRTroopBrief();
            }
            input.ReadMessage(attacker_);
            break;
          }
          case 50: {
            if (defender_ == null) {
              defender_ = new global::Cspb.BRTroopBrief();
            }
            input.ReadMessage(defender_);
            break;
          }
          case 56: {
            Time = input.ReadInt64();
            break;
          }
          case 64: {
            BattleId = input.ReadInt64();
            break;
          }
          case 72: {
            IsOccupy = input.ReadBool();
            break;
          }
          case 80: {
            DetailReportId = input.ReadInt64();
            break;
          }
          case 88: {
            dstType_ = (global::Cspb.ENTITY_TYPE) input.ReadEnum();
            break;
          }
          case 96: {
            ExpGet = input.ReadInt32();
            break;
          }
          case 106: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
          case 114: {
            supply_.AddEntriesFrom(input, _repeated_supply_codec);
            break;
          }
          case 120: {
            SubDurable = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AffairNtf : pb::IMessage<AffairNtf> {
    private static readonly pb::MessageParser<AffairNtf> _parser = new pb::MessageParser<AffairNtf>(() => new AffairNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AffairNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[117]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AffairNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AffairNtf(AffairNtf other) : this() {
      moveCityAt_ = other.moveCityAt_;
      Invincible = other.invincible_ != null ? other.Invincible.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AffairNtf Clone() {
      return new AffairNtf(this);
    }

    /// <summary>Field number for the "move_city_at" field.</summary>
    public const int MoveCityAtFieldNumber = 1;
    private long moveCityAt_;
    /// <summary>
    /// 迁城时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MoveCityAt {
      get { return moveCityAt_; }
      set {
        moveCityAt_ = value;
      }
    }

    /// <summary>Field number for the "invincible" field.</summary>
    public const int InvincibleFieldNumber = 2;
    private global::Cspb.InvincibleInfo invincible_;
    /// <summary>
    /// 坚守信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.InvincibleInfo Invincible {
      get { return invincible_; }
      set {
        invincible_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AffairNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AffairNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MoveCityAt != other.MoveCityAt) return false;
      if (!object.Equals(Invincible, other.Invincible)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MoveCityAt != 0L) hash ^= MoveCityAt.GetHashCode();
      if (invincible_ != null) hash ^= Invincible.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MoveCityAt != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MoveCityAt);
      }
      if (invincible_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Invincible);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MoveCityAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MoveCityAt);
      }
      if (invincible_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Invincible);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AffairNtf other) {
      if (other == null) {
        return;
      }
      if (other.MoveCityAt != 0L) {
        MoveCityAt = other.MoveCityAt;
      }
      if (other.invincible_ != null) {
        if (invincible_ == null) {
          invincible_ = new global::Cspb.InvincibleInfo();
        }
        Invincible.MergeFrom(other.Invincible);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MoveCityAt = input.ReadInt64();
            break;
          }
          case 18: {
            if (invincible_ == null) {
              invincible_ = new global::Cspb.InvincibleInfo();
            }
            input.ReadMessage(invincible_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 坚守信息
  /// </summary>
  public sealed partial class InvincibleInfo : pb::IMessage<InvincibleInfo> {
    private static readonly pb::MessageParser<InvincibleInfo> _parser = new pb::MessageParser<InvincibleInfo>(() => new InvincibleInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InvincibleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[118]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvincibleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvincibleInfo(InvincibleInfo other) : this() {
      state_ = other.state_;
      endAt_ = other.endAt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvincibleInfo Clone() {
      return new InvincibleInfo(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private int state_;
    /// <summary>
    /// 坚守状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "end_at" field.</summary>
    public const int EndAtFieldNumber = 2;
    private long endAt_;
    /// <summary>
    /// 坚守状态完成时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndAt {
      get { return endAt_; }
      set {
        endAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InvincibleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InvincibleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (EndAt != other.EndAt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      if (EndAt != 0L) hash ^= EndAt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(State);
      }
      if (EndAt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(EndAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (EndAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndAt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InvincibleInfo other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.EndAt != 0L) {
        EndAt = other.EndAt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = input.ReadInt32();
            break;
          }
          case 16: {
            EndAt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 贼兵信息
  /// </summary>
  public sealed partial class RobberNtf : pb::IMessage<RobberNtf> {
    private static readonly pb::MessageParser<RobberNtf> _parser = new pb::MessageParser<RobberNtf>(() => new RobberNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobberNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[119]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobberNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobberNtf(RobberNtf other) : this() {
      pos_ = other.pos_;
      refreshTime_ = other.refreshTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobberNtf Clone() {
      return new RobberNtf(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private int pos_;
    /// <summary>
    /// 贼兵位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "refresh_time" field.</summary>
    public const int RefreshTimeFieldNumber = 2;
    private long refreshTime_;
    /// <summary>
    /// 贼兵刷新时间 ms
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RefreshTime {
      get { return refreshTime_; }
      set {
        refreshTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobberNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobberNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pos != other.Pos) return false;
      if (RefreshTime != other.RefreshTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (RefreshTime != 0L) hash ^= RefreshTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pos);
      }
      if (RefreshTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RefreshTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (RefreshTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RefreshTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobberNtf other) {
      if (other == null) {
        return;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.RefreshTime != 0L) {
        RefreshTime = other.RefreshTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pos = input.ReadInt32();
            break;
          }
          case 16: {
            RefreshTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 删除贼兵
  /// </summary>
  public sealed partial class RemoveRobberNtf : pb::IMessage<RemoveRobberNtf> {
    private static readonly pb::MessageParser<RemoveRobberNtf> _parser = new pb::MessageParser<RemoveRobberNtf>(() => new RemoveRobberNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveRobberNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[120]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveRobberNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveRobberNtf(RemoveRobberNtf other) : this() {
      pos_ = other.pos_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveRobberNtf Clone() {
      return new RemoveRobberNtf(this);
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 1;
    private int pos_;
    /// <summary>
    /// 贼兵位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveRobberNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveRobberNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pos != other.Pos) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveRobberNtf other) {
      if (other == null) {
        return;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pos = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 新手引导
  /// </summary>
  public sealed partial class Tutorial : pb::IMessage<Tutorial> {
    private static readonly pb::MessageParser<Tutorial> _parser = new pb::MessageParser<Tutorial>(() => new Tutorial());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tutorial> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[121]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tutorial() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tutorial(Tutorial other) : this() {
      finshed_ = other.finshed_;
      log_ = other.log_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tutorial Clone() {
      return new Tutorial(this);
    }

    /// <summary>Field number for the "finshed" field.</summary>
    public const int FinshedFieldNumber = 1;
    private bool finshed_;
    /// <summary>
    /// 是否完成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Finshed {
      get { return finshed_; }
      set {
        finshed_ = value;
      }
    }

    /// <summary>Field number for the "log" field.</summary>
    public const int LogFieldNumber = 2;
    private string log_ = "";
    /// <summary>
    /// 新手引导日志日志
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Log {
      get { return log_; }
      set {
        log_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tutorial);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tutorial other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Finshed != other.Finshed) return false;
      if (Log != other.Log) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Finshed != false) hash ^= Finshed.GetHashCode();
      if (Log.Length != 0) hash ^= Log.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Finshed != false) {
        output.WriteRawTag(8);
        output.WriteBool(Finshed);
      }
      if (Log.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Log);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Finshed != false) {
        size += 1 + 1;
      }
      if (Log.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Log);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tutorial other) {
      if (other == null) {
        return;
      }
      if (other.Finshed != false) {
        Finshed = other.Finshed;
      }
      if (other.Log.Length != 0) {
        Log = other.Log;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Finshed = input.ReadBool();
            break;
          }
          case 18: {
            Log = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 天下大势
  /// </summary>
  public sealed partial class EpicInfo : pb::IMessage<EpicInfo> {
    private static readonly pb::MessageParser<EpicInfo> _parser = new pb::MessageParser<EpicInfo>(() => new EpicInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EpicInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[122]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EpicInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EpicInfo(EpicInfo other) : this() {
      id_ = other.id_;
      state_ = other.state_;
      cur_ = other.cur_;
      curArry_ = other.curArry_.Clone();
      endAt_ = other.endAt_;
      playerState_ = other.playerState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EpicInfo Clone() {
      return new EpicInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "cur" field.</summary>
    public const int CurFieldNumber = 3;
    private int cur_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cur {
      get { return cur_; }
      set {
        cur_ = value;
      }
    }

    /// <summary>Field number for the "cur_arry" field.</summary>
    public const int CurArryFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Cspb.EpicUnionInfo> _repeated_curArry_codec
        = pb::FieldCodec.ForMessage(34, global::Cspb.EpicUnionInfo.Parser);
    private readonly pbc::RepeatedField<global::Cspb.EpicUnionInfo> curArry_ = new pbc::RepeatedField<global::Cspb.EpicUnionInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.EpicUnionInfo> CurArry {
      get { return curArry_; }
    }

    /// <summary>Field number for the "end_at" field.</summary>
    public const int EndAtFieldNumber = 5;
    private long endAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndAt {
      get { return endAt_; }
      set {
        endAt_ = value;
      }
    }

    /// <summary>Field number for the "player_state" field.</summary>
    public const int PlayerStateFieldNumber = 6;
    private int playerState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerState {
      get { return playerState_; }
      set {
        playerState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EpicInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EpicInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (State != other.State) return false;
      if (Cur != other.Cur) return false;
      if(!curArry_.Equals(other.curArry_)) return false;
      if (EndAt != other.EndAt) return false;
      if (PlayerState != other.PlayerState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (Cur != 0) hash ^= Cur.GetHashCode();
      hash ^= curArry_.GetHashCode();
      if (EndAt != 0L) hash ^= EndAt.GetHashCode();
      if (PlayerState != 0) hash ^= PlayerState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(State);
      }
      if (Cur != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cur);
      }
      curArry_.WriteTo(output, _repeated_curArry_codec);
      if (EndAt != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(EndAt);
      }
      if (PlayerState != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PlayerState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (Cur != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cur);
      }
      size += curArry_.CalculateSize(_repeated_curArry_codec);
      if (EndAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndAt);
      }
      if (PlayerState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EpicInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.Cur != 0) {
        Cur = other.Cur;
      }
      curArry_.Add(other.curArry_);
      if (other.EndAt != 0L) {
        EndAt = other.EndAt;
      }
      if (other.PlayerState != 0) {
        PlayerState = other.PlayerState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            State = input.ReadInt32();
            break;
          }
          case 24: {
            Cur = input.ReadInt32();
            break;
          }
          case 34: {
            curArry_.AddEntriesFrom(input, _repeated_curArry_codec);
            break;
          }
          case 40: {
            EndAt = input.ReadInt64();
            break;
          }
          case 48: {
            PlayerState = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EpicNtf : pb::IMessage<EpicNtf> {
    private static readonly pb::MessageParser<EpicNtf> _parser = new pb::MessageParser<EpicNtf>(() => new EpicNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EpicNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[123]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EpicNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EpicNtf(EpicNtf other) : this() {
      epic_ = other.epic_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EpicNtf Clone() {
      return new EpicNtf(this);
    }

    /// <summary>Field number for the "epic" field.</summary>
    public const int EpicFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.EpicInfo> _repeated_epic_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.EpicInfo.Parser);
    private readonly pbc::RepeatedField<global::Cspb.EpicInfo> epic_ = new pbc::RepeatedField<global::Cspb.EpicInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.EpicInfo> Epic {
      get { return epic_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EpicNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EpicNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!epic_.Equals(other.epic_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= epic_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      epic_.WriteTo(output, _repeated_epic_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += epic_.CalculateSize(_repeated_epic_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EpicNtf other) {
      if (other == null) {
        return;
      }
      epic_.Add(other.epic_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            epic_.AddEntriesFrom(input, _repeated_epic_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EpicUnionInfo : pb::IMessage<EpicUnionInfo> {
    private static readonly pb::MessageParser<EpicUnionInfo> _parser = new pb::MessageParser<EpicUnionInfo>(() => new EpicUnionInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EpicUnionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[124]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EpicUnionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EpicUnionInfo(EpicUnionInfo other) : this() {
      unionId_ = other.unionId_;
      unionName_ = other.unionName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EpicUnionInfo Clone() {
      return new EpicUnionInfo(this);
    }

    /// <summary>Field number for the "unionId" field.</summary>
    public const int UnionIdFieldNumber = 1;
    private long unionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    /// <summary>Field number for the "unionName" field.</summary>
    public const int UnionNameFieldNumber = 2;
    private string unionName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnionName {
      get { return unionName_; }
      set {
        unionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EpicUnionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EpicUnionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnionId != other.UnionId) return false;
      if (UnionName != other.UnionName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnionId != 0L) hash ^= UnionId.GetHashCode();
      if (UnionName.Length != 0) hash ^= UnionName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnionId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnionId);
      }
      if (UnionName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UnionName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnionId);
      }
      if (UnionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnionName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EpicUnionInfo other) {
      if (other == null) {
        return;
      }
      if (other.UnionId != 0L) {
        UnionId = other.UnionId;
      }
      if (other.UnionName.Length != 0) {
        UnionName = other.UnionName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnionId = input.ReadInt64();
            break;
          }
          case 18: {
            UnionName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 个人排行榜结构定义
  /// </summary>
  public sealed partial class PersonBoard : pb::IMessage<PersonBoard> {
    private static readonly pb::MessageParser<PersonBoard> _parser = new pb::MessageParser<PersonBoard>(() => new PersonBoard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PersonBoard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[125]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonBoard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonBoard(PersonBoard other) : this() {
      name_ = other.name_;
      playerId_ = other.playerId_;
      stateId_ = other.stateId_;
      subCityCount_ = other.subCityCount_;
      landCount_ = other.landCount_;
      powerValue_ = other.powerValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersonBoard Clone() {
      return new PersonBoard(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 势力名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private long playerId_;
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "state_id" field.</summary>
    public const int StateIdFieldNumber = 3;
    private int stateId_;
    /// <summary>
    /// 所属州ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StateId {
      get { return stateId_; }
      set {
        stateId_ = value;
      }
    }

    /// <summary>Field number for the "sub_city_count" field.</summary>
    public const int SubCityCountFieldNumber = 4;
    private int subCityCount_;
    /// <summary>
    /// 分城数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubCityCount {
      get { return subCityCount_; }
      set {
        subCityCount_ = value;
      }
    }

    /// <summary>Field number for the "land_count" field.</summary>
    public const int LandCountFieldNumber = 5;
    private int landCount_;
    /// <summary>
    /// 总领地数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LandCount {
      get { return landCount_; }
      set {
        landCount_ = value;
      }
    }

    /// <summary>Field number for the "power_value" field.</summary>
    public const int PowerValueFieldNumber = 6;
    private int powerValue_;
    /// <summary>
    /// 个人势力值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PowerValue {
      get { return powerValue_; }
      set {
        powerValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PersonBoard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PersonBoard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (PlayerId != other.PlayerId) return false;
      if (StateId != other.StateId) return false;
      if (SubCityCount != other.SubCityCount) return false;
      if (LandCount != other.LandCount) return false;
      if (PowerValue != other.PowerValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (StateId != 0) hash ^= StateId.GetHashCode();
      if (SubCityCount != 0) hash ^= SubCityCount.GetHashCode();
      if (LandCount != 0) hash ^= LandCount.GetHashCode();
      if (PowerValue != 0) hash ^= PowerValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (PlayerId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PlayerId);
      }
      if (StateId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StateId);
      }
      if (SubCityCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SubCityCount);
      }
      if (LandCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LandCount);
      }
      if (PowerValue != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PowerValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (StateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StateId);
      }
      if (SubCityCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubCityCount);
      }
      if (LandCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LandCount);
      }
      if (PowerValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PowerValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PersonBoard other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.StateId != 0) {
        StateId = other.StateId;
      }
      if (other.SubCityCount != 0) {
        SubCityCount = other.SubCityCount;
      }
      if (other.LandCount != 0) {
        LandCount = other.LandCount;
      }
      if (other.PowerValue != 0) {
        PowerValue = other.PowerValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 24: {
            StateId = input.ReadInt32();
            break;
          }
          case 32: {
            SubCityCount = input.ReadInt32();
            break;
          }
          case 40: {
            LandCount = input.ReadInt32();
            break;
          }
          case 48: {
            PowerValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 同盟排行榜结构定义
  /// </summary>
  public sealed partial class UnionBoard : pb::IMessage<UnionBoard> {
    private static readonly pb::MessageParser<UnionBoard> _parser = new pb::MessageParser<UnionBoard>(() => new UnionBoard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnionBoard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[126]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionBoard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionBoard(UnionBoard other) : this() {
      name_ = other.name_;
      unionId_ = other.unionId_;
      level_ = other.level_;
      stateId_ = other.stateId_;
      memberCount_ = other.memberCount_;
      cityCount_ = other.cityCount_;
      powerValue_ = other.powerValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionBoard Clone() {
      return new UnionBoard(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 同盟名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "union_id" field.</summary>
    public const int UnionIdFieldNumber = 2;
    private long unionId_;
    /// <summary>
    /// 同盟ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    /// 同盟等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "state_id" field.</summary>
    public const int StateIdFieldNumber = 4;
    private int stateId_;
    /// <summary>
    /// 所属州ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StateId {
      get { return stateId_; }
      set {
        stateId_ = value;
      }
    }

    /// <summary>Field number for the "member_count" field.</summary>
    public const int MemberCountFieldNumber = 5;
    private int memberCount_;
    /// <summary>
    /// 成员数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MemberCount {
      get { return memberCount_; }
      set {
        memberCount_ = value;
      }
    }

    /// <summary>Field number for the "city_count" field.</summary>
    public const int CityCountFieldNumber = 6;
    private int cityCount_;
    /// <summary>
    /// 城池数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CityCount {
      get { return cityCount_; }
      set {
        cityCount_ = value;
      }
    }

    /// <summary>Field number for the "power_value" field.</summary>
    public const int PowerValueFieldNumber = 7;
    private int powerValue_;
    /// <summary>
    /// 势力值   
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PowerValue {
      get { return powerValue_; }
      set {
        powerValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnionBoard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnionBoard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (UnionId != other.UnionId) return false;
      if (Level != other.Level) return false;
      if (StateId != other.StateId) return false;
      if (MemberCount != other.MemberCount) return false;
      if (CityCount != other.CityCount) return false;
      if (PowerValue != other.PowerValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (UnionId != 0L) hash ^= UnionId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (StateId != 0) hash ^= StateId.GetHashCode();
      if (MemberCount != 0) hash ^= MemberCount.GetHashCode();
      if (CityCount != 0) hash ^= CityCount.GetHashCode();
      if (PowerValue != 0) hash ^= PowerValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (UnionId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UnionId);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (StateId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(StateId);
      }
      if (MemberCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MemberCount);
      }
      if (CityCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CityCount);
      }
      if (PowerValue != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PowerValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (UnionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnionId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (StateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StateId);
      }
      if (MemberCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberCount);
      }
      if (CityCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CityCount);
      }
      if (PowerValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PowerValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnionBoard other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.UnionId != 0L) {
        UnionId = other.UnionId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.StateId != 0) {
        StateId = other.StateId;
      }
      if (other.MemberCount != 0) {
        MemberCount = other.MemberCount;
      }
      if (other.CityCount != 0) {
        CityCount = other.CityCount;
      }
      if (other.PowerValue != 0) {
        PowerValue = other.PowerValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            UnionId = input.ReadInt64();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            StateId = input.ReadInt32();
            break;
          }
          case 40: {
            MemberCount = input.ReadInt32();
            break;
          }
          case 48: {
            CityCount = input.ReadInt32();
            break;
          }
          case 56: {
            PowerValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 城池占领信息
  /// </summary>
  public sealed partial class NpcCityInfoNtf : pb::IMessage<NpcCityInfoNtf> {
    private static readonly pb::MessageParser<NpcCityInfoNtf> _parser = new pb::MessageParser<NpcCityInfoNtf>(() => new NpcCityInfoNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NpcCityInfoNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[127]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcCityInfoNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcCityInfoNtf(NpcCityInfoNtf other) : this() {
      cityOccupy_ = other.cityOccupy_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcCityInfoNtf Clone() {
      return new NpcCityInfoNtf(this);
    }

    /// <summary>Field number for the "city_occupy" field.</summary>
    public const int CityOccupyFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.NpcCityOccupy> _repeated_cityOccupy_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.NpcCityOccupy.Parser);
    private readonly pbc::RepeatedField<global::Cspb.NpcCityOccupy> cityOccupy_ = new pbc::RepeatedField<global::Cspb.NpcCityOccupy>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.NpcCityOccupy> CityOccupy {
      get { return cityOccupy_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NpcCityInfoNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NpcCityInfoNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cityOccupy_.Equals(other.cityOccupy_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cityOccupy_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cityOccupy_.WriteTo(output, _repeated_cityOccupy_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cityOccupy_.CalculateSize(_repeated_cityOccupy_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NpcCityInfoNtf other) {
      if (other == null) {
        return;
      }
      cityOccupy_.Add(other.cityOccupy_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cityOccupy_.AddEntriesFrom(input, _repeated_cityOccupy_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NpcCityOccupy : pb::IMessage<NpcCityOccupy> {
    private static readonly pb::MessageParser<NpcCityOccupy> _parser = new pb::MessageParser<NpcCityOccupy>(() => new NpcCityOccupy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NpcCityOccupy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.StructReflection.Descriptor.MessageTypes[128]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcCityOccupy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcCityOccupy(NpcCityOccupy other) : this() {
      cityId_ = other.cityId_;
      unionId_ = other.unionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcCityOccupy Clone() {
      return new NpcCityOccupy(this);
    }

    /// <summary>Field number for the "city_id" field.</summary>
    public const int CityIdFieldNumber = 1;
    private int cityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CityId {
      get { return cityId_; }
      set {
        cityId_ = value;
      }
    }

    /// <summary>Field number for the "union_id" field.</summary>
    public const int UnionIdFieldNumber = 2;
    private long unionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NpcCityOccupy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NpcCityOccupy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CityId != other.CityId) return false;
      if (UnionId != other.UnionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CityId != 0) hash ^= CityId.GetHashCode();
      if (UnionId != 0L) hash ^= UnionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CityId);
      }
      if (UnionId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UnionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CityId);
      }
      if (UnionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NpcCityOccupy other) {
      if (other == null) {
        return;
      }
      if (other.CityId != 0) {
        CityId = other.CityId;
      }
      if (other.UnionId != 0L) {
        UnionId = other.UnionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CityId = input.ReadInt32();
            break;
          }
          case 16: {
            UnionId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
