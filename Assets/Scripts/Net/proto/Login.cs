// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: login.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Cspb {

  /// <summary>Holder for reflection information generated from login.proto</summary>
  public static partial class LoginReflection {

    #region Descriptor
    /// <summary>File descriptor for login.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LoginReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgtsb2dpbi5wcm90bxIEY3NwYhoJZGVmLnByb3RvGgxzdHJ1Y3QucHJvdG8i",
            "TAoJQ29tbW9uQWNrEg8KB2Vycl9yZXEYASABKA0SIAoIZXJyX2NvZGUYAiAB",
            "KA4yDi5jc3BiLkVSUl9DT0RFEgwKBG5hbWUYAyABKAkiOQoGU2VydmVyEhEK",
            "CXNlcnZlcl9pZBgBIAEoBRIMCgRuYW1lGAIgASgJEg4KBnN0YXR1cxgDIAEo",
            "BSJBCgdVZGlkQWNrEhEKCWxhc3RMb2dpbhgBIAEoAxIjCgpjaGFyYWN0ZXJz",
            "GAIgAygLMg8uY3NwYi5DaGFyYWN0ZXIicwoITG9naW5BY2sSEQoJcGxheWVy",
            "X2lkGAEgASgDEiQKCnBsYXllckluZm8YAiABKAsyEC5jc3BiLlBsYXllcklu",
            "Zm8SGwoDZXJyGAMgASgOMg4uY3NwYi5FUlJfQ09ERRIRCglTZXNzaW9uSUQY",
            "BCABKAMiqAEKCkdzTG9naW5BY2sSEQoJcGxheWVyX2lkGAEgASgDEhQKDGFj",
            "Y2Vzc190b2tlbhgCIAEoCRIMCgRuYW1lGAMgASgJEhIKCmFjY291bnRfaWQY",
            "BCABKAMSEQoJc2VydmVyX2lkGAUgASgFEgwKBHVkaWQYBiABKAkSCgoCaXAY",
            "ByABKAkSIgoGYWN0aW9uGAggASgOMhIuY3NwYi5MT0dJTl9BQ1RJT04iqAEK",
            "D0JpbmRQYXNzcG9ydEFjaxINCgVlcnJvchgBIAEoCRIUCgxhY2Nlc3NfdG9r",
            "ZW4YAiABKAkSIwoKY2hhcmFjdGVycxgDIAMoCzIPLmNzcGIuQ2hhcmFjdGVy",
            "EhIKCmFjY291bnRfaWQYBCABKAMSHQoHc2VydmVycxgFIAMoCzIMLmNzcGIu",
            "U2VydmVyEhgKEHJlY29tbWFuZF9zZXJ2ZXIYBiABKAUiVAoOVXBkYXRlVG9r",
            "ZW5SZXESDAoEdHlwZRgBIAEoCRIQCghwYXNzcG9ydBgCIAEoCRIQCghwYXNz",
            "d29yZBgDIAEoCRIQCghkZXZpY2VJRBgEIAEoCSJyCg5VcGRhdGVUb2tlbkFj",
            "axIfCgdlcnJDb2RlGAEgASgOMg4uY3NwYi5FUlJfQ09ERRITCgthY2Nlc3NU",
            "b2tlbhgCIAEoCRIRCglhY2NvdW50SUQYAyABKAMSFwoPdG9rZW5fZXhwbHJl",
            "X2F0GAQgASgDIp8BCgtQbGF0Zm9ybU50ZhIOCgZnYW1lSUQYASABKAkSEAoI",
            "Y2xpZW50SUQYAiABKAkSDwoHY2hhdFVSTBgDIAEoCRIOCgZwYXlVUkwYBCAB",
            "KAkSEAoIcGF5VG9rZW4YBSABKAkSEwoLY2hhdEFjY291bnQYBiABKAkSFAoM",
            "Y2hhdFBhc3N3b3JkGAcgASgJEhAKCHRyYW5zVVJMGAggASgJIhgKCENoYXJN",
            "ZXRhEgwKBG5hbWUYASABKAkidAoJQ2hhcmFjdGVyEhAKCHBhc3Nwb3J0GAEg",
            "ASgJEhEKCXNlcnZlcl9pZBgCIAEoBRIRCglwbGF5ZXJfaWQYAyABKAMSHAoE",
            "bWV0YRgEIAEoCzIOLmNzcGIuQ2hhck1ldGESEQoJTGFzdExvZ2luGAUgASgD",
            "IjoKB1VkaWRSZXESIAoGY19pbmZvGAEgASgLMhAuY3NwYi5DbGllbnRJbmZv",
            "Eg0KBXRva2VuGAIgASgJIhwKDUtleUV4Y2hhZ2VSZXESCwoDa2V5GAEgASgM",
            "IhwKDUtleUV4Y2hhZ2VBY2sSCwoDa2V5GAEgASgMIoUBCgdBdXRoUmVxEgwK",
            "BHR5cGUYASABKAkSEAoIcGFzc3BvcnQYAiABKAkSEAoIcGFzc3dvcmQYAyAB",
            "KAkSIAoGY19pbmZvGAQgASgLMhAuY3NwYi5DbGllbnRJbmZvEhEKCXNpZ25h",
            "dHVyZRgFIAEoCRITCgtjbGllbnRTdGF0ZRgGIAEoBSLcAQoHQXV0aEFjaxIN",
            "CgVlcnJvchgBIAEoCRIUCgxhY2Nlc3NfdG9rZW4YAiABKAkSIwoKY2hhcmFj",
            "dGVycxgDIAMoCzIPLmNzcGIuQ2hhcmFjdGVyEhIKCmFjY291bnRfaWQYBCAB",
            "KAMSHQoHc2VydmVycxgFIAMoCzIMLmNzcGIuU2VydmVyEhgKEHJlY29tbWFu",
            "ZF9zZXJ2ZXIYBiABKAUSDAoEdHlwZRgHIAEoCRITCgtjbGllbnRTdGF0ZRgI",
            "IAEoBRIXCg90b2tlbl9leHBscmVfYXQYCSABKAMiLQoIR2V0R3NSZXESEQoJ",
            "cmVnaW9uX2lkGAEgASgJEg4KBmxvY2FsZRgCIAEoCSIpCghHZXRHc0FjaxId",
            "CgdzZXJ2ZXJzGAEgAygLMgwuY3NwYi5TZXJ2ZXIiiAEKD0JpbmRQYXNzcG9y",
            "dFJlcRIMCgR0eXBlGAEgASgJEhAKCHBhc3Nwb3J0GAIgASgJEhAKCHBhc3N3",
            "b3JkGAMgASgJEiAKBmNfaW5mbxgEIAEoCzIQLmNzcGIuQ2xpZW50SW5mbxIO",
            "CgZpc19uZXcYBSABKAgSEQoJcGxheWVyX2lkGAYgASgDIpYECgpDbGllbnRJ",
            "bmZvEgwKBHVkaWQYASABKAkSEAoIbWFjX2FkZHIYAiABKAkSCgoCaXAYAyAB",
            "KAkSDgoGbG9jYWxlGAQgASgJEhEKCXB1c2hfdHlwZRgFIAEoCRISCgpwdXNo",
            "X3Rva2VuGAYgASgJEhAKCHBsYXRmb3JtGAcgASgJEhEKCWJ1bmRsZV9pZBgI",
            "IAEoCRITCgthcHBfdmVyc2lvbhgJIAEoCRISCgpvc192ZXJzaW9uGAogASgJ",
            "EhMKC2RldmljZV9uYW1lGAsgASgJEhkKEXB1Ymxpc2hlcl9jaGFubmVsGAwg",
            "ASgJEhcKD2xvY2FsZV9sYW5ndWFnZRgOIAEoCRIUCgxkZXZpY2Vfc3RhdGUY",
            "DyABKAkSFAoMaXNfc2ltdWxhdG9yGBAgASgFEgwKBGlkZmEYESABKAkSDAoE",
            "aWRmdhgSIAEoCRISCgpnb29nbGVfYWlkGBMgASgJEhIKCmFuZHJvaWRfaWQY",
            "FCABKAkSEQoJZGV2aWNlX2lkGBUgASgJEhAKCGxhdGl0dWRlGBYgASgCEhEK",
            "CWxvbmdpdHVkZRgXIAEoAhIQCghhbHRpdHVkZRgYIAEoAhIUCgxuZXR3b3Jr",
            "X3R5cGUYGSABKAkSHAoUdGhpcmRfcGFydF9kZXZpY2VfaWQYGiABKAkSDQoF",
            "YnVpbGQYGyABKAkSEQoJb3Blbl91ZGlkGBwgASgJIq8BCg1DaGFyQ3JlYXRl",
            "UmVxEhQKDGFjY2Vzc190b2tlbhgBIAEoCRIMCgRuYW1lGAIgASgJEhIKCmFj",
            "Y291bnRfaWQYAyABKAMSEQoJc2VydmVyX2lkGAQgASgFEiAKBmNfaW5mbxgF",
            "IAEoCzIQLmNzcGIuQ2xpZW50SW5mbxIRCglwbGF5ZXJfaWQYBiABKAMSDAoE",
            "dHlwZRgHIAEoCRIQCghwYXNzcG9ydBgIIAEoCSKuAQoMQ2hhckxvZ2luUmVx",
            "EhQKDGFjY2Vzc190b2tlbhgBIAEoCRIMCgRuYW1lGAIgASgJEhIKCmFjY291",
            "bnRfaWQYAyABKAMSEQoJc2VydmVyX2lkGAQgASgFEiAKBmNfaW5mbxgFIAEo",
            "CzIQLmNzcGIuQ2xpZW50SW5mbxIRCglwbGF5ZXJfaWQYBiABKAMSDAoEdHlw",
            "ZRgHIAEoCRIQCghwYXNzcG9ydBgIIAEoCSJSCgxGYXN0TG9naW5SZXESDgoG",
            "c2VjcmV0GAEgASgJEhEKCXNlcnZlcl9pZBgCIAEoBRIRCglwbGF5ZXJfaWQY",
            "AyABKAMSDAoEbmFtZRgEIAEoCSIeCglMb2dvdXRSZXESEQoJcGxheWVyX2lk",
            "GAEgASgDIkgKF0NoYXJhY3RlckNyZWF0ZUNoZWNrUmVxEiAKA3JlcRgBIAEo",
            "CzITLmNzcGIuQ2hhckNyZWF0ZVJlcRILCgNhaWQYAiABKAMiZQoXQ2hhcmFj",
            "dGVyQ3JlYXRlQ2hlY2tBY2sSGwoDZXJyGAEgASgOMg4uY3NwYi5FUlJfQ09E",
            "RRIgCgNyZXEYAiABKAsyEy5jc3BiLkNoYXJDcmVhdGVSZXESCwoDYWlkGAMg",
            "ASgDIoEBCg1QbGF5Q3JlYXRlQWNrEhsKA2VychgBIAEoDjIOLmNzcGIuRVJS",
            "X0NPREUSIAoDcmVxGAIgASgLMhMuY3NwYi5DaGFyQ3JlYXRlUmVxEiQKCnBs",
            "YXllckluZm8YAyABKAsyEC5jc3BiLlBsYXllckluZm8SCwoDQWlkGAQgASgD",
            "IlcKDkFjY291bnRMaW5rUmVxEhMKC2FjY2Vzc1Rva2VuGAEgASgJEgwKBHR5",
            "cGUYAiABKAkSEAoIcGFzc3BvcnQYAyABKAkSEAoIcGFzc3dvcmQYBCABKAki",
            "MQoOQWNjb3VudExpbmtBY2sSHwoHZXJyQ29kZRgBIAEoDjIOLmNzcGIuRVJS",
            "X0NPREViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Cspb.DefReflection.Descriptor, global::Cspb.StructReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.CommonAck), global::Cspb.CommonAck.Parser, new[]{ "ErrReq", "ErrCode", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.Server), global::Cspb.Server.Parser, new[]{ "ServerId", "Name", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.UdidAck), global::Cspb.UdidAck.Parser, new[]{ "LastLogin", "Characters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.LoginAck), global::Cspb.LoginAck.Parser, new[]{ "PlayerId", "PlayerInfo", "Err", "SessionID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.GsLoginAck), global::Cspb.GsLoginAck.Parser, new[]{ "PlayerId", "AccessToken", "Name", "AccountId", "ServerId", "Udid", "Ip", "Action" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.BindPassportAck), global::Cspb.BindPassportAck.Parser, new[]{ "Error", "AccessToken", "Characters", "AccountId", "Servers", "RecommandServer" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.UpdateTokenReq), global::Cspb.UpdateTokenReq.Parser, new[]{ "Type", "Passport", "Password", "DeviceID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.UpdateTokenAck), global::Cspb.UpdateTokenAck.Parser, new[]{ "ErrCode", "AccessToken", "AccountID", "TokenExplreAt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.PlatformNtf), global::Cspb.PlatformNtf.Parser, new[]{ "GameID", "ClientID", "ChatURL", "PayURL", "PayToken", "ChatAccount", "ChatPassword", "TransURL" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.CharMeta), global::Cspb.CharMeta.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.Character), global::Cspb.Character.Parser, new[]{ "Passport", "ServerId", "PlayerId", "Meta", "LastLogin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.UdidReq), global::Cspb.UdidReq.Parser, new[]{ "CInfo", "Token" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.KeyExchageReq), global::Cspb.KeyExchageReq.Parser, new[]{ "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.KeyExchageAck), global::Cspb.KeyExchageAck.Parser, new[]{ "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.AuthReq), global::Cspb.AuthReq.Parser, new[]{ "Type", "Passport", "Password", "CInfo", "Signature", "ClientState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.AuthAck), global::Cspb.AuthAck.Parser, new[]{ "Error", "AccessToken", "Characters", "AccountId", "Servers", "RecommandServer", "Type", "ClientState", "TokenExplreAt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.GetGsReq), global::Cspb.GetGsReq.Parser, new[]{ "RegionId", "Locale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.GetGsAck), global::Cspb.GetGsAck.Parser, new[]{ "Servers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.BindPassportReq), global::Cspb.BindPassportReq.Parser, new[]{ "Type", "Passport", "Password", "CInfo", "IsNew", "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.ClientInfo), global::Cspb.ClientInfo.Parser, new[]{ "Udid", "MacAddr", "Ip", "Locale", "PushType", "PushToken", "Platform", "BundleId", "AppVersion", "OsVersion", "DeviceName", "PublisherChannel", "LocaleLanguage", "DeviceState", "IsSimulator", "Idfa", "Idfv", "GoogleAid", "AndroidId", "DeviceId", "Latitude", "Longitude", "Altitude", "NetworkType", "ThirdPartDeviceId", "Build", "OpenUdid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.CharCreateReq), global::Cspb.CharCreateReq.Parser, new[]{ "AccessToken", "Name", "AccountId", "ServerId", "CInfo", "PlayerId", "Type", "Passport" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.CharLoginReq), global::Cspb.CharLoginReq.Parser, new[]{ "AccessToken", "Name", "AccountId", "ServerId", "CInfo", "PlayerId", "Type", "Passport" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.FastLoginReq), global::Cspb.FastLoginReq.Parser, new[]{ "Secret", "ServerId", "PlayerId", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.LogoutReq), global::Cspb.LogoutReq.Parser, new[]{ "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.CharacterCreateCheckReq), global::Cspb.CharacterCreateCheckReq.Parser, new[]{ "Req", "Aid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.CharacterCreateCheckAck), global::Cspb.CharacterCreateCheckAck.Parser, new[]{ "Err", "Req", "Aid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.PlayCreateAck), global::Cspb.PlayCreateAck.Parser, new[]{ "Err", "Req", "PlayerInfo", "Aid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.AccountLinkReq), global::Cspb.AccountLinkReq.Parser, new[]{ "AccessToken", "Type", "Passport", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Cspb.AccountLinkAck), global::Cspb.AccountLinkAck.Parser, new[]{ "ErrCode" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CommonAck : pb::IMessage<CommonAck> {
    private static readonly pb::MessageParser<CommonAck> _parser = new pb::MessageParser<CommonAck>(() => new CommonAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonAck(CommonAck other) : this() {
      errReq_ = other.errReq_;
      errCode_ = other.errCode_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonAck Clone() {
      return new CommonAck(this);
    }

    /// <summary>Field number for the "err_req" field.</summary>
    public const int ErrReqFieldNumber = 1;
    private uint errReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ErrReq {
      get { return errReq_; }
      set {
        errReq_ = value;
      }
    }

    /// <summary>Field number for the "err_code" field.</summary>
    public const int ErrCodeFieldNumber = 2;
    private global::Cspb.ERR_CODE errCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ERR_CODE ErrCode {
      get { return errCode_; }
      set {
        errCode_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrReq != other.ErrReq) return false;
      if (ErrCode != other.ErrCode) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrReq != 0) hash ^= ErrReq.GetHashCode();
      if (ErrCode != 0) hash ^= ErrCode.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrReq != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ErrReq);
      }
      if (ErrCode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ErrCode);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrReq != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ErrReq);
      }
      if (ErrCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrCode);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonAck other) {
      if (other == null) {
        return;
      }
      if (other.ErrReq != 0) {
        ErrReq = other.ErrReq;
      }
      if (other.ErrCode != 0) {
        ErrCode = other.ErrCode;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrReq = input.ReadUInt32();
            break;
          }
          case 16: {
            errCode_ = (global::Cspb.ERR_CODE) input.ReadEnum();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Server : pb::IMessage<Server> {
    private static readonly pb::MessageParser<Server> _parser = new pb::MessageParser<Server>(() => new Server());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Server> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Server() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Server(Server other) : this() {
      serverId_ = other.serverId_;
      name_ = other.name_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Server Clone() {
      return new Server(this);
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private int serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Server);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Server other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerId != other.ServerId) return false;
      if (Name != other.Name) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ServerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Server other) {
      if (other == null) {
        return;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ServerId = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// udid 历史角色列表
  /// </summary>
  public sealed partial class UdidAck : pb::IMessage<UdidAck> {
    private static readonly pb::MessageParser<UdidAck> _parser = new pb::MessageParser<UdidAck>(() => new UdidAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UdidAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdidAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdidAck(UdidAck other) : this() {
      lastLogin_ = other.lastLogin_;
      characters_ = other.characters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdidAck Clone() {
      return new UdidAck(this);
    }

    /// <summary>Field number for the "lastLogin" field.</summary>
    public const int LastLoginFieldNumber = 1;
    private long lastLogin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastLogin {
      get { return lastLogin_; }
      set {
        lastLogin_ = value;
      }
    }

    /// <summary>Field number for the "characters" field.</summary>
    public const int CharactersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Cspb.Character> _repeated_characters_codec
        = pb::FieldCodec.ForMessage(18, global::Cspb.Character.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Character> characters_ = new pbc::RepeatedField<global::Cspb.Character>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Character> Characters {
      get { return characters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UdidAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UdidAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LastLogin != other.LastLogin) return false;
      if(!characters_.Equals(other.characters_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LastLogin != 0L) hash ^= LastLogin.GetHashCode();
      hash ^= characters_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastLogin != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LastLogin);
      }
      characters_.WriteTo(output, _repeated_characters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastLogin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastLogin);
      }
      size += characters_.CalculateSize(_repeated_characters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UdidAck other) {
      if (other == null) {
        return;
      }
      if (other.LastLogin != 0L) {
        LastLogin = other.LastLogin;
      }
      characters_.Add(other.characters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LastLogin = input.ReadInt64();
            break;
          }
          case 18: {
            characters_.AddEntriesFrom(input, _repeated_characters_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 对应所有登录/注册响应: CharCreateReq CharLoginReq FastLoginReq ...
  /// </summary>
  public sealed partial class LoginAck : pb::IMessage<LoginAck> {
    private static readonly pb::MessageParser<LoginAck> _parser = new pb::MessageParser<LoginAck>(() => new LoginAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAck(LoginAck other) : this() {
      playerId_ = other.playerId_;
      PlayerInfo = other.playerInfo_ != null ? other.PlayerInfo.Clone() : null;
      err_ = other.err_;
      sessionID_ = other.sessionID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginAck Clone() {
      return new LoginAck(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "playerInfo" field.</summary>
    public const int PlayerInfoFieldNumber = 2;
    private global::Cspb.PlayerInfo playerInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 3;
    private global::Cspb.ERR_CODE err_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ERR_CODE Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    /// <summary>Field number for the "SessionID" field.</summary>
    public const int SessionIDFieldNumber = 4;
    private long sessionID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SessionID {
      get { return sessionID_; }
      set {
        sessionID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (Err != other.Err) return false;
      if (SessionID != other.SessionID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (Err != 0) hash ^= Err.GetHashCode();
      if (SessionID != 0L) hash ^= SessionID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerInfo);
      }
      if (Err != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Err);
      }
      if (SessionID != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(SessionID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (Err != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Err);
      }
      if (SessionID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SessionID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginAck other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          playerInfo_ = new global::Cspb.PlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      if (other.Err != 0) {
        Err = other.Err;
      }
      if (other.SessionID != 0L) {
        SessionID = other.SessionID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 18: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::Cspb.PlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 24: {
            err_ = (global::Cspb.ERR_CODE) input.ReadEnum();
            break;
          }
          case 32: {
            SessionID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器用
  /// </summary>
  public sealed partial class GsLoginAck : pb::IMessage<GsLoginAck> {
    private static readonly pb::MessageParser<GsLoginAck> _parser = new pb::MessageParser<GsLoginAck>(() => new GsLoginAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GsLoginAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GsLoginAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GsLoginAck(GsLoginAck other) : this() {
      playerId_ = other.playerId_;
      accessToken_ = other.accessToken_;
      name_ = other.name_;
      accountId_ = other.accountId_;
      serverId_ = other.serverId_;
      udid_ = other.udid_;
      ip_ = other.ip_;
      action_ = other.action_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GsLoginAck Clone() {
      return new GsLoginAck(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    /// <summary>
    /// Server Use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "access_token" field.</summary>
    public const int AccessTokenFieldNumber = 2;
    private string accessToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// 玩家名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 4;
    private long accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 5;
    private int serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "udid" field.</summary>
    public const int UdidFieldNumber = 6;
    private string udid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Udid {
      get { return udid_; }
      set {
        udid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 7;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 8;
    private global::Cspb.LOGIN_ACTION action_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.LOGIN_ACTION Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GsLoginAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GsLoginAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (AccessToken != other.AccessToken) return false;
      if (Name != other.Name) return false;
      if (AccountId != other.AccountId) return false;
      if (ServerId != other.ServerId) return false;
      if (Udid != other.Udid) return false;
      if (Ip != other.Ip) return false;
      if (Action != other.Action) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (AccountId != 0L) hash ^= AccountId.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (Udid.Length != 0) hash ^= Udid.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Action != 0) hash ^= Action.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (AccessToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccessToken);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (AccountId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(AccountId);
      }
      if (ServerId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ServerId);
      }
      if (Udid.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Udid);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Ip);
      }
      if (Action != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Action);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (AccessToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (AccountId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountId);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (Udid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Udid);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GsLoginAck other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.AccessToken.Length != 0) {
        AccessToken = other.AccessToken;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.AccountId != 0L) {
        AccountId = other.AccountId;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.Udid.Length != 0) {
        Udid = other.Udid;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 18: {
            AccessToken = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            AccountId = input.ReadInt64();
            break;
          }
          case 40: {
            ServerId = input.ReadInt32();
            break;
          }
          case 50: {
            Udid = input.ReadString();
            break;
          }
          case 58: {
            Ip = input.ReadString();
            break;
          }
          case 64: {
            action_ = (global::Cspb.LOGIN_ACTION) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BindPassportAck : pb::IMessage<BindPassportAck> {
    private static readonly pb::MessageParser<BindPassportAck> _parser = new pb::MessageParser<BindPassportAck>(() => new BindPassportAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BindPassportAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BindPassportAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BindPassportAck(BindPassportAck other) : this() {
      error_ = other.error_;
      accessToken_ = other.accessToken_;
      characters_ = other.characters_.Clone();
      accountId_ = other.accountId_;
      servers_ = other.servers_.Clone();
      recommandServer_ = other.recommandServer_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BindPassportAck Clone() {
      return new BindPassportAck(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "access_token" field.</summary>
    public const int AccessTokenFieldNumber = 2;
    private string accessToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "characters" field.</summary>
    public const int CharactersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cspb.Character> _repeated_characters_codec
        = pb::FieldCodec.ForMessage(26, global::Cspb.Character.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Character> characters_ = new pbc::RepeatedField<global::Cspb.Character>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Character> Characters {
      get { return characters_; }
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 4;
    private long accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "servers" field.</summary>
    public const int ServersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Cspb.Server> _repeated_servers_codec
        = pb::FieldCodec.ForMessage(42, global::Cspb.Server.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Server> servers_ = new pbc::RepeatedField<global::Cspb.Server>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Server> Servers {
      get { return servers_; }
    }

    /// <summary>Field number for the "recommand_server" field.</summary>
    public const int RecommandServerFieldNumber = 6;
    private int recommandServer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecommandServer {
      get { return recommandServer_; }
      set {
        recommandServer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BindPassportAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BindPassportAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      if (AccessToken != other.AccessToken) return false;
      if(!characters_.Equals(other.characters_)) return false;
      if (AccountId != other.AccountId) return false;
      if(!servers_.Equals(other.servers_)) return false;
      if (RecommandServer != other.RecommandServer) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
      hash ^= characters_.GetHashCode();
      if (AccountId != 0L) hash ^= AccountId.GetHashCode();
      hash ^= servers_.GetHashCode();
      if (RecommandServer != 0) hash ^= RecommandServer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Error);
      }
      if (AccessToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccessToken);
      }
      characters_.WriteTo(output, _repeated_characters_codec);
      if (AccountId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(AccountId);
      }
      servers_.WriteTo(output, _repeated_servers_codec);
      if (RecommandServer != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RecommandServer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (AccessToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      size += characters_.CalculateSize(_repeated_characters_codec);
      if (AccountId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountId);
      }
      size += servers_.CalculateSize(_repeated_servers_codec);
      if (RecommandServer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecommandServer);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BindPassportAck other) {
      if (other == null) {
        return;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      if (other.AccessToken.Length != 0) {
        AccessToken = other.AccessToken;
      }
      characters_.Add(other.characters_);
      if (other.AccountId != 0L) {
        AccountId = other.AccountId;
      }
      servers_.Add(other.servers_);
      if (other.RecommandServer != 0) {
        RecommandServer = other.RecommandServer;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Error = input.ReadString();
            break;
          }
          case 18: {
            AccessToken = input.ReadString();
            break;
          }
          case 26: {
            characters_.AddEntriesFrom(input, _repeated_characters_codec);
            break;
          }
          case 32: {
            AccountId = input.ReadInt64();
            break;
          }
          case 42: {
            servers_.AddEntriesFrom(input, _repeated_servers_codec);
            break;
          }
          case 48: {
            RecommandServer = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 更新平台Token
  /// </summary>
  public sealed partial class UpdateTokenReq : pb::IMessage<UpdateTokenReq> {
    private static readonly pb::MessageParser<UpdateTokenReq> _parser = new pb::MessageParser<UpdateTokenReq>(() => new UpdateTokenReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateTokenReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTokenReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTokenReq(UpdateTokenReq other) : this() {
      type_ = other.type_;
      passport_ = other.passport_;
      password_ = other.password_;
      deviceID_ = other.deviceID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTokenReq Clone() {
      return new UpdateTokenReq(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passport" field.</summary>
    public const int PassportFieldNumber = 2;
    private string passport_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Passport {
      get { return passport_; }
      set {
        passport_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deviceID" field.</summary>
    public const int DeviceIDFieldNumber = 4;
    private string deviceID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceID {
      get { return deviceID_; }
      set {
        deviceID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateTokenReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateTokenReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Passport != other.Passport) return false;
      if (Password != other.Password) return false;
      if (DeviceID != other.DeviceID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Passport.Length != 0) hash ^= Passport.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (DeviceID.Length != 0) hash ^= DeviceID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Passport.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Passport);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (DeviceID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DeviceID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Passport.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passport);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (DeviceID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateTokenReq other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Passport.Length != 0) {
        Passport = other.Passport;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.DeviceID.Length != 0) {
        DeviceID = other.DeviceID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Passport = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
          case 34: {
            DeviceID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 更新平台Token
  /// </summary>
  public sealed partial class UpdateTokenAck : pb::IMessage<UpdateTokenAck> {
    private static readonly pb::MessageParser<UpdateTokenAck> _parser = new pb::MessageParser<UpdateTokenAck>(() => new UpdateTokenAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateTokenAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTokenAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTokenAck(UpdateTokenAck other) : this() {
      errCode_ = other.errCode_;
      accessToken_ = other.accessToken_;
      accountID_ = other.accountID_;
      tokenExplreAt_ = other.tokenExplreAt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTokenAck Clone() {
      return new UpdateTokenAck(this);
    }

    /// <summary>Field number for the "errCode" field.</summary>
    public const int ErrCodeFieldNumber = 1;
    private global::Cspb.ERR_CODE errCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ERR_CODE ErrCode {
      get { return errCode_; }
      set {
        errCode_ = value;
      }
    }

    /// <summary>Field number for the "accessToken" field.</summary>
    public const int AccessTokenFieldNumber = 2;
    private string accessToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accountID" field.</summary>
    public const int AccountIDFieldNumber = 3;
    private long accountID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccountID {
      get { return accountID_; }
      set {
        accountID_ = value;
      }
    }

    /// <summary>Field number for the "token_explre_at" field.</summary>
    public const int TokenExplreAtFieldNumber = 4;
    private long tokenExplreAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TokenExplreAt {
      get { return tokenExplreAt_; }
      set {
        tokenExplreAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateTokenAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateTokenAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrCode != other.ErrCode) return false;
      if (AccessToken != other.AccessToken) return false;
      if (AccountID != other.AccountID) return false;
      if (TokenExplreAt != other.TokenExplreAt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrCode != 0) hash ^= ErrCode.GetHashCode();
      if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
      if (AccountID != 0L) hash ^= AccountID.GetHashCode();
      if (TokenExplreAt != 0L) hash ^= TokenExplreAt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ErrCode);
      }
      if (AccessToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccessToken);
      }
      if (AccountID != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AccountID);
      }
      if (TokenExplreAt != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TokenExplreAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrCode);
      }
      if (AccessToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      if (AccountID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountID);
      }
      if (TokenExplreAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TokenExplreAt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateTokenAck other) {
      if (other == null) {
        return;
      }
      if (other.ErrCode != 0) {
        ErrCode = other.ErrCode;
      }
      if (other.AccessToken.Length != 0) {
        AccessToken = other.AccessToken;
      }
      if (other.AccountID != 0L) {
        AccountID = other.AccountID;
      }
      if (other.TokenExplreAt != 0L) {
        TokenExplreAt = other.TokenExplreAt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            errCode_ = (global::Cspb.ERR_CODE) input.ReadEnum();
            break;
          }
          case 18: {
            AccessToken = input.ReadString();
            break;
          }
          case 24: {
            AccountID = input.ReadInt64();
            break;
          }
          case 32: {
            TokenExplreAt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端所需的平台信息
  /// </summary>
  public sealed partial class PlatformNtf : pb::IMessage<PlatformNtf> {
    private static readonly pb::MessageParser<PlatformNtf> _parser = new pb::MessageParser<PlatformNtf>(() => new PlatformNtf());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlatformNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlatformNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlatformNtf(PlatformNtf other) : this() {
      gameID_ = other.gameID_;
      clientID_ = other.clientID_;
      chatURL_ = other.chatURL_;
      payURL_ = other.payURL_;
      payToken_ = other.payToken_;
      chatAccount_ = other.chatAccount_;
      chatPassword_ = other.chatPassword_;
      transURL_ = other.transURL_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlatformNtf Clone() {
      return new PlatformNtf(this);
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 1;
    private string gameID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameID {
      get { return gameID_; }
      set {
        gameID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientID" field.</summary>
    public const int ClientIDFieldNumber = 2;
    private string clientID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientID {
      get { return clientID_; }
      set {
        clientID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chatURL" field.</summary>
    public const int ChatURLFieldNumber = 3;
    private string chatURL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChatURL {
      get { return chatURL_; }
      set {
        chatURL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payURL" field.</summary>
    public const int PayURLFieldNumber = 4;
    private string payURL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PayURL {
      get { return payURL_; }
      set {
        payURL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payToken" field.</summary>
    public const int PayTokenFieldNumber = 5;
    private string payToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PayToken {
      get { return payToken_; }
      set {
        payToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chatAccount" field.</summary>
    public const int ChatAccountFieldNumber = 6;
    private string chatAccount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChatAccount {
      get { return chatAccount_; }
      set {
        chatAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chatPassword" field.</summary>
    public const int ChatPasswordFieldNumber = 7;
    private string chatPassword_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChatPassword {
      get { return chatPassword_; }
      set {
        chatPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transURL" field.</summary>
    public const int TransURLFieldNumber = 8;
    private string transURL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TransURL {
      get { return transURL_; }
      set {
        transURL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlatformNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlatformNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameID != other.GameID) return false;
      if (ClientID != other.ClientID) return false;
      if (ChatURL != other.ChatURL) return false;
      if (PayURL != other.PayURL) return false;
      if (PayToken != other.PayToken) return false;
      if (ChatAccount != other.ChatAccount) return false;
      if (ChatPassword != other.ChatPassword) return false;
      if (TransURL != other.TransURL) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameID.Length != 0) hash ^= GameID.GetHashCode();
      if (ClientID.Length != 0) hash ^= ClientID.GetHashCode();
      if (ChatURL.Length != 0) hash ^= ChatURL.GetHashCode();
      if (PayURL.Length != 0) hash ^= PayURL.GetHashCode();
      if (PayToken.Length != 0) hash ^= PayToken.GetHashCode();
      if (ChatAccount.Length != 0) hash ^= ChatAccount.GetHashCode();
      if (ChatPassword.Length != 0) hash ^= ChatPassword.GetHashCode();
      if (TransURL.Length != 0) hash ^= TransURL.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GameID);
      }
      if (ClientID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClientID);
      }
      if (ChatURL.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ChatURL);
      }
      if (PayURL.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PayURL);
      }
      if (PayToken.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PayToken);
      }
      if (ChatAccount.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ChatAccount);
      }
      if (ChatPassword.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ChatPassword);
      }
      if (TransURL.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(TransURL);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameID);
      }
      if (ClientID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientID);
      }
      if (ChatURL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChatURL);
      }
      if (PayURL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PayURL);
      }
      if (PayToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PayToken);
      }
      if (ChatAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChatAccount);
      }
      if (ChatPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChatPassword);
      }
      if (TransURL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TransURL);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlatformNtf other) {
      if (other == null) {
        return;
      }
      if (other.GameID.Length != 0) {
        GameID = other.GameID;
      }
      if (other.ClientID.Length != 0) {
        ClientID = other.ClientID;
      }
      if (other.ChatURL.Length != 0) {
        ChatURL = other.ChatURL;
      }
      if (other.PayURL.Length != 0) {
        PayURL = other.PayURL;
      }
      if (other.PayToken.Length != 0) {
        PayToken = other.PayToken;
      }
      if (other.ChatAccount.Length != 0) {
        ChatAccount = other.ChatAccount;
      }
      if (other.ChatPassword.Length != 0) {
        ChatPassword = other.ChatPassword;
      }
      if (other.TransURL.Length != 0) {
        TransURL = other.TransURL;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GameID = input.ReadString();
            break;
          }
          case 18: {
            ClientID = input.ReadString();
            break;
          }
          case 26: {
            ChatURL = input.ReadString();
            break;
          }
          case 34: {
            PayURL = input.ReadString();
            break;
          }
          case 42: {
            PayToken = input.ReadString();
            break;
          }
          case 50: {
            ChatAccount = input.ReadString();
            break;
          }
          case 58: {
            ChatPassword = input.ReadString();
            break;
          }
          case 66: {
            TransURL = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 角色元信息
  /// </summary>
  public sealed partial class CharMeta : pb::IMessage<CharMeta> {
    private static readonly pb::MessageParser<CharMeta> _parser = new pb::MessageParser<CharMeta>(() => new CharMeta());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharMeta> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharMeta() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharMeta(CharMeta other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharMeta Clone() {
      return new CharMeta(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharMeta);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharMeta other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharMeta other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Character : pb::IMessage<Character> {
    private static readonly pb::MessageParser<Character> _parser = new pb::MessageParser<Character>(() => new Character());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Character> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Character() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Character(Character other) : this() {
      passport_ = other.passport_;
      serverId_ = other.serverId_;
      playerId_ = other.playerId_;
      Meta = other.meta_ != null ? other.Meta.Clone() : null;
      lastLogin_ = other.lastLogin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Character Clone() {
      return new Character(this);
    }

    /// <summary>Field number for the "passport" field.</summary>
    public const int PassportFieldNumber = 1;
    private string passport_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Passport {
      get { return passport_; }
      set {
        passport_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 2;
    private int serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 3;
    private long playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "meta" field.</summary>
    public const int MetaFieldNumber = 4;
    private global::Cspb.CharMeta meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.CharMeta Meta {
      get { return meta_; }
      set {
        meta_ = value;
      }
    }

    /// <summary>Field number for the "LastLogin" field.</summary>
    public const int LastLoginFieldNumber = 5;
    private long lastLogin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastLogin {
      get { return lastLogin_; }
      set {
        lastLogin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Character);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Character other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Passport != other.Passport) return false;
      if (ServerId != other.ServerId) return false;
      if (PlayerId != other.PlayerId) return false;
      if (!object.Equals(Meta, other.Meta)) return false;
      if (LastLogin != other.LastLogin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Passport.Length != 0) hash ^= Passport.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (meta_ != null) hash ^= Meta.GetHashCode();
      if (LastLogin != 0L) hash ^= LastLogin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Passport.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Passport);
      }
      if (ServerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ServerId);
      }
      if (PlayerId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(PlayerId);
      }
      if (meta_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Meta);
      }
      if (LastLogin != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(LastLogin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Passport.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passport);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (LastLogin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastLogin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Character other) {
      if (other == null) {
        return;
      }
      if (other.Passport.Length != 0) {
        Passport = other.Passport;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.meta_ != null) {
        if (meta_ == null) {
          meta_ = new global::Cspb.CharMeta();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.LastLogin != 0L) {
        LastLogin = other.LastLogin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Passport = input.ReadString();
            break;
          }
          case 16: {
            ServerId = input.ReadInt32();
            break;
          }
          case 24: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 34: {
            if (meta_ == null) {
              meta_ = new global::Cspb.CharMeta();
            }
            input.ReadMessage(meta_);
            break;
          }
          case 40: {
            LastLogin = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 拉取设备历史账号
  /// </summary>
  public sealed partial class UdidReq : pb::IMessage<UdidReq> {
    private static readonly pb::MessageParser<UdidReq> _parser = new pb::MessageParser<UdidReq>(() => new UdidReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UdidReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdidReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdidReq(UdidReq other) : this() {
      CInfo = other.cInfo_ != null ? other.CInfo.Clone() : null;
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UdidReq Clone() {
      return new UdidReq(this);
    }

    /// <summary>Field number for the "c_info" field.</summary>
    public const int CInfoFieldNumber = 1;
    private global::Cspb.ClientInfo cInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ClientInfo CInfo {
      get { return cInfo_; }
      set {
        cInfo_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UdidReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UdidReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CInfo, other.CInfo)) return false;
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cInfo_ != null) hash ^= CInfo.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (cInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CInfo);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CInfo);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UdidReq other) {
      if (other == null) {
        return;
      }
      if (other.cInfo_ != null) {
        if (cInfo_ == null) {
          cInfo_ = new global::Cspb.ClientInfo();
        }
        CInfo.MergeFrom(other.CInfo);
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (cInfo_ == null) {
              cInfo_ = new global::Cspb.ClientInfo();
            }
            input.ReadMessage(cInfo_);
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 交互秘钥 -- 与客户端消息加密用
  /// </summary>
  public sealed partial class KeyExchageReq : pb::IMessage<KeyExchageReq> {
    private static readonly pb::MessageParser<KeyExchageReq> _parser = new pb::MessageParser<KeyExchageReq>(() => new KeyExchageReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyExchageReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyExchageReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyExchageReq(KeyExchageReq other) : this() {
      key_ = other.key_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyExchageReq Clone() {
      return new KeyExchageReq(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private pb::ByteString key_ = pb::ByteString.Empty;
    /// <summary>
    /// 客户端生成的加密后的key(公钥加密)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyExchageReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyExchageReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyExchageReq other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KeyExchageAck : pb::IMessage<KeyExchageAck> {
    private static readonly pb::MessageParser<KeyExchageAck> _parser = new pb::MessageParser<KeyExchageAck>(() => new KeyExchageAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyExchageAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyExchageAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyExchageAck(KeyExchageAck other) : this() {
      key_ = other.key_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyExchageAck Clone() {
      return new KeyExchageAck(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private pb::ByteString key_ = pb::ByteString.Empty;
    /// <summary>
    /// 服务器返回的加密后的key(用客户端的传过来的key加密生成的)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyExchageAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyExchageAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyExchageAck other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Auth请求  通过HTTP POST Form发送 不走Protobuf编码
  /// 放在这里作原型声明
  /// </summary>
  public sealed partial class AuthReq : pb::IMessage<AuthReq> {
    private static readonly pb::MessageParser<AuthReq> _parser = new pb::MessageParser<AuthReq>(() => new AuthReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthReq(AuthReq other) : this() {
      type_ = other.type_;
      passport_ = other.passport_;
      password_ = other.password_;
      CInfo = other.cInfo_ != null ? other.CInfo.Clone() : null;
      signature_ = other.signature_;
      clientState_ = other.clientState_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthReq Clone() {
      return new AuthReq(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passport" field.</summary>
    public const int PassportFieldNumber = 2;
    private string passport_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Passport {
      get { return passport_; }
      set {
        passport_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "c_info" field.</summary>
    public const int CInfoFieldNumber = 4;
    private global::Cspb.ClientInfo cInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ClientInfo CInfo {
      get { return cInfo_; }
      set {
        cInfo_ = value;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 5;
    private string signature_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientState" field.</summary>
    public const int ClientStateFieldNumber = 6;
    private int clientState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClientState {
      get { return clientState_; }
      set {
        clientState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Passport != other.Passport) return false;
      if (Password != other.Password) return false;
      if (!object.Equals(CInfo, other.CInfo)) return false;
      if (Signature != other.Signature) return false;
      if (ClientState != other.ClientState) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Passport.Length != 0) hash ^= Passport.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (cInfo_ != null) hash ^= CInfo.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (ClientState != 0) hash ^= ClientState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Passport.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Passport);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (cInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CInfo);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Signature);
      }
      if (ClientState != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ClientState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Passport.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passport);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (cInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CInfo);
      }
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Signature);
      }
      if (ClientState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthReq other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Passport.Length != 0) {
        Passport = other.Passport;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.cInfo_ != null) {
        if (cInfo_ == null) {
          cInfo_ = new global::Cspb.ClientInfo();
        }
        CInfo.MergeFrom(other.CInfo);
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      if (other.ClientState != 0) {
        ClientState = other.ClientState;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Passport = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
          case 34: {
            if (cInfo_ == null) {
              cInfo_ = new global::Cspb.ClientInfo();
            }
            input.ReadMessage(cInfo_);
            break;
          }
          case 42: {
            Signature = input.ReadString();
            break;
          }
          case 48: {
            ClientState = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 当error为"" 其余字段才有效
  /// </summary>
  public sealed partial class AuthAck : pb::IMessage<AuthAck> {
    private static readonly pb::MessageParser<AuthAck> _parser = new pb::MessageParser<AuthAck>(() => new AuthAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthAck(AuthAck other) : this() {
      error_ = other.error_;
      accessToken_ = other.accessToken_;
      characters_ = other.characters_.Clone();
      accountId_ = other.accountId_;
      servers_ = other.servers_.Clone();
      recommandServer_ = other.recommandServer_;
      type_ = other.type_;
      clientState_ = other.clientState_;
      tokenExplreAt_ = other.tokenExplreAt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthAck Clone() {
      return new AuthAck(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "access_token" field.</summary>
    public const int AccessTokenFieldNumber = 2;
    private string accessToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "characters" field.</summary>
    public const int CharactersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Cspb.Character> _repeated_characters_codec
        = pb::FieldCodec.ForMessage(26, global::Cspb.Character.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Character> characters_ = new pbc::RepeatedField<global::Cspb.Character>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Character> Characters {
      get { return characters_; }
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 4;
    private long accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "servers" field.</summary>
    public const int ServersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Cspb.Server> _repeated_servers_codec
        = pb::FieldCodec.ForMessage(42, global::Cspb.Server.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Server> servers_ = new pbc::RepeatedField<global::Cspb.Server>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Server> Servers {
      get { return servers_; }
    }

    /// <summary>Field number for the "recommand_server" field.</summary>
    public const int RecommandServerFieldNumber = 6;
    private int recommandServer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecommandServer {
      get { return recommandServer_; }
      set {
        recommandServer_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 7;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientState" field.</summary>
    public const int ClientStateFieldNumber = 8;
    private int clientState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClientState {
      get { return clientState_; }
      set {
        clientState_ = value;
      }
    }

    /// <summary>Field number for the "token_explre_at" field.</summary>
    public const int TokenExplreAtFieldNumber = 9;
    private long tokenExplreAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TokenExplreAt {
      get { return tokenExplreAt_; }
      set {
        tokenExplreAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      if (AccessToken != other.AccessToken) return false;
      if(!characters_.Equals(other.characters_)) return false;
      if (AccountId != other.AccountId) return false;
      if(!servers_.Equals(other.servers_)) return false;
      if (RecommandServer != other.RecommandServer) return false;
      if (Type != other.Type) return false;
      if (ClientState != other.ClientState) return false;
      if (TokenExplreAt != other.TokenExplreAt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
      hash ^= characters_.GetHashCode();
      if (AccountId != 0L) hash ^= AccountId.GetHashCode();
      hash ^= servers_.GetHashCode();
      if (RecommandServer != 0) hash ^= RecommandServer.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (ClientState != 0) hash ^= ClientState.GetHashCode();
      if (TokenExplreAt != 0L) hash ^= TokenExplreAt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Error);
      }
      if (AccessToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccessToken);
      }
      characters_.WriteTo(output, _repeated_characters_codec);
      if (AccountId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(AccountId);
      }
      servers_.WriteTo(output, _repeated_servers_codec);
      if (RecommandServer != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RecommandServer);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Type);
      }
      if (ClientState != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ClientState);
      }
      if (TokenExplreAt != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(TokenExplreAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (AccessToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      size += characters_.CalculateSize(_repeated_characters_codec);
      if (AccountId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountId);
      }
      size += servers_.CalculateSize(_repeated_servers_codec);
      if (RecommandServer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecommandServer);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (ClientState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientState);
      }
      if (TokenExplreAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TokenExplreAt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthAck other) {
      if (other == null) {
        return;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      if (other.AccessToken.Length != 0) {
        AccessToken = other.AccessToken;
      }
      characters_.Add(other.characters_);
      if (other.AccountId != 0L) {
        AccountId = other.AccountId;
      }
      servers_.Add(other.servers_);
      if (other.RecommandServer != 0) {
        RecommandServer = other.RecommandServer;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.ClientState != 0) {
        ClientState = other.ClientState;
      }
      if (other.TokenExplreAt != 0L) {
        TokenExplreAt = other.TokenExplreAt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Error = input.ReadString();
            break;
          }
          case 18: {
            AccessToken = input.ReadString();
            break;
          }
          case 26: {
            characters_.AddEntriesFrom(input, _repeated_characters_codec);
            break;
          }
          case 32: {
            AccountId = input.ReadInt64();
            break;
          }
          case 42: {
            servers_.AddEntriesFrom(input, _repeated_servers_codec);
            break;
          }
          case 48: {
            RecommandServer = input.ReadInt32();
            break;
          }
          case 58: {
            Type = input.ReadString();
            break;
          }
          case 64: {
            ClientState = input.ReadInt32();
            break;
          }
          case 72: {
            TokenExplreAt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 获取gs
  /// </summary>
  public sealed partial class GetGsReq : pb::IMessage<GetGsReq> {
    private static readonly pb::MessageParser<GetGsReq> _parser = new pb::MessageParser<GetGsReq>(() => new GetGsReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetGsReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGsReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGsReq(GetGsReq other) : this() {
      regionId_ = other.regionId_;
      locale_ = other.locale_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGsReq Clone() {
      return new GetGsReq(this);
    }

    /// <summary>Field number for the "region_id" field.</summary>
    public const int RegionIdFieldNumber = 1;
    private string regionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegionId {
      get { return regionId_; }
      set {
        regionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "locale" field.</summary>
    public const int LocaleFieldNumber = 2;
    private string locale_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Locale {
      get { return locale_; }
      set {
        locale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetGsReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetGsReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RegionId != other.RegionId) return false;
      if (Locale != other.Locale) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RegionId.Length != 0) hash ^= RegionId.GetHashCode();
      if (Locale.Length != 0) hash ^= Locale.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RegionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RegionId);
      }
      if (Locale.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Locale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RegionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RegionId);
      }
      if (Locale.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Locale);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetGsReq other) {
      if (other == null) {
        return;
      }
      if (other.RegionId.Length != 0) {
        RegionId = other.RegionId;
      }
      if (other.Locale.Length != 0) {
        Locale = other.Locale;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RegionId = input.ReadString();
            break;
          }
          case 18: {
            Locale = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetGsAck : pb::IMessage<GetGsAck> {
    private static readonly pb::MessageParser<GetGsAck> _parser = new pb::MessageParser<GetGsAck>(() => new GetGsAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetGsAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGsAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGsAck(GetGsAck other) : this() {
      servers_ = other.servers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGsAck Clone() {
      return new GetGsAck(this);
    }

    /// <summary>Field number for the "servers" field.</summary>
    public const int ServersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Cspb.Server> _repeated_servers_codec
        = pb::FieldCodec.ForMessage(10, global::Cspb.Server.Parser);
    private readonly pbc::RepeatedField<global::Cspb.Server> servers_ = new pbc::RepeatedField<global::Cspb.Server>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Cspb.Server> Servers {
      get { return servers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetGsAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetGsAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!servers_.Equals(other.servers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= servers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      servers_.WriteTo(output, _repeated_servers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += servers_.CalculateSize(_repeated_servers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetGsAck other) {
      if (other == null) {
        return;
      }
      servers_.Add(other.servers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            servers_.AddEntriesFrom(input, _repeated_servers_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 绑定玩家角色和账号
  /// </summary>
  public sealed partial class BindPassportReq : pb::IMessage<BindPassportReq> {
    private static readonly pb::MessageParser<BindPassportReq> _parser = new pb::MessageParser<BindPassportReq>(() => new BindPassportReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BindPassportReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BindPassportReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BindPassportReq(BindPassportReq other) : this() {
      type_ = other.type_;
      passport_ = other.passport_;
      password_ = other.password_;
      CInfo = other.cInfo_ != null ? other.CInfo.Clone() : null;
      isNew_ = other.isNew_;
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BindPassportReq Clone() {
      return new BindPassportReq(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passport" field.</summary>
    public const int PassportFieldNumber = 2;
    private string passport_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Passport {
      get { return passport_; }
      set {
        passport_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "c_info" field.</summary>
    public const int CInfoFieldNumber = 4;
    private global::Cspb.ClientInfo cInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ClientInfo CInfo {
      get { return cInfo_; }
      set {
        cInfo_ = value;
      }
    }

    /// <summary>Field number for the "is_new" field.</summary>
    public const int IsNewFieldNumber = 5;
    private bool isNew_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNew {
      get { return isNew_; }
      set {
        isNew_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 6;
    private long playerId_;
    /// <summary>
    /// server use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BindPassportReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BindPassportReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Passport != other.Passport) return false;
      if (Password != other.Password) return false;
      if (!object.Equals(CInfo, other.CInfo)) return false;
      if (IsNew != other.IsNew) return false;
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Passport.Length != 0) hash ^= Passport.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (cInfo_ != null) hash ^= CInfo.GetHashCode();
      if (IsNew != false) hash ^= IsNew.GetHashCode();
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Passport.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Passport);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (cInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CInfo);
      }
      if (IsNew != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsNew);
      }
      if (PlayerId != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Passport.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passport);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (cInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CInfo);
      }
      if (IsNew != false) {
        size += 1 + 1;
      }
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BindPassportReq other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Passport.Length != 0) {
        Passport = other.Passport;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.cInfo_ != null) {
        if (cInfo_ == null) {
          cInfo_ = new global::Cspb.ClientInfo();
        }
        CInfo.MergeFrom(other.CInfo);
      }
      if (other.IsNew != false) {
        IsNew = other.IsNew;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Passport = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
          case 34: {
            if (cInfo_ == null) {
              cInfo_ = new global::Cspb.ClientInfo();
            }
            input.ReadMessage(cInfo_);
            break;
          }
          case 40: {
            IsNew = input.ReadBool();
            break;
          }
          case 48: {
            PlayerId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端信息
  /// </summary>
  public sealed partial class ClientInfo : pb::IMessage<ClientInfo> {
    private static readonly pb::MessageParser<ClientInfo> _parser = new pb::MessageParser<ClientInfo>(() => new ClientInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientInfo(ClientInfo other) : this() {
      udid_ = other.udid_;
      macAddr_ = other.macAddr_;
      ip_ = other.ip_;
      locale_ = other.locale_;
      pushType_ = other.pushType_;
      pushToken_ = other.pushToken_;
      platform_ = other.platform_;
      bundleId_ = other.bundleId_;
      appVersion_ = other.appVersion_;
      osVersion_ = other.osVersion_;
      deviceName_ = other.deviceName_;
      publisherChannel_ = other.publisherChannel_;
      localeLanguage_ = other.localeLanguage_;
      deviceState_ = other.deviceState_;
      isSimulator_ = other.isSimulator_;
      idfa_ = other.idfa_;
      idfv_ = other.idfv_;
      googleAid_ = other.googleAid_;
      androidId_ = other.androidId_;
      deviceId_ = other.deviceId_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      altitude_ = other.altitude_;
      networkType_ = other.networkType_;
      thirdPartDeviceId_ = other.thirdPartDeviceId_;
      build_ = other.build_;
      openUdid_ = other.openUdid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientInfo Clone() {
      return new ClientInfo(this);
    }

    /// <summary>Field number for the "udid" field.</summary>
    public const int UdidFieldNumber = 1;
    private string udid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Udid {
      get { return udid_; }
      set {
        udid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mac_addr" field.</summary>
    public const int MacAddrFieldNumber = 2;
    private string macAddr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MacAddr {
      get { return macAddr_; }
      set {
        macAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 3;
    private string ip_ = "";
    /// <summary>
    ///需要真实ip ipv4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "locale" field.</summary>
    public const int LocaleFieldNumber = 4;
    private string locale_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Locale {
      get { return locale_; }
      set {
        locale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "push_type" field.</summary>
    public const int PushTypeFieldNumber = 5;
    private string pushType_ = "";
    /// <summary>
    /// apns , gcm, fcm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PushType {
      get { return pushType_; }
      set {
        pushType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "push_token" field.</summary>
    public const int PushTokenFieldNumber = 6;
    private string pushToken_ = "";
    /// <summary>
    /// Apple Device Token或Android GCM Registration ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PushToken {
      get { return pushToken_; }
      set {
        pushToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 7;
    private string platform_ = "";
    /// <summary>
    /// IOS、ANDROID、WEIXIN、WEB
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bundle_id" field.</summary>
    public const int BundleIdFieldNumber = 8;
    private string bundleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BundleId {
      get { return bundleId_; }
      set {
        bundleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "app_version" field.</summary>
    public const int AppVersionFieldNumber = 9;
    private string appVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppVersion {
      get { return appVersion_; }
      set {
        appVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "os_version" field.</summary>
    public const int OsVersionFieldNumber = 10;
    private string osVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OsVersion {
      get { return osVersion_; }
      set {
        osVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_name" field.</summary>
    public const int DeviceNameFieldNumber = 11;
    private string deviceName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceName {
      get { return deviceName_; }
      set {
        deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "publisher_channel" field.</summary>
    public const int PublisherChannelFieldNumber = 12;
    private string publisherChannel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublisherChannel {
      get { return publisherChannel_; }
      set {
        publisherChannel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "locale_language" field.</summary>
    public const int LocaleLanguageFieldNumber = 14;
    private string localeLanguage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocaleLanguage {
      get { return localeLanguage_; }
      set {
        localeLanguage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_state" field.</summary>
    public const int DeviceStateFieldNumber = 15;
    private string deviceState_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceState {
      get { return deviceState_; }
      set {
        deviceState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_simulator" field.</summary>
    public const int IsSimulatorFieldNumber = 16;
    private int isSimulator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsSimulator {
      get { return isSimulator_; }
      set {
        isSimulator_ = value;
      }
    }

    /// <summary>Field number for the "idfa" field.</summary>
    public const int IdfaFieldNumber = 17;
    private string idfa_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Idfa {
      get { return idfa_; }
      set {
        idfa_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "idfv" field.</summary>
    public const int IdfvFieldNumber = 18;
    private string idfv_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Idfv {
      get { return idfv_; }
      set {
        idfv_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "google_aid" field.</summary>
    public const int GoogleAidFieldNumber = 19;
    private string googleAid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GoogleAid {
      get { return googleAid_; }
      set {
        googleAid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "android_id" field.</summary>
    public const int AndroidIdFieldNumber = 20;
    private string androidId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AndroidId {
      get { return androidId_; }
      set {
        androidId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 21;
    private string deviceId_ = "";
    /// <summary>
    ///IMEI/MEID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 22;
    private float latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 23;
    private float longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "altitude" field.</summary>
    public const int AltitudeFieldNumber = 24;
    private float altitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Altitude {
      get { return altitude_; }
      set {
        altitude_ = value;
      }
    }

    /// <summary>Field number for the "network_type" field.</summary>
    public const int NetworkTypeFieldNumber = 25;
    private string networkType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NetworkType {
      get { return networkType_; }
      set {
        networkType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "third_part_device_id" field.</summary>
    public const int ThirdPartDeviceIdFieldNumber = 26;
    private string thirdPartDeviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ThirdPartDeviceId {
      get { return thirdPartDeviceId_; }
      set {
        thirdPartDeviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "build" field.</summary>
    public const int BuildFieldNumber = 27;
    private string build_ = "";
    /// <summary>
    ///system build number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Build {
      get { return build_; }
      set {
        build_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "open_udid" field.</summary>
    public const int OpenUdidFieldNumber = 28;
    private string openUdid_ = "";
    /// <summary>
    ///OPEN UDID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpenUdid {
      get { return openUdid_; }
      set {
        openUdid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Udid != other.Udid) return false;
      if (MacAddr != other.MacAddr) return false;
      if (Ip != other.Ip) return false;
      if (Locale != other.Locale) return false;
      if (PushType != other.PushType) return false;
      if (PushToken != other.PushToken) return false;
      if (Platform != other.Platform) return false;
      if (BundleId != other.BundleId) return false;
      if (AppVersion != other.AppVersion) return false;
      if (OsVersion != other.OsVersion) return false;
      if (DeviceName != other.DeviceName) return false;
      if (PublisherChannel != other.PublisherChannel) return false;
      if (LocaleLanguage != other.LocaleLanguage) return false;
      if (DeviceState != other.DeviceState) return false;
      if (IsSimulator != other.IsSimulator) return false;
      if (Idfa != other.Idfa) return false;
      if (Idfv != other.Idfv) return false;
      if (GoogleAid != other.GoogleAid) return false;
      if (AndroidId != other.AndroidId) return false;
      if (DeviceId != other.DeviceId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Latitude, other.Latitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Longitude, other.Longitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Altitude, other.Altitude)) return false;
      if (NetworkType != other.NetworkType) return false;
      if (ThirdPartDeviceId != other.ThirdPartDeviceId) return false;
      if (Build != other.Build) return false;
      if (OpenUdid != other.OpenUdid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Udid.Length != 0) hash ^= Udid.GetHashCode();
      if (MacAddr.Length != 0) hash ^= MacAddr.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Locale.Length != 0) hash ^= Locale.GetHashCode();
      if (PushType.Length != 0) hash ^= PushType.GetHashCode();
      if (PushToken.Length != 0) hash ^= PushToken.GetHashCode();
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (BundleId.Length != 0) hash ^= BundleId.GetHashCode();
      if (AppVersion.Length != 0) hash ^= AppVersion.GetHashCode();
      if (OsVersion.Length != 0) hash ^= OsVersion.GetHashCode();
      if (DeviceName.Length != 0) hash ^= DeviceName.GetHashCode();
      if (PublisherChannel.Length != 0) hash ^= PublisherChannel.GetHashCode();
      if (LocaleLanguage.Length != 0) hash ^= LocaleLanguage.GetHashCode();
      if (DeviceState.Length != 0) hash ^= DeviceState.GetHashCode();
      if (IsSimulator != 0) hash ^= IsSimulator.GetHashCode();
      if (Idfa.Length != 0) hash ^= Idfa.GetHashCode();
      if (Idfv.Length != 0) hash ^= Idfv.GetHashCode();
      if (GoogleAid.Length != 0) hash ^= GoogleAid.GetHashCode();
      if (AndroidId.Length != 0) hash ^= AndroidId.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (Latitude != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Latitude);
      if (Longitude != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Longitude);
      if (Altitude != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Altitude);
      if (NetworkType.Length != 0) hash ^= NetworkType.GetHashCode();
      if (ThirdPartDeviceId.Length != 0) hash ^= ThirdPartDeviceId.GetHashCode();
      if (Build.Length != 0) hash ^= Build.GetHashCode();
      if (OpenUdid.Length != 0) hash ^= OpenUdid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Udid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Udid);
      }
      if (MacAddr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MacAddr);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ip);
      }
      if (Locale.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Locale);
      }
      if (PushType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PushType);
      }
      if (PushToken.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PushToken);
      }
      if (Platform.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Platform);
      }
      if (BundleId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(BundleId);
      }
      if (AppVersion.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(AppVersion);
      }
      if (OsVersion.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(OsVersion);
      }
      if (DeviceName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(DeviceName);
      }
      if (PublisherChannel.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(PublisherChannel);
      }
      if (LocaleLanguage.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(LocaleLanguage);
      }
      if (DeviceState.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(DeviceState);
      }
      if (IsSimulator != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(IsSimulator);
      }
      if (Idfa.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Idfa);
      }
      if (Idfv.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Idfv);
      }
      if (GoogleAid.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(GoogleAid);
      }
      if (AndroidId.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(AndroidId);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(DeviceId);
      }
      if (Latitude != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(Latitude);
      }
      if (Longitude != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(Longitude);
      }
      if (Altitude != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(Altitude);
      }
      if (NetworkType.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(NetworkType);
      }
      if (ThirdPartDeviceId.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(ThirdPartDeviceId);
      }
      if (Build.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(Build);
      }
      if (OpenUdid.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(OpenUdid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Udid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Udid);
      }
      if (MacAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MacAddr);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Locale.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Locale);
      }
      if (PushType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PushType);
      }
      if (PushToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PushToken);
      }
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (BundleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BundleId);
      }
      if (AppVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppVersion);
      }
      if (OsVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OsVersion);
      }
      if (DeviceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
      }
      if (PublisherChannel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublisherChannel);
      }
      if (LocaleLanguage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocaleLanguage);
      }
      if (DeviceState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceState);
      }
      if (IsSimulator != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IsSimulator);
      }
      if (Idfa.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Idfa);
      }
      if (Idfv.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Idfv);
      }
      if (GoogleAid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GoogleAid);
      }
      if (AndroidId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AndroidId);
      }
      if (DeviceId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (Latitude != 0F) {
        size += 2 + 4;
      }
      if (Longitude != 0F) {
        size += 2 + 4;
      }
      if (Altitude != 0F) {
        size += 2 + 4;
      }
      if (NetworkType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NetworkType);
      }
      if (ThirdPartDeviceId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ThirdPartDeviceId);
      }
      if (Build.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Build);
      }
      if (OpenUdid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OpenUdid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientInfo other) {
      if (other == null) {
        return;
      }
      if (other.Udid.Length != 0) {
        Udid = other.Udid;
      }
      if (other.MacAddr.Length != 0) {
        MacAddr = other.MacAddr;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Locale.Length != 0) {
        Locale = other.Locale;
      }
      if (other.PushType.Length != 0) {
        PushType = other.PushType;
      }
      if (other.PushToken.Length != 0) {
        PushToken = other.PushToken;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      if (other.BundleId.Length != 0) {
        BundleId = other.BundleId;
      }
      if (other.AppVersion.Length != 0) {
        AppVersion = other.AppVersion;
      }
      if (other.OsVersion.Length != 0) {
        OsVersion = other.OsVersion;
      }
      if (other.DeviceName.Length != 0) {
        DeviceName = other.DeviceName;
      }
      if (other.PublisherChannel.Length != 0) {
        PublisherChannel = other.PublisherChannel;
      }
      if (other.LocaleLanguage.Length != 0) {
        LocaleLanguage = other.LocaleLanguage;
      }
      if (other.DeviceState.Length != 0) {
        DeviceState = other.DeviceState;
      }
      if (other.IsSimulator != 0) {
        IsSimulator = other.IsSimulator;
      }
      if (other.Idfa.Length != 0) {
        Idfa = other.Idfa;
      }
      if (other.Idfv.Length != 0) {
        Idfv = other.Idfv;
      }
      if (other.GoogleAid.Length != 0) {
        GoogleAid = other.GoogleAid;
      }
      if (other.AndroidId.Length != 0) {
        AndroidId = other.AndroidId;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.Latitude != 0F) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0F) {
        Longitude = other.Longitude;
      }
      if (other.Altitude != 0F) {
        Altitude = other.Altitude;
      }
      if (other.NetworkType.Length != 0) {
        NetworkType = other.NetworkType;
      }
      if (other.ThirdPartDeviceId.Length != 0) {
        ThirdPartDeviceId = other.ThirdPartDeviceId;
      }
      if (other.Build.Length != 0) {
        Build = other.Build;
      }
      if (other.OpenUdid.Length != 0) {
        OpenUdid = other.OpenUdid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Udid = input.ReadString();
            break;
          }
          case 18: {
            MacAddr = input.ReadString();
            break;
          }
          case 26: {
            Ip = input.ReadString();
            break;
          }
          case 34: {
            Locale = input.ReadString();
            break;
          }
          case 42: {
            PushType = input.ReadString();
            break;
          }
          case 50: {
            PushToken = input.ReadString();
            break;
          }
          case 58: {
            Platform = input.ReadString();
            break;
          }
          case 66: {
            BundleId = input.ReadString();
            break;
          }
          case 74: {
            AppVersion = input.ReadString();
            break;
          }
          case 82: {
            OsVersion = input.ReadString();
            break;
          }
          case 90: {
            DeviceName = input.ReadString();
            break;
          }
          case 98: {
            PublisherChannel = input.ReadString();
            break;
          }
          case 114: {
            LocaleLanguage = input.ReadString();
            break;
          }
          case 122: {
            DeviceState = input.ReadString();
            break;
          }
          case 128: {
            IsSimulator = input.ReadInt32();
            break;
          }
          case 138: {
            Idfa = input.ReadString();
            break;
          }
          case 146: {
            Idfv = input.ReadString();
            break;
          }
          case 154: {
            GoogleAid = input.ReadString();
            break;
          }
          case 162: {
            AndroidId = input.ReadString();
            break;
          }
          case 170: {
            DeviceId = input.ReadString();
            break;
          }
          case 181: {
            Latitude = input.ReadFloat();
            break;
          }
          case 189: {
            Longitude = input.ReadFloat();
            break;
          }
          case 197: {
            Altitude = input.ReadFloat();
            break;
          }
          case 202: {
            NetworkType = input.ReadString();
            break;
          }
          case 210: {
            ThirdPartDeviceId = input.ReadString();
            break;
          }
          case 218: {
            Build = input.ReadString();
            break;
          }
          case 226: {
            OpenUdid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 角色创建
  /// </summary>
  public sealed partial class CharCreateReq : pb::IMessage<CharCreateReq> {
    private static readonly pb::MessageParser<CharCreateReq> _parser = new pb::MessageParser<CharCreateReq>(() => new CharCreateReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharCreateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharCreateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharCreateReq(CharCreateReq other) : this() {
      accessToken_ = other.accessToken_;
      name_ = other.name_;
      accountId_ = other.accountId_;
      serverId_ = other.serverId_;
      CInfo = other.cInfo_ != null ? other.CInfo.Clone() : null;
      playerId_ = other.playerId_;
      type_ = other.type_;
      passport_ = other.passport_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharCreateReq Clone() {
      return new CharCreateReq(this);
    }

    /// <summary>Field number for the "access_token" field.</summary>
    public const int AccessTokenFieldNumber = 1;
    private string accessToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 玩家名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 3;
    private long accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 4;
    private int serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "c_info" field.</summary>
    public const int CInfoFieldNumber = 5;
    private global::Cspb.ClientInfo cInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ClientInfo CInfo {
      get { return cInfo_; }
      set {
        cInfo_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 6;
    private long playerId_;
    /// <summary>
    /// Server Use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 7;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passport" field.</summary>
    public const int PassportFieldNumber = 8;
    private string passport_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Passport {
      get { return passport_; }
      set {
        passport_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharCreateReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharCreateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccessToken != other.AccessToken) return false;
      if (Name != other.Name) return false;
      if (AccountId != other.AccountId) return false;
      if (ServerId != other.ServerId) return false;
      if (!object.Equals(CInfo, other.CInfo)) return false;
      if (PlayerId != other.PlayerId) return false;
      if (Type != other.Type) return false;
      if (Passport != other.Passport) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (AccountId != 0L) hash ^= AccountId.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (cInfo_ != null) hash ^= CInfo.GetHashCode();
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Passport.Length != 0) hash ^= Passport.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccessToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccessToken);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (AccountId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AccountId);
      }
      if (ServerId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ServerId);
      }
      if (cInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CInfo);
      }
      if (PlayerId != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(PlayerId);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Type);
      }
      if (Passport.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Passport);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccessToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (AccountId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountId);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (cInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CInfo);
      }
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Passport.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passport);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharCreateReq other) {
      if (other == null) {
        return;
      }
      if (other.AccessToken.Length != 0) {
        AccessToken = other.AccessToken;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.AccountId != 0L) {
        AccountId = other.AccountId;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.cInfo_ != null) {
        if (cInfo_ == null) {
          cInfo_ = new global::Cspb.ClientInfo();
        }
        CInfo.MergeFrom(other.CInfo);
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Passport.Length != 0) {
        Passport = other.Passport;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AccessToken = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            AccountId = input.ReadInt64();
            break;
          }
          case 32: {
            ServerId = input.ReadInt32();
            break;
          }
          case 42: {
            if (cInfo_ == null) {
              cInfo_ = new global::Cspb.ClientInfo();
            }
            input.ReadMessage(cInfo_);
            break;
          }
          case 48: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 58: {
            Type = input.ReadString();
            break;
          }
          case 66: {
            Passport = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 角色登录
  /// </summary>
  public sealed partial class CharLoginReq : pb::IMessage<CharLoginReq> {
    private static readonly pb::MessageParser<CharLoginReq> _parser = new pb::MessageParser<CharLoginReq>(() => new CharLoginReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharLoginReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharLoginReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharLoginReq(CharLoginReq other) : this() {
      accessToken_ = other.accessToken_;
      name_ = other.name_;
      accountId_ = other.accountId_;
      serverId_ = other.serverId_;
      CInfo = other.cInfo_ != null ? other.CInfo.Clone() : null;
      playerId_ = other.playerId_;
      type_ = other.type_;
      passport_ = other.passport_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharLoginReq Clone() {
      return new CharLoginReq(this);
    }

    /// <summary>Field number for the "access_token" field.</summary>
    public const int AccessTokenFieldNumber = 1;
    private string accessToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// 玩家名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 3;
    private long accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 4;
    private int serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "c_info" field.</summary>
    public const int CInfoFieldNumber = 5;
    private global::Cspb.ClientInfo cInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ClientInfo CInfo {
      get { return cInfo_; }
      set {
        cInfo_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 6;
    private long playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 7;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passport" field.</summary>
    public const int PassportFieldNumber = 8;
    private string passport_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Passport {
      get { return passport_; }
      set {
        passport_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharLoginReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharLoginReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccessToken != other.AccessToken) return false;
      if (Name != other.Name) return false;
      if (AccountId != other.AccountId) return false;
      if (ServerId != other.ServerId) return false;
      if (!object.Equals(CInfo, other.CInfo)) return false;
      if (PlayerId != other.PlayerId) return false;
      if (Type != other.Type) return false;
      if (Passport != other.Passport) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (AccountId != 0L) hash ^= AccountId.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (cInfo_ != null) hash ^= CInfo.GetHashCode();
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Passport.Length != 0) hash ^= Passport.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccessToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccessToken);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (AccountId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AccountId);
      }
      if (ServerId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ServerId);
      }
      if (cInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CInfo);
      }
      if (PlayerId != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(PlayerId);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Type);
      }
      if (Passport.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Passport);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccessToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (AccountId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountId);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (cInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CInfo);
      }
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Passport.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passport);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharLoginReq other) {
      if (other == null) {
        return;
      }
      if (other.AccessToken.Length != 0) {
        AccessToken = other.AccessToken;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.AccountId != 0L) {
        AccountId = other.AccountId;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.cInfo_ != null) {
        if (cInfo_ == null) {
          cInfo_ = new global::Cspb.ClientInfo();
        }
        CInfo.MergeFrom(other.CInfo);
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Passport.Length != 0) {
        Passport = other.Passport;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AccessToken = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            AccountId = input.ReadInt64();
            break;
          }
          case 32: {
            ServerId = input.ReadInt32();
            break;
          }
          case 42: {
            if (cInfo_ == null) {
              cInfo_ = new global::Cspb.ClientInfo();
            }
            input.ReadMessage(cInfo_);
            break;
          }
          case 48: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 58: {
            Type = input.ReadString();
            break;
          }
          case 66: {
            Passport = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 快速登录 服务器内部测试使用 客户端禁用
  /// 该请求无需提供PlayerId和帐号相关信息，会跳过一切和平台的交互
  /// 最终登录或创建一个专用于FastLogin的PlayerId
  /// </summary>
  public sealed partial class FastLoginReq : pb::IMessage<FastLoginReq> {
    private static readonly pb::MessageParser<FastLoginReq> _parser = new pb::MessageParser<FastLoginReq>(() => new FastLoginReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FastLoginReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FastLoginReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FastLoginReq(FastLoginReq other) : this() {
      secret_ = other.secret_;
      serverId_ = other.serverId_;
      playerId_ = other.playerId_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FastLoginReq Clone() {
      return new FastLoginReq(this);
    }

    /// <summary>Field number for the "secret" field.</summary>
    public const int SecretFieldNumber = 1;
    private string secret_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Secret {
      get { return secret_; }
      set {
        secret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 2;
    private int serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 3;
    private long playerId_;
    /// <summary>
    /// 不用填 服务器生成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FastLoginReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FastLoginReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Secret != other.Secret) return false;
      if (ServerId != other.ServerId) return false;
      if (PlayerId != other.PlayerId) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Secret.Length != 0) hash ^= Secret.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Secret.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Secret);
      }
      if (ServerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ServerId);
      }
      if (PlayerId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Secret.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Secret);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FastLoginReq other) {
      if (other == null) {
        return;
      }
      if (other.Secret.Length != 0) {
        Secret = other.Secret;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Secret = input.ReadString();
            break;
          }
          case 16: {
            ServerId = input.ReadInt32();
            break;
          }
          case 24: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LogoutReq : pb::IMessage<LogoutReq> {
    private static readonly pb::MessageParser<LogoutReq> _parser = new pb::MessageParser<LogoutReq>(() => new LogoutReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogoutReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutReq(LogoutReq other) : this() {
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogoutReq Clone() {
      return new LogoutReq(this);
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogoutReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogoutReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogoutReq other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CharacterCreateCheckReq : pb::IMessage<CharacterCreateCheckReq> {
    private static readonly pb::MessageParser<CharacterCreateCheckReq> _parser = new pb::MessageParser<CharacterCreateCheckReq>(() => new CharacterCreateCheckReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterCreateCheckReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterCreateCheckReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterCreateCheckReq(CharacterCreateCheckReq other) : this() {
      Req = other.req_ != null ? other.Req.Clone() : null;
      aid_ = other.aid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterCreateCheckReq Clone() {
      return new CharacterCreateCheckReq(this);
    }

    /// <summary>Field number for the "req" field.</summary>
    public const int ReqFieldNumber = 1;
    private global::Cspb.CharCreateReq req_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.CharCreateReq Req {
      get { return req_; }
      set {
        req_ = value;
      }
    }

    /// <summary>Field number for the "aid" field.</summary>
    public const int AidFieldNumber = 2;
    private long aid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Aid {
      get { return aid_; }
      set {
        aid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharacterCreateCheckReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharacterCreateCheckReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Req, other.Req)) return false;
      if (Aid != other.Aid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (req_ != null) hash ^= Req.GetHashCode();
      if (Aid != 0L) hash ^= Aid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (req_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Req);
      }
      if (Aid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Aid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (req_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Req);
      }
      if (Aid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Aid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharacterCreateCheckReq other) {
      if (other == null) {
        return;
      }
      if (other.req_ != null) {
        if (req_ == null) {
          req_ = new global::Cspb.CharCreateReq();
        }
        Req.MergeFrom(other.Req);
      }
      if (other.Aid != 0L) {
        Aid = other.Aid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (req_ == null) {
              req_ = new global::Cspb.CharCreateReq();
            }
            input.ReadMessage(req_);
            break;
          }
          case 16: {
            Aid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CharacterCreateCheckAck : pb::IMessage<CharacterCreateCheckAck> {
    private static readonly pb::MessageParser<CharacterCreateCheckAck> _parser = new pb::MessageParser<CharacterCreateCheckAck>(() => new CharacterCreateCheckAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterCreateCheckAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterCreateCheckAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterCreateCheckAck(CharacterCreateCheckAck other) : this() {
      err_ = other.err_;
      Req = other.req_ != null ? other.Req.Clone() : null;
      aid_ = other.aid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterCreateCheckAck Clone() {
      return new CharacterCreateCheckAck(this);
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 1;
    private global::Cspb.ERR_CODE err_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ERR_CODE Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    /// <summary>Field number for the "req" field.</summary>
    public const int ReqFieldNumber = 2;
    private global::Cspb.CharCreateReq req_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.CharCreateReq Req {
      get { return req_; }
      set {
        req_ = value;
      }
    }

    /// <summary>Field number for the "aid" field.</summary>
    public const int AidFieldNumber = 3;
    private long aid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Aid {
      get { return aid_; }
      set {
        aid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharacterCreateCheckAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharacterCreateCheckAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Err != other.Err) return false;
      if (!object.Equals(Req, other.Req)) return false;
      if (Aid != other.Aid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Err != 0) hash ^= Err.GetHashCode();
      if (req_ != null) hash ^= Req.GetHashCode();
      if (Aid != 0L) hash ^= Aid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Err != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Err);
      }
      if (req_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Req);
      }
      if (Aid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Aid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Err != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Err);
      }
      if (req_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Req);
      }
      if (Aid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Aid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharacterCreateCheckAck other) {
      if (other == null) {
        return;
      }
      if (other.Err != 0) {
        Err = other.Err;
      }
      if (other.req_ != null) {
        if (req_ == null) {
          req_ = new global::Cspb.CharCreateReq();
        }
        Req.MergeFrom(other.Req);
      }
      if (other.Aid != 0L) {
        Aid = other.Aid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            err_ = (global::Cspb.ERR_CODE) input.ReadEnum();
            break;
          }
          case 18: {
            if (req_ == null) {
              req_ = new global::Cspb.CharCreateReq();
            }
            input.ReadMessage(req_);
            break;
          }
          case 24: {
            Aid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayCreateAck : pb::IMessage<PlayCreateAck> {
    private static readonly pb::MessageParser<PlayCreateAck> _parser = new pb::MessageParser<PlayCreateAck>(() => new PlayCreateAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayCreateAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCreateAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCreateAck(PlayCreateAck other) : this() {
      err_ = other.err_;
      Req = other.req_ != null ? other.Req.Clone() : null;
      PlayerInfo = other.playerInfo_ != null ? other.PlayerInfo.Clone() : null;
      aid_ = other.aid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCreateAck Clone() {
      return new PlayCreateAck(this);
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 1;
    private global::Cspb.ERR_CODE err_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ERR_CODE Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    /// <summary>Field number for the "req" field.</summary>
    public const int ReqFieldNumber = 2;
    private global::Cspb.CharCreateReq req_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.CharCreateReq Req {
      get { return req_; }
      set {
        req_ = value;
      }
    }

    /// <summary>Field number for the "playerInfo" field.</summary>
    public const int PlayerInfoFieldNumber = 3;
    private global::Cspb.PlayerInfo playerInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    /// <summary>Field number for the "Aid" field.</summary>
    public const int AidFieldNumber = 4;
    private long aid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Aid {
      get { return aid_; }
      set {
        aid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayCreateAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayCreateAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Err != other.Err) return false;
      if (!object.Equals(Req, other.Req)) return false;
      if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
      if (Aid != other.Aid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Err != 0) hash ^= Err.GetHashCode();
      if (req_ != null) hash ^= Req.GetHashCode();
      if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
      if (Aid != 0L) hash ^= Aid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Err != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Err);
      }
      if (req_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Req);
      }
      if (playerInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PlayerInfo);
      }
      if (Aid != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Aid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Err != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Err);
      }
      if (req_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Req);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      if (Aid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Aid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayCreateAck other) {
      if (other == null) {
        return;
      }
      if (other.Err != 0) {
        Err = other.Err;
      }
      if (other.req_ != null) {
        if (req_ == null) {
          req_ = new global::Cspb.CharCreateReq();
        }
        Req.MergeFrom(other.Req);
      }
      if (other.playerInfo_ != null) {
        if (playerInfo_ == null) {
          playerInfo_ = new global::Cspb.PlayerInfo();
        }
        PlayerInfo.MergeFrom(other.PlayerInfo);
      }
      if (other.Aid != 0L) {
        Aid = other.Aid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            err_ = (global::Cspb.ERR_CODE) input.ReadEnum();
            break;
          }
          case 18: {
            if (req_ == null) {
              req_ = new global::Cspb.CharCreateReq();
            }
            input.ReadMessage(req_);
            break;
          }
          case 26: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::Cspb.PlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 32: {
            Aid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AccountLinkReq : pb::IMessage<AccountLinkReq> {
    private static readonly pb::MessageParser<AccountLinkReq> _parser = new pb::MessageParser<AccountLinkReq>(() => new AccountLinkReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountLinkReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountLinkReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountLinkReq(AccountLinkReq other) : this() {
      accessToken_ = other.accessToken_;
      type_ = other.type_;
      passport_ = other.passport_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountLinkReq Clone() {
      return new AccountLinkReq(this);
    }

    /// <summary>Field number for the "accessToken" field.</summary>
    public const int AccessTokenFieldNumber = 1;
    private string accessToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessToken {
      get { return accessToken_; }
      set {
        accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passport" field.</summary>
    public const int PassportFieldNumber = 3;
    private string passport_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Passport {
      get { return passport_; }
      set {
        passport_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 4;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountLinkReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountLinkReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccessToken != other.AccessToken) return false;
      if (Type != other.Type) return false;
      if (Passport != other.Passport) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Passport.Length != 0) hash ^= Passport.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccessToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccessToken);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (Passport.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Passport);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccessToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Passport.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passport);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountLinkReq other) {
      if (other == null) {
        return;
      }
      if (other.AccessToken.Length != 0) {
        AccessToken = other.AccessToken;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Passport.Length != 0) {
        Passport = other.Passport;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AccessToken = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            Passport = input.ReadString();
            break;
          }
          case 34: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AccountLinkAck : pb::IMessage<AccountLinkAck> {
    private static readonly pb::MessageParser<AccountLinkAck> _parser = new pb::MessageParser<AccountLinkAck>(() => new AccountLinkAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountLinkAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Cspb.LoginReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountLinkAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountLinkAck(AccountLinkAck other) : this() {
      errCode_ = other.errCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountLinkAck Clone() {
      return new AccountLinkAck(this);
    }

    /// <summary>Field number for the "errCode" field.</summary>
    public const int ErrCodeFieldNumber = 1;
    private global::Cspb.ERR_CODE errCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Cspb.ERR_CODE ErrCode {
      get { return errCode_; }
      set {
        errCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountLinkAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountLinkAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrCode != other.ErrCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrCode != 0) hash ^= ErrCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ErrCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountLinkAck other) {
      if (other == null) {
        return;
      }
      if (other.ErrCode != 0) {
        ErrCode = other.ErrCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            errCode_ = (global::Cspb.ERR_CODE) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
